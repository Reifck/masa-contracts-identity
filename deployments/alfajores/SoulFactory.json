{
  "address": "0x850a2821f772434e561D2EFdcE487C05cE2699Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract SoulboundIdentity",
          "name": "_soulBoundIdentity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintingIdentityAndNamePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingIdentityPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingNamePrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_utilityToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserveWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SoulNamePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SoulboundIdentityAndNamePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SoulboundIdentityPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintingPrice",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInStableCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUtilityToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "estimateSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingIdentityAndNamePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingIdentityPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingNamePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        }
      ],
      "name": "purchaseIdentity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "purchaseIdentityAndName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseIdentityAndNameInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInStableCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUtilityToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseIdentityInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInStableCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUtilityToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "purchaseName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseNameInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInStableCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUtilityToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingIdentityAndNamePrice",
          "type": "uint256"
        }
      ],
      "name": "setMintingIdentityAndNamePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingIdentityPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintingIdentityPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingNamePrice",
          "type": "uint256"
        }
      ],
      "name": "setMintingNamePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserveWallet",
          "type": "address"
        }
      ],
      "name": "setReserveWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract SoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "name": "setStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_utilityToken",
          "type": "address"
        }
      ],
      "name": "setUtilityToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract SoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilityToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c28d4479897889c30912dedfed05f674432113edf1f62f3ef9d3f19cc9a1fda",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0x850a2821f772434e561D2EFdcE487C05cE2699Ea",
    "transactionIndex": 0,
    "gasUsed": "2168268",
    "logsBloom": "0x
    "blockHash": "0x5fc3e72ccfabbbddd11a17cc4085fd370b9c3be1dc39924cb592ca6d7311f711",
    "transactionHash": "0x9c28d4479897889c30912dedfed05f674432113edf1f62f3ef9d3f19cc9a1fda",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13528161,
        "transactionHash": "0x9c28d4479897889c30912dedfed05f674432113edf1f62f3ef9d3f19cc9a1fda",
        "address": "0x850a2821f772434e561D2EFdcE487C05cE2699Ea",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5fc3e72ccfabbbddd11a17cc4085fd370b9c3be1dc39924cb592ca6d7311f711"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13528161,
        "transactionHash": "0x9c28d4479897889c30912dedfed05f674432113edf1f62f3ef9d3f19cc9a1fda",
        "address": "0x850a2821f772434e561D2EFdcE487C05cE2699Ea",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5fc3e72ccfabbbddd11a17cc4085fd370b9c3be1dc39924cb592ca6d7311f711"
      }
    ],
    "blockNumber": 13528161,
    "cumulativeGasUsed": "2168268",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "0xBDc0F2e51bedaB31258BE0c0bd8fCf141bccd193",
    "5000000",
    "3000000",
    "3000000",
    "0x9A138722AFEdBf38B54d33A88eF903a5c16E6455",
    "0x37f39aD164cBBf0Cc03Dd638472F3FbeC7aE426C",
    "0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9",
    "0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121",
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F"
  ],
  "numDeployments": 1,
  "solcInputHash": "75708de12795f2aaa53306849f53cc3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract SoulboundIdentity\",\"name\":\"_soulBoundIdentity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintingIdentityAndNamePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingIdentityPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingNamePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_utilityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SoulNamePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SoulboundIdentityAndNamePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SoulboundIdentityPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingPrice\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUtilityToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"estimateSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingIdentityAndNamePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingIdentityPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingNamePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"purchaseIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"purchaseIdentityAndName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseIdentityAndNameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUtilityToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseIdentityInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUtilityToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"purchaseName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseNameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUtilityToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingIdentityAndNamePrice\",\"type\":\"uint256\"}],\"name\":\"setMintingIdentityAndNamePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingIdentityPrice\",\"type\":\"uint256\"}],\"name\":\"setMintingIdentityPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingNamePrice\",\"type\":\"uint256\"}],\"name\":\"setMintingNamePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"setReserveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilityToken\",\"type\":\"address\"}],\"name\":\"setUtilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract SoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"From this smart contract we can mint new Soulbound Identities and Soul Name NFTs. This minting can be done paying a fee in ETH, USDC or CORN\",\"kind\":\"dev\",\"methods\":{\"_getSwapAmounts(uint256)\":{\"details\":\"Returns all current pricing and amount informations for a purchase\",\"returns\":{\"priceInETH\":\"Current pric in native token (ETH)\",\"priceInStableCoin\":\"Current price in stable coin\",\"priceInUtilityToken\":\"Current price in utility token ($CORN)\"}},\"constructor\":{\"details\":\"Creates a new Soul Factory, that has the role to minting new Soulbound Identities and Soul Name NFTs, paying a fee\",\"params\":{\"_mintingIdentityAndNamePrice\":\"Price of the identity and name minting in stable coin\",\"_mintingIdentityPrice\":\"Price of the identity minting in stable coin\",\"_mintingNamePrice\":\"Price of the name minting in stable coin\",\"_reserveWallet\":\"Wallet that will receive the fee\",\"_soulBoundIdentity\":\"Address of the Soulbound identity contract\",\"_stableCoin\":\"Stable coin to pay the fee in (USDC)\",\"_swapRouter\":\"Swap router address\",\"_utilityToken\":\"Utility token to pay the fee in ($CORN)\",\"_wrappedNativeToken\":\"Wrapped native token address\",\"owner\":\"Owner of the smart contract\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"Sets an emergency stop mechanism that can be triggered by an authorized account.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseIdentity(address)\":{\"details\":\"This function allows the purchase of a soulbound identity using stable coin (USDC), native token (ETH) or utility token ($CORN)\",\"params\":{\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"_0\":\"TokenId of the new soulbound identity\"}},\"purchaseIdentityAndName(address,string)\":{\"details\":\"This function allows the purchase of a soulbound identity and name using stable coin (USDC), native token (ETH) or utility token ($CORN)\",\"params\":{\"name\":\"Name of the new soul name\",\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"_0\":\"TokenId of the new soulbound identity\"}},\"purchaseIdentityAndNameInfo()\":{\"details\":\"Returns all current pricing and amount informations for a purchase\",\"returns\":{\"priceInETH\":\"Current price of the identity and name minting in native token (ETH)\",\"priceInStableCoin\":\"Current price of the identity and name minting in stable coin\",\"priceInUtilityToken\":\"Current price of the identity and nameminting in utility token ($CORN)\"}},\"purchaseIdentityInfo()\":{\"details\":\"Returns all current pricing and amount informations for a purchase\",\"returns\":{\"priceInETH\":\"Current price of the identity minting in native token (ETH)\",\"priceInStableCoin\":\"Current price of the identity minting in stable coin\",\"priceInUtilityToken\":\"Current price of the identity minting in utility token ($CORN)\"}},\"purchaseName(address,string)\":{\"details\":\"This function allows the purchase of a soul name using stable coin (USDC), native token (ETH) or utility token ($CORN)\",\"params\":{\"name\":\"Name of the new soul name\",\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"_0\":\"TokenId of the new sou name\"}},\"purchaseNameInfo()\":{\"details\":\"Returns all current pricing and amount informations for a purchase\",\"returns\":{\"priceInETH\":\"Current price of the name minting in native token (ETH)\",\"priceInStableCoin\":\"Current price of the name minting in stable coin\",\"priceInUtilityToken\":\"Current price of the name minting in utility token ($CORN)\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setMintingIdentityAndNamePrice(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_mintingIdentityAndNamePrice\":\"New price of the identity and name minting in stable coin\"}},\"setMintingIdentityPrice(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_mintingIdentityPrice\":\"New price of the identity minting in stable coin\"}},\"setMintingNamePrice(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_mintingNamePrice\":\"New price of the name minting in stable coin\"}},\"setReserveWallet(address)\":{\"details\":\"Let change the reserve walled. It can be triggered by an authorized account.\",\"params\":{\"_reserveWallet\":\"New reserve wallet\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_soulboundIdentity\":\"New SoulboundIdentity contract address\"}},\"setStableCoin(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_stableCoin\":\"New stable coin to pay the fee in\"}},\"setSwapRouter(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_swapRouter\":\"New swap router address\"}},\"setUtilityToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_utilityToken\":\"New utility token to pay the fee in\"}},\"setWrappedNativeToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_wrappedNativeToken\":\"New wrapped native token address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unsets an emergency stop mechanism. It can be triggered by an authorized account.\"}},\"title\":\"Soul Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getSwapAmounts(uint256)\":{\"notice\":\"Returns the price of minting\"},\"constructor\":{\"notice\":\"Creates a new Soul Factory\"},\"pause()\":{\"notice\":\"Pauses the operations in the smart contract\"},\"purchaseIdentity(address)\":{\"notice\":\"Mints a new Soulbound Identity purchasing it\"},\"purchaseIdentityAndName(address,string)\":{\"notice\":\"Mints a new Soulbound Identity and Name purchasing it\"},\"purchaseIdentityAndNameInfo()\":{\"notice\":\"Returns the price of the identity and name minting\"},\"purchaseIdentityInfo()\":{\"notice\":\"Returns the price of the identity minting\"},\"purchaseName(address,string)\":{\"notice\":\"Mints a new Soul Name purchasing it\"},\"purchaseNameInfo()\":{\"notice\":\"Returns the price of the name minting\"},\"setMintingIdentityAndNamePrice(uint256)\":{\"notice\":\"Sets the price of the identity and name minting in stable coin\"},\"setMintingIdentityPrice(uint256)\":{\"notice\":\"Sets the price of the identity minting in stable coin\"},\"setMintingNamePrice(uint256)\":{\"notice\":\"Sets the price of the name minting in stable coin\"},\"setReserveWallet(address)\":{\"notice\":\"Set the reserve wallet\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this factory\"},\"setStableCoin(address)\":{\"notice\":\"Sets the stable coin to pay the fee in (USDC)\"},\"setSwapRouter(address)\":{\"notice\":\"Sets the swap router address\"},\"setUtilityToken(address)\":{\"notice\":\"Sets the utility token to pay the fee in ($CORN)\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Sets the wrapped native token address\"},\"unpause()\":{\"notice\":\"Unpauses the operations in the smart contract\"}},\"notice\":\"Soul Factory, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulFactory.sol\":\"SoulFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SoulFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./dex/DexAMM.sol\\\";\\nimport \\\"./SoulboundIdentity.sol\\\";\\nimport \\\"./SoulName.sol\\\";\\n\\n/// @title Soul Factory\\n/// @author Masa Finance\\n/// @notice Soul Factory, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\\n/// @dev From this smart contract we can mint new Soulbound Identities and Soul Name NFTs.\\n/// This minting can be done paying a fee in ETH, USDC or CORN\\ncontract SoulFactory is DexAMM, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    SoulboundIdentity public soulboundIdentity;\\n\\n    uint256 public mintingIdentityAndNamePrice; // price in stable coin\\n    uint256 public mintingIdentityPrice; // price in stable coin\\n    uint256 public mintingNamePrice; // price in stable coin\\n\\n    address public stableCoin; // USDC\\n    address public utilityToken; // $CORN\\n\\n    address public reserveWallet;\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new Soul Factory\\n    /// @dev Creates a new Soul Factory, that has the role to minting new Soulbound Identities\\n    /// and Soul Name NFTs, paying a fee\\n    /// @param owner Owner of the smart contract\\n    /// @param _soulBoundIdentity Address of the Soulbound identity contract\\n    /// @param _mintingIdentityAndNamePrice Price of the identity and name minting in stable coin\\n    /// @param _mintingIdentityPrice Price of the identity minting in stable coin\\n    /// @param _mintingNamePrice Price of the name minting in stable coin\\n    /// @param _utilityToken Utility token to pay the fee in ($CORN)\\n    /// @param _stableCoin Stable coin to pay the fee in (USDC)\\n    /// @param _wrappedNativeToken Wrapped native token address\\n    /// @param _swapRouter Swap router address\\n    /// @param _reserveWallet Wallet that will receive the fee\\n    constructor(\\n        address owner,\\n        SoulboundIdentity _soulBoundIdentity,\\n        uint256 _mintingIdentityAndNamePrice,\\n        uint256 _mintingIdentityPrice,\\n        uint256 _mintingNamePrice,\\n        address _utilityToken,\\n        address _stableCoin,\\n        address _wrappedNativeToken,\\n        address _swapRouter,\\n        address _reserveWallet\\n    ) DexAMM(_swapRouter, _wrappedNativeToken) {\\n        require(_reserveWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(address(_soulBoundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(PAUSER_ROLE, owner);\\n\\n        soulboundIdentity = _soulBoundIdentity;\\n\\n        mintingIdentityAndNamePrice = _mintingIdentityAndNamePrice;\\n        mintingIdentityPrice = _mintingIdentityPrice;\\n        mintingNamePrice = _mintingNamePrice;\\n        stableCoin = _stableCoin;\\n        utilityToken = _utilityToken;\\n\\n        reserveWallet = _reserveWallet;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Pauses the operations in the smart contract\\n    /// @dev Sets an emergency stop mechanism that can be triggered by an authorized account.\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the operations in the smart contract\\n    /// @dev Unsets an emergency stop mechanism. It can be triggered by an authorized account.\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this factory\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity New SoulboundIdentity contract address\\n    function setSoulboundIdentity(SoulboundIdentity _soulboundIdentity)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulboundIdentity != _soulboundIdentity, \\\"SAME_VALUE\\\");\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the price of the identity and name minting in stable coin\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _mintingIdentityAndNamePrice New price of the identity and name minting in stable coin\\n    function setMintingIdentityAndNamePrice(\\n        uint256 _mintingIdentityAndNamePrice\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            mintingIdentityAndNamePrice != _mintingIdentityAndNamePrice,\\n            \\\"SAME_VALUE\\\"\\n        );\\n        mintingIdentityAndNamePrice = _mintingIdentityAndNamePrice;\\n    }\\n\\n    /// @notice Sets the price of the identity minting in stable coin\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _mintingIdentityPrice New price of the identity minting in stable coin\\n    function setMintingIdentityPrice(uint256 _mintingIdentityPrice)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(mintingIdentityPrice != _mintingIdentityPrice, \\\"SAME_VALUE\\\");\\n        mintingIdentityPrice = _mintingIdentityPrice;\\n    }\\n\\n    /// @notice Sets the price of the name minting in stable coin\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _mintingNamePrice New price of the name minting in stable coin\\n    function setMintingNamePrice(uint256 _mintingNamePrice)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(mintingNamePrice != _mintingNamePrice, \\\"SAME_VALUE\\\");\\n        mintingNamePrice = _mintingNamePrice;\\n    }\\n\\n    /// @notice Sets the stable coin to pay the fee in (USDC)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _stableCoin New stable coin to pay the fee in\\n    function setStableCoin(address _stableCoin)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_stableCoin != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(stableCoin != _stableCoin, \\\"SAME_VALUE\\\");\\n        stableCoin = _stableCoin;\\n    }\\n\\n    /// @notice Sets the utility token to pay the fee in ($CORN)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _utilityToken New utility token to pay the fee in\\n    function setUtilityToken(address _utilityToken)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_utilityToken != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(utilityToken != _utilityToken, \\\"SAME_VALUE\\\");\\n        utilityToken = _utilityToken;\\n    }\\n\\n    /// @notice Set the reserve wallet\\n    /// @dev Let change the reserve walled. It can be triggered by an authorized account.\\n    /// @param _reserveWallet New reserve wallet\\n    function setReserveWallet(address _reserveWallet)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_reserveWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_reserveWallet != reserveWallet, \\\"SAME_VALUE\\\");\\n        reserveWallet = _reserveWallet;\\n    }\\n\\n    /// @notice Sets the swap router address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _swapRouter New swap router address\\n    function setSwapRouter(address _swapRouter)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_swapRouter != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(swapRouter != _swapRouter, \\\"SAME_VALUE\\\");\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /// @notice Sets the wrapped native token address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _wrappedNativeToken New wrapped native token address\\n    function setWrappedNativeToken(address _wrappedNativeToken)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_wrappedNativeToken != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(wrappedNativeToken != _wrappedNativeToken, \\\"SAME_VALUE\\\");\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new Soulbound Identity and Name purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity and name using\\n    /// stable coin (USDC), native token (ETH) or utility token ($CORN)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param name Name of the new soul name\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentityAndName(address paymentMethod, string memory name)\\n        external\\n        payable\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        _payForMinting(paymentMethod, mintingIdentityAndNamePrice);\\n\\n        // finalize purchase\\n        return _mintSoulboundIdentityAndName(_msgSender(), name);\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity using\\n    /// stable coin (USDC), native token (ETH) or utility token ($CORN)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentity(address paymentMethod)\\n        external\\n        payable\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        _payForMinting(paymentMethod, mintingIdentityPrice);\\n\\n        // finalize purchase\\n        return _mintSoulboundIdentity(_msgSender());\\n    }\\n\\n    /// @notice Mints a new Soul Name purchasing it\\n    /// @dev This function allows the purchase of a soul name using\\n    /// stable coin (USDC), native token (ETH) or utility token ($CORN)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param name Name of the new soul name\\n    /// @return TokenId of the new sou name\\n    function purchaseName(address paymentMethod, string memory name)\\n        external\\n        payable\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        _payForMinting(paymentMethod, mintingNamePrice);\\n\\n        // finalize purchase\\n        return _mintSoulName(_msgSender(), name);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the price of the identity and name minting\\n    /// @dev Returns all current pricing and amount informations for a purchase\\n    /// @return priceInStableCoin Current price of the identity and name minting in stable coin\\n    /// @return priceInETH Current price of the identity and name minting in native token (ETH)\\n    /// @return priceInUtilityToken Current price of the identity and nameminting in utility token ($CORN)\\n    function purchaseIdentityAndNameInfo()\\n        public\\n        view\\n        returns (\\n            uint256 priceInStableCoin,\\n            uint256 priceInETH,\\n            uint256 priceInUtilityToken\\n        )\\n    {\\n        (priceInStableCoin, priceInETH, priceInUtilityToken) = _getSwapAmounts(\\n            mintingIdentityAndNamePrice\\n        );\\n    }\\n\\n    /// @notice Returns the price of the identity minting\\n    /// @dev Returns all current pricing and amount informations for a purchase\\n    /// @return priceInStableCoin Current price of the identity minting in stable coin\\n    /// @return priceInETH Current price of the identity minting in native token (ETH)\\n    /// @return priceInUtilityToken Current price of the identity minting in utility token ($CORN)\\n    function purchaseIdentityInfo()\\n        public\\n        view\\n        returns (\\n            uint256 priceInStableCoin,\\n            uint256 priceInETH,\\n            uint256 priceInUtilityToken\\n        )\\n    {\\n        (priceInStableCoin, priceInETH, priceInUtilityToken) = _getSwapAmounts(\\n            mintingIdentityPrice\\n        );\\n    }\\n\\n    /// @notice Returns the price of the name minting\\n    /// @dev Returns all current pricing and amount informations for a purchase\\n    /// @return priceInStableCoin Current price of the name minting in stable coin\\n    /// @return priceInETH Current price of the name minting in native token (ETH)\\n    /// @return priceInUtilityToken Current price of the name minting in utility token ($CORN)\\n    function purchaseNameInfo()\\n        public\\n        view\\n        returns (\\n            uint256 priceInStableCoin,\\n            uint256 priceInETH,\\n            uint256 priceInUtilityToken\\n        )\\n    {\\n        (priceInStableCoin, priceInETH, priceInUtilityToken) = _getSwapAmounts(\\n            mintingNamePrice\\n        );\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    /// @notice Returns the price of minting\\n    /// @dev Returns all current pricing and amount informations for a purchase\\n    /// @return priceInStableCoin Current price in stable coin\\n    /// @return priceInETH Current pric in native token (ETH)\\n    /// @return priceInUtilityToken Current price in utility token ($CORN)\\n    function _getSwapAmounts(uint256 mintingPrice)\\n        public\\n        view\\n        returns (\\n            uint256 priceInStableCoin,\\n            uint256 priceInETH,\\n            uint256 priceInUtilityToken\\n        )\\n    {\\n        priceInStableCoin = mintingPrice;\\n        // get swapped price in ETH and $CORN\\n        priceInETH = estimateSwapAmount(\\n            wrappedNativeToken,\\n            stableCoin,\\n            mintingPrice\\n        );\\n        priceInUtilityToken = estimateSwapAmount(\\n            utilityToken,\\n            stableCoin,\\n            mintingPrice\\n        );\\n    }\\n\\n    /// @notice Performs the payment for the minting\\n    /// @dev This method will transfer the funds to the reserve wallet, performing\\n    /// the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param mintingPrice Price of the minting\\n    function _payForMinting(address paymentMethod, uint256 mintingPrice)\\n        internal\\n    {\\n        if (paymentMethod == stableCoin) {\\n            // USDC\\n            IERC20(paymentMethod).safeTransferFrom(\\n                msg.sender,\\n                reserveWallet,\\n                mintingPrice\\n            );\\n        } else if (paymentMethod == address(0)) {\\n            // ETH\\n            uint256 swapAmout = estimateSwapAmount(\\n                wrappedNativeToken,\\n                stableCoin,\\n                mintingPrice\\n            );\\n            require(msg.value >= swapAmout, \\\"INVALID_PAYMENT_AMOUNT\\\");\\n            (bool success, ) = payable(reserveWallet).call{value: swapAmout}(\\n                \\\"\\\"\\n            );\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n            if (msg.value > swapAmout) {\\n                // return diff\\n                uint256 refund = msg.value.sub(swapAmout);\\n                (success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                require(success);\\n            }\\n        } else if (paymentMethod == utilityToken) {\\n            // $CORN\\n            uint256 swapAmout = estimateSwapAmount(\\n                paymentMethod,\\n                stableCoin,\\n                mintingPrice\\n            );\\n            IERC20(paymentMethod).safeTransferFrom(\\n                msg.sender,\\n                reserveWallet,\\n                swapAmout\\n            );\\n        } else {\\n            revert(\\\"INVALID_PAYMENT_METHOD\\\");\\n        }\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity and Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and a Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentityAndName(address to, string memory name)\\n        internal\\n        returns (uint256)\\n    {\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mintIdentityWithName(to, name);\\n\\n        emit SoulboundIdentityAndNamePurchased(\\n            to,\\n            tokenId,\\n            name,\\n            mintingIdentityPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and emit the purchase event\\n    /// @param to Address of the owner of the new identity\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentity(address to) internal returns (uint256) {\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mint(to);\\n\\n        emit SoulboundIdentityPurchased(to, tokenId, mintingIdentityPrice);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soul Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @return TokenId of the new soul name\\n    function _mintSoulName(address to, string memory name)\\n        internal\\n        returns (uint256)\\n    {\\n        // mint Soul Name token\\n        SoulName soulName = soulboundIdentity.soulName();\\n        uint256 identityId = soulboundIdentity.tokenOfOwner(to);\\n\\n        uint256 tokenId = soulName.mint(to, name, identityId);\\n\\n        emit SoulNamePurchased(to, tokenId, name, mintingNamePrice);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event SoulboundIdentityAndNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 price\\n    );\\n\\n    event SoulboundIdentityPurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 price\\n    );\\n\\n    event SoulNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 price\\n    );\\n}\\n\",\"keccak256\":\"0x7e7369613b0af2b2fe429af32b30f9016d67ede2d945b5f75206b0990fbc1ea9\",\"license\":\"Apache-2.0\"},\"contracts/SoulLinker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISoulLinker.sol\\\";\\n\\n/// @title Soul linker\\n/// @author Masa Finance\\n/// @notice Soul linker smart contract that let add links to a Soulbound token.\\ncontract SoulLinker is Ownable, ISoulLinker {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    mapping(uint256 => Link) private links;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soul linker\\n    /// @param owner Owner of the smart contract\\n    constructor(address owner) Ownable() {\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Query if the contract has links for the given token id\\n    /// @param token Address of the token\\n    /// @param tokenId Id of the token\\n    /// @return `true` if the contract has links, `false` otherwise\\n    function hasLinks(address token, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return false;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x8474bd0d2bc2aeafbaa08d728a12888a545994c0e56fa51f091b774f480a2148\",\"license\":\"Apache-2.0\"},\"contracts/SoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./tokens/NFT.sol\\\";\\nimport \\\"./interfaces/ISoulNameResolver.sol\\\";\\nimport \\\"./SoulboundIdentity.sol\\\";\\n\\n/// @title SoulName NFT\\n/// @author Masa Finance\\n/// @notice SoulName NFT that points to a Soulbound identity token\\n/// @dev SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token.\\n/// It has an extension, and stores all the information about the identity names.\\ncontract SoulName is NFT, ISoulNameResolver {\\n    /* ========== STATE VARIABLES ========== */\\n    using Strings for uint256;\\n\\n    SoulboundIdentity public soulboundIdentity;\\n    string public extension; // suffix of the names (.sol?)\\n\\n    mapping(uint256 => string) tokenIdToName; // used to sort through all names (name in lowercase)\\n    mapping(string => SoulNameData) soulNames; // register of all soulbound names (name in lowercase)\\n    mapping(uint256 => string[]) identityIdToNames; // register of all names associated to an identityId\\n\\n    struct SoulNameData {\\n        string name; // Name with lowercase and uppercase\\n        uint256 identityId;\\n    }\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new SoulName NFT\\n    /// @dev Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\\n    /// @param owner Owner of the smart contract\\n    /// @param _soulboundIdentity Address of the Soulbound identity contract\\n    /// @param _extension Extension of the soul name\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address owner,\\n        SoulboundIdentity _soulboundIdentity,\\n        string memory _extension,\\n        string memory baseTokenURI\\n    ) NFT(owner, \\\"Masa Identity Name\\\", \\\"MIN\\\", baseTokenURI) {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        soulboundIdentity = _soulboundIdentity;\\n        extension = _extension;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Sets the extension of the soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _extension Extension of the soul name\\n    function setExtension(string memory _extension)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            keccak256(abi.encodePacked((extension))) !=\\n                keccak256(abi.encodePacked((_extension))),\\n            \\\"SAME_VALUE\\\"\\n        );\\n        extension = _extension;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new soul name\\n    /// @dev The caller can mint more than one name. The soul name must be unique.\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param identityId TokenId of the soulbound identity that will be pointed from this soul name\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId\\n    ) public returns (uint256) {\\n        require(!nameExists(name), \\\"NAME_ALREADY_EXISTS\\\");\\n        require(bytes(name).length > 0, \\\"ZERO_LENGTH_NAME\\\");\\n        require(\\n            soulboundIdentity.ownerOf(identityId) != address(0),\\n            \\\"IDENTITY_NOT_FOUND\\\"\\n        );\\n\\n        uint256 tokenId = _mintWithCounter(to);\\n\\n        string memory lowercaseName = _toLowerCase(name);\\n        tokenIdToName[tokenId] = lowercaseName;\\n\\n        soulNames[lowercaseName].name = name;\\n        soulNames[lowercaseName].identityId = identityId;\\n\\n        identityIdToNames[identityId].push(lowercaseName);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Update the identity id pointed from a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param identityId New TokenId of the soulbound identity that will be pointed from this soul name\\n    function updateIdentityId(uint256 tokenId, uint256 identityId) public {\\n        // ERC721: caller is not token owner nor approved\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721_CALLER_NOT_OWNER\\\"\\n        );\\n        require(\\n            soulboundIdentity.ownerOf(identityId) != address(0),\\n            \\\"IDENTITY_NOT_FOUND\\\"\\n        );\\n\\n        string memory name = tokenIdToName[tokenId];\\n        uint256 oldIdentityId = soulNames[name].identityId;\\n\\n        // change value from soulNames\\n        soulNames[name].identityId = identityId;\\n\\n        // remove name from identityIdToNames[oldIdentityId]\\n        _removeFromIdentityIdToNames(oldIdentityId, name);\\n\\n        // add name to identityIdToNames[identityId]\\n        identityIdToNames[identityId].push(name);\\n    }\\n\\n    /// @notice Burn a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name to burn\\n    function burn(uint256 tokenId) public override {\\n        require(_exists(tokenId), \\\"TOKEN_NOT_FOUND\\\");\\n\\n        string memory name = tokenIdToName[tokenId];\\n        uint256 identityId = soulNames[name].identityId;\\n\\n        // remove info from tokenIdToName, soulnames and identityIdToNames\\n        delete tokenIdToName[tokenId];\\n        delete soulNames[name];\\n        _removeFromIdentityIdToNames(identityId, name);\\n\\n        super.burn(tokenId);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Checks if a soul name already exists\\n    /// @dev This function queries if a soul name already exists\\n    /// @param name Name of the soul name\\n    /// @return exists `true` if the soul name exists, `false` otherwise\\n    function nameExists(string memory name)\\n        public\\n        view\\n        override\\n        returns (bool exists)\\n    {\\n        string memory lowercaseName = _toLowerCase(name);\\n        return (bytes(soulNames[lowercaseName].name).length > 0);\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return identityId Identity id of the soul name\\n    function getIdentityData(string memory name)\\n        external\\n        view\\n        override\\n        returns (string memory sbtName, uint256 identityId)\\n    {\\n        string memory lowercaseName = _toLowerCase(name);\\n        SoulNameData memory soulNameData = soulNames[lowercaseName];\\n        require(bytes(soulNameData.name).length > 0, \\\"NAME_NOT_FOUND\\\");\\n\\n        return (\\n            string(bytes.concat(bytes(soulNameData.name), bytes(extension))),\\n            soulNameData.identityId\\n        );\\n    }\\n\\n    /// @notice Returns all the identity names of an identity\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param identityId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getIdentityNames(uint256 identityId)\\n        external\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        // return identity names if exists\\n        return identityIdToNames[identityId];\\n    }\\n\\n    /// @notice Returns the URI of a soul name\\n    /// @dev This function returns the token URI of the soul name identity specified by the tokenId\\n    /// @param tokenId TokenId of the soul name\\n    /// @return URI of the soul name\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        string memory name = tokenIdToName[tokenId];\\n        require(bytes(name).length != 0, \\\"TOKEN_NOT_FOUND\\\");\\n\\n        string memory lowercaseName = _toLowerCase(name);\\n        SoulNameData memory soulNameData = soulNames[lowercaseName];\\n        require(bytes(soulNameData.name).length > 0, \\\"NAME_NOT_FOUND\\\");\\n\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            '\\\"name\\\": \\\"',\\n            string(bytes.concat(bytes(soulNameData.name), bytes(extension))),\\n            '\\\", ',\\n            '\\\"description\\\": \\\"This is a SoulName',\\n            '\\\", ',\\n            '\\\"external_url\\\": \\\"https://soulname.com/',\\n            tokenId.toString(),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _toLowerCase(string memory _str)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n\\n    function _removeFromIdentityIdToNames(\\n        uint256 identityId,\\n        string memory name\\n    ) private {\\n        for (uint256 i = 0; i < identityIdToNames[identityId].length; i++) {\\n            if (\\n                keccak256(\\n                    abi.encodePacked((identityIdToNames[identityId][i]))\\n                ) == keccak256(abi.encodePacked((name)))\\n            ) {\\n                identityIdToNames[identityId][i] = identityIdToNames[\\n                    identityId\\n                ][identityIdToNames[identityId].length - 1];\\n                identityIdToNames[identityId].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n}\\n\",\"keccak256\":\"0xb55f576cc47b9b176693f19bae00f6d28fda5f84462156c753f9db0239f5e900\",\"license\":\"Apache-2.0\"},\"contracts/SoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./tokens/SBT.sol\\\";\\nimport \\\"./SoulLinker.sol\\\";\\nimport \\\"./SoulName.sol\\\";\\n\\n/// @title Soulbound Identity\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents an identity.\\n/// @dev Soulbound identity, that inherits from the SBT contract.\\ncontract SoulboundIdentity is SBT {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    SoulName public soulName;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound identity\\n    /// @dev Creates a new soulbound identity, inheriting from the SBT contract.\\n    /// @param owner Owner of the smart contract\\n    /// @param _soulLinker Address of the SoulLinker contract\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address owner,\\n        SoulLinker _soulLinker,\\n        string memory baseTokenURI\\n    ) SBT(owner, _soulLinker, \\\"Masa Identity\\\", \\\"MID\\\", baseTokenURI) {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulName contract address linked to this identity\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulName Address of the SoulName contract\\n    function setSoulName(SoulName _soulName)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_soulName) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulName != _soulName, \\\"SAME_VALUE\\\");\\n        soulName = _soulName;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new soulbound identity\\n    /// @dev The caller can only mint one identity per address\\n    /// @param to Address of the owner of the new identity\\n    function mint(address to) public override returns (uint256) {\\n        // Soulbound identity already created!\\n        require(balanceOf(to) < 1, \\\"SB_IDENTITY_ALREADY_CREATED\\\");\\n\\n        return super.mint(to);\\n    }\\n\\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\\n    /// @dev The caller can only mint one identity per address, and the name must be unique\\n    /// @param to Address of the owner of the new identity\\n    /// @param name Name of the new identity\\n    function mintIdentityWithName(address to, string memory name)\\n        public\\n        payable\\n        soulNameAlreadySet\\n        returns (uint256)\\n    {\\n        uint256 identityId = mint(to);\\n        soulName.mint(to, name, identityId);\\n\\n        return identityId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function returns the extension of the soul name\\n    /// @return Extension of the soul name\\n    function extension() public view returns (string memory) {\\n        return soulName.extension();\\n    }\\n\\n    /// @notice Returns the owner address of an identity\\n    /// @dev This function returns the owner address of the identity specified by the tokenId\\n    /// @param tokenId TokenId of the identity\\n    /// @return Address of the owner of the identity\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    /// @notice Returns the owner address of a soul name\\n    /// @dev This function returns the owner address of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return Address of the owner of the identity\\n    function ownerOf(string memory name)\\n        public\\n        view\\n        soulNameAlreadySet\\n        returns (address)\\n    {\\n        (, uint256 tokenId) = soulName.getIdentityData(name);\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    /// @notice Returns the URI of a soul name\\n    /// @dev This function returns the token URI of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the identity associated to a soul name\\n    function tokenURI(string memory name)\\n        public\\n        view\\n        soulNameAlreadySet\\n        returns (string memory)\\n    {\\n        (, uint256 tokenId) = soulName.getIdentityData(name);\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /// @notice Returns the URI of the owner of an identity\\n    /// @dev This function returns the token URI of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return URI of the identity owned by the account\\n    function tokenURI(address owner) public view returns (string memory) {\\n        uint256 tokenId = tokenOfOwner(owner);\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /// @notice Returns the identity id of an account\\n    /// @dev This function returns the tokenId of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return TokenId of the identity owned by the account\\n    function tokenOfOwner(address owner) public view returns (uint256) {\\n        return super.tokenOfOwnerByIndex(owner, 0);\\n    }\\n\\n    /// @notice Checks if a soul name already exists\\n    /// @dev This function queries if a soul name already exists\\n    /// @param name Name of the soul name\\n    /// @return exists `true` if the soul name exists, `false` otherwise\\n    function nameExists(string memory name)\\n        public\\n        view\\n        soulNameAlreadySet\\n        returns (bool exists)\\n    {\\n        return soulName.nameExists(name);\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return identityId Identity id of the soul name\\n    function getIdentityData(string memory name)\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (string memory sbtName, uint256 identityId)\\n    {\\n        return soulName.getIdentityData(name);\\n    }\\n\\n    /// @notice Returns all the identity names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getIdentityNames(address owner)\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (string[] memory sbtNames)\\n    {\\n        uint256 tokenId = tokenOfOwner(owner);\\n        return soulName.getIdentityNames(tokenId);\\n    }\\n\\n    /// @notice Returns all the identity names of an identity\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param tokenId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getIdentityNames(uint256 tokenId)\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (string[] memory sbtNames)\\n    {\\n        return soulName.getIdentityNames(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier soulNameAlreadySet() {\\n        require(address(soulName) != address(0), \\\"SOULNAME_CONTRACT_NOT_SET\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x03bd474051807e9a699ba94e5aa41b13964cae57bb66cde051a4124d8468e176\",\"license\":\"Apache-2.0\"},\"contracts/dex/DexAMM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/dex/IUniswapRouter.sol\\\";\\n\\n/// @title Decentralized automated market maker (AMM)\\n/// @author Masa Finance\\n/// @notice Smart contract to call a Dex AMM smart contract\\n/// @dev This smart contract will call the Uniswap Router interface, based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\nabstract contract DexAMM {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    address public swapRouter;\\n    address public wrappedNativeToken;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Dex AMM\\n    /// @dev Creates a new Decentralized automated market maker (AMM) smart contract,\\n    // that will call the Uniswap Router interface\\n    /// @param _swapRouter Swap router address\\n    /// @param _wrappedNativeToken Wrapped native token address\\n    constructor(address _swapRouter, address _wrappedNativeToken) {\\n        require(_swapRouter != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_wrappedNativeToken != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        swapRouter = _swapRouter;\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    function estimateSwapAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountOut\\n    ) public view returns (uint256) {\\n        uint256[] memory amounts;\\n        address[] memory path;\\n        path = _getPathFromTokenToToken(_fromToken, _toToken);\\n        amounts = IUniswapRouter(swapRouter).getAmountsIn(_amountOut, path);\\n        return amounts[0];\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _getPathFromTokenToToken(address fromToken, address toToken)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        if (fromToken == wrappedNativeToken || toToken == wrappedNativeToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = fromToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : fromToken;\\n            path[1] = toToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : toToken;\\n            return path;\\n        } else {\\n            address[] memory path = new address[](3);\\n            path[0] = fromToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = toToken;\\n            return path;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xb09fb161ac5cee6328c62cc233433f0997e85611008d746d14cb5175964cd8df\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulLinker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulLinker {\\n    struct Link {\\n        address sourceContract;\\n        uint256 sourceId;\\n        address targetContract;\\n        uint256 targetId;\\n    }\\n\\n    function hasLinks(address token, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2e46745b3dd2f29aba33d0dcac60b88a3a50a54ae9f7a83b5e4fcd1de113f0e0\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulNameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulNameResolver {\\n    function nameExists(string memory name) external returns (bool exists);\\n\\n    function getIdentityData(string memory name)\\n        external\\n        returns (string memory sbtName, uint256 identityId);\\n\\n    function getIdentityNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x8bb7d068a95dcf05fbc0c694549482d35651052a231105587f280388dcb0e1bd\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/dex/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\n/// @title Uniswap Router interface\\n/// @author Masa Finance\\n/// @notice Interface of the Uniswap Router contract\\n/// @dev This interface is used to interact with the Uniswap Router contract,\\n/// and gets the most important functions of the contract. It's based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xbafb111a529bb3f623d90cf0399b856938e8e7c5b1644b5c430098dd2598f167\",\"license\":\"Apache-2.0\"},\"contracts/tokens/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title NFT\\n/// @author Masa Finance\\n/// @notice Non-fungible token is a token that is not fungible.\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n/// that inherits from {ERC721Enumerable}, {Pausable}, {AccessControl} and {ERC721Burnable}.\\nabstract contract NFT is\\n    ERC721,\\n    ERC721Enumerable,\\n    Pausable,\\n    AccessControl,\\n    ERC721Burnable\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private _baseTokenURI;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new NFT\\n    /// @dev Creates a new Non-fungible token\\n    /// @param owner Owner of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(PAUSER_ROLE, owner);\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Pauses the operations in the smart contract\\n    /// @dev Sets an emergency stop mechanism that can be triggered by an authorized account.\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the operations in the smart contract\\n    /// @dev Unsets an emergency stop mechanism. It can be triggered by an authorized account.\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function _mintWithCounter(address to)\\n        internal\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x794ae26bc149e8fd669fb710366c6f8cae6ec6ab81d43610d2321d0bff107e91\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./NFT.sol\\\";\\nimport \\\"../interfaces/ISoulLinker.sol\\\";\\nimport \\\"../SoulLinker.sol\\\";\\n\\n/// @title SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract SBT is NFT {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    SoulLinker public soulLinker;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param owner Owner of the smart contract\\n    /// @param _soulLinker Address of the SoulLinker contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address owner,\\n        SoulLinker _soulLinker,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) NFT(owner, name, symbol, baseTokenURI) {\\n        soulLinker = _soulLinker;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev This will raise an exception because the token is not transferable.\\n    /// @param from The current owner of the NFT\\n    /// @param to The new owner\\n    /// @param tokenId The NFT ID to transfer\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public pure override {\\n        // Transferring soulbound Tokens is not permitted!\\n        revert(\\\"SBT_TRANSFER_NOT_PERMITTED\\\");\\n    }\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This will raise an exception because the token is not transferable.\\n    /// @param from The current owner of the NFT\\n    /// @param to The new owner\\n    /// @param tokenId The NFT ID to transfer\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public pure override {\\n        // Transferring soulbound Tokens is not permitted!\\n        revert(\\\"SBT_TRANSFER_NOT_PERMITTED\\\");\\n    }\\n\\n    /// @notice Transfer ownership of the token to another address safely\\n    /// @dev This will raise an exception because the token is not transferable.\\n    /// @param from The current owner of the NFT\\n    /// @param to The new owner\\n    /// @param tokenId The NFT ID to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public pure override {\\n        // Transferring soulbound Tokens is not permitted!\\n        revert(\\\"SBT_TRANSFER_NOT_PERMITTED\\\");\\n    }\\n\\n    /// @notice Burns the token\\n    /// @dev The caller must own `tokenId` or be an approved operator\\n    /// @param tokenId The NFT ID to burn\\n    function burn(uint256 tokenId) public override {\\n        // A Soulbound Token can't be burned as long as it has active links!\\n        require(\\n            !soulLinker.hasLinks(address(this), tokenId),\\n            \\\"SBT_WITH_LINKS_NOT_BURNABLE\\\"\\n        );\\n        super.burn(tokenId);\\n    }\\n\\n    /// @notice Mints a new NFT\\n    /// @dev The caller must have the MINTER role\\n    /// @param to The address to mint the NFT to\\n    /// @return The NFT ID of the newly minted NFT\\n    function mint(address to) public virtual returns (uint256) {\\n        return _mintWithCounter(to);\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x7832b061251a6473ad094451f97f022fc22c95710644953adffc40aa6f1ef58b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200256f3803806200256f8339810160408190526200003491620002c9565b81836001600160a01b038216620000815760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b6001600160a01b038116620000c85760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000078565b600080546001600160a01b039384166001600160a01b0319909116179055600180546001600160a81b03191691831691909117905581166200013c5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000078565b6001600160a01b038916620001835760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640162000078565b6200019060008b62000224565b620001bc7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8b62000224565b600380546001600160a01b039a8b166001600160a01b03199182161790915560049890985560059690965550506006929092556007805492861692851692909217909155600880549185169184169190911790556009805491909316911617905550620003ad565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff16620002c55760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002843390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000806000806000806000806000806101408b8d031215620002ea57600080fd5b8a51620002f78162000394565b60208c0151909a506200030a8162000394565b8099505060408b0151975060608b0151965060808b0151955060a08b0151620003338162000394565b60c08c0151909550620003468162000394565b60e08c0151909450620003598162000394565b6101008c01519093506200036d8162000394565b6101208c0151909250620003818162000394565b809150509295989b9194979a5092959850565b6001600160a01b0381168114620003aa57600080fd5b50565b6121b280620003bd6000396000f3fe60806040526004361061021a5760003560e01c806376a77ae111610123578063ae86ed89116100ab578063d72b11bd1161006f578063d72b11bd1461060a578063da058ae31461062a578063dafe84881461064a578063dda4fa8f1461065f578063e63ab1e91461067f57600080fd5b8063ae86ed8914610577578063bcbaae9314610597578063c31c9c07146105b7578063d247f920146105d7578063d547741f146105ea57600080fd5b80639013ae08116100f25780639013ae08146104ed57806391d148541461050d578063992642e51461052d578063a217fddf1461054d578063a87376b51461056257600080fd5b806376a77ae11461048d57806377bed5ed146104a35780638456cb59146104c35780638f448d02146104d857600080fd5b806332e40884116101a65780633f4ba83a116101755780633f4ba83a146103f9578063412736571461040e5780634dccb7191461042e5780635c975abb1461044e5780635f2a25181461046d57600080fd5b806332e408841461039057806336568abe146103a35780633ad3033e146103c35780633f301656146103e357600080fd5b80631cfd11c6116101ed5780631cfd11c6146102c357806323af4e17146102fe578063248a9ca314610320578063299a698d146103505780632f2ff15d1461037057600080fd5b806301ffc9a71461021f57806304c5bee01461025457806317fcb39b146102785780631bbd23f8146102b0575b600080fd5b34801561022b57600080fd5b5061023f61023a366004611e3a565b6106b3565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061026a60065481565b60405190815260200161024b565b34801561028457600080fd5b50600154610298906001600160a01b031681565b6040516001600160a01b03909116815260200161024b565b61026a6102be366004611c7a565b6106ea565b3480156102cf57600080fd5b506102e36102de366004611df1565b610711565b6040805193845260208401929092529082015260600161024b565b34801561030a57600080fd5b5061031e610319366004611c1c565b61075d565b005b34801561032c57600080fd5b5061026a61033b366004611df1565b60009081526002602052604090206001015490565b34801561035c57600080fd5b5061031e61036b366004611df1565b6107e8565b34801561037c57600080fd5b5061031e61038b366004611e0a565b61081b565b61026a61039e366004611c1c565b610845565b3480156103af57600080fd5b5061031e6103be366004611e0a565b610864565b3480156103cf57600080fd5b5061031e6103de366004611c1c565b6108e2565b3480156103ef57600080fd5b5061026a60045481565b34801561040557600080fd5b5061031e610964565b34801561041a57600080fd5b5061031e610429366004611c1c565b610999565b34801561043a57600080fd5b5061031e610449366004611df1565b610a1b565b34801561045a57600080fd5b50600154600160a01b900460ff1661023f565b34801561047957600080fd5b5061026a610488366004611c39565b610a4e565b34801561049957600080fd5b5061026a60055481565b3480156104af57600080fd5b50600354610298906001600160a01b031681565b3480156104cf57600080fd5b5061031e610b0c565b3480156104e457600080fd5b506102e3610b3e565b3480156104f957600080fd5b5061031e610508366004611c1c565b610b5a565b34801561051957600080fd5b5061023f610528366004611e0a565b610bdc565b34801561053957600080fd5b50600754610298906001600160a01b031681565b34801561055957600080fd5b5061026a600081565b34801561056e57600080fd5b506102e3610c07565b34801561058357600080fd5b50600854610298906001600160a01b031681565b3480156105a357600080fd5b5061031e6105b2366004611df1565b610c17565b3480156105c357600080fd5b50600054610298906001600160a01b031681565b61026a6105e5366004611c7a565b610c4a565b3480156105f657600080fd5b5061031e610605366004611e0a565b610c6a565b34801561061657600080fd5b50600954610298906001600160a01b031681565b34801561063657600080fd5b5061031e610645366004611c1c565b610c8f565b34801561065657600080fd5b506102e3610d11565b34801561066b57600080fd5b5061031e61067a366004611c1c565b610d21565b34801561068b57600080fd5b5061026a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216637965db0b60e01b14806106e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106f4610da3565b61070083600454610df2565b61070a3383611037565b9392505050565b60015460075482916000918291610735916001600160a01b03918216911685610a4e565b600854600754919350610755916001600160a01b03918216911686610a4e565b929491935050565b600061076881611123565b6001600160a01b0382166107975760405162461bcd60e51b815260040161078e90611fe6565b60405180910390fd5b6007546001600160a01b03838116911614156107c55760405162461bcd60e51b815260040161078e90611fc2565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006107f381611123565b8160055414156108155760405162461bcd60e51b815260040161078e90611fc2565b50600555565b60008281526002602052604090206001015461083681611123565b610840838361112d565b505050565b600061084f610da3565b61085b82600554610df2565b6106e4336111b3565b6001600160a01b03811633146108d45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161078e565b6108de828261128c565b5050565b60006108ed81611123565b6001600160a01b0382166109135760405162461bcd60e51b815260040161078e90611fe6565b6003546001600160a01b03838116911614156109415760405162461bcd60e51b815260040161078e90611fc2565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61098e81611123565b6109966112f3565b50565b60006109a481611123565b6001600160a01b0382166109ca5760405162461bcd60e51b815260040161078e90611fe6565b6000546001600160a01b03838116911614156109f85760405162461bcd60e51b815260040161078e90611fc2565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a2681611123565b816006541415610a485760405162461bcd60e51b815260040161078e90611fc2565b50600655565b6000606080610a5d8686611348565b6000546040516307c0329d60e21b81529192506001600160a01b031690631f00ca7490610a90908790859060040161200c565b60006040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae49190810190611d22565b915081600081518110610af957610af961213b565b6020026020010151925050509392505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b3681611123565b6109966114d9565b6000806000610b4e600454610711565b91959094509092509050565b6000610b6581611123565b6001600160a01b038216610b8b5760405162461bcd60e51b815260040161078e90611fe6565b6008546001600160a01b0383811691161415610bb95760405162461bcd60e51b815260040161078e90611fc2565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806000610b4e600554610711565b6000610c2281611123565b816004541415610c445760405162461bcd60e51b815260040161078e90611fc2565b50600455565b6000610c54610da3565b610c6083600654610df2565b61070a338361151c565b600082815260026020526040902060010154610c8581611123565b610840838361128c565b6000610c9a81611123565b6001600160a01b038216610cc05760405162461bcd60e51b815260040161078e90611fe6565b6001546001600160a01b0383811691161415610cee5760405162461bcd60e51b815260040161078e90611fc2565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000610b4e600654610711565b6000610d2c81611123565b6001600160a01b038216610d525760405162461bcd60e51b815260040161078e90611fe6565b6009546001600160a01b0383811691161415610d805760405162461bcd60e51b815260040161078e90611fc2565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600154600160a01b900460ff1615610df05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161078e565b565b6007546001600160a01b0383811691161415610e24576009546108de906001600160a01b038481169133911684611713565b6001600160a01b038216610fa657600154600754600091610e52916001600160a01b03918216911684610a4e565b905080341015610e9d5760405162461bcd60e51b81526020600482015260166024820152751253959053125117d410565351539517d05353d5539560521b604482015260640161078e565b6009546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610eea576040519150601f19603f3d011682016040523d82523d6000602084013e610eef565b606091505b5050905080610f325760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161078e565b81341115610fa0576000610f46348461176d565b60405190915033908290600081818185875af1925050503d8060008114610f89576040519150601f19603f3d011682016040523d82523d6000602084013e610f8e565b606091505b50508092505081610f9e57600080fd5b505b50505050565b6008546001600160a01b0383811691161415610ff657600754600090610fd79084906001600160a01b031684610a4e565b600954909150610840906001600160a01b038581169133911684611713565b60405162461bcd60e51b81526020600482015260166024820152751253959053125117d410565351539517d351551213d160521b604482015260640161078e565b600354604051636132c61360e11b815260009182916001600160a01b039091169063c2658c269061106e9087908790600401611f57565b602060405180830381600087803b15801561108857600080fd5b505af115801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c09190611e81565b9050826040516110d09190611ec6565b604080519182900382206005548484526020840152916001600160a01b038716917f60579b770d8bde9b5f57c468ffb4acb023252b190304137b45b86b72f66a1940910160405180910390a39392505050565b6109968133611779565b6111378282610bdc565b6108de5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561116f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6003546040516335313c2160e11b81526001600160a01b0383811660048301526000928392911690636a62784290602401602060405180830381600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190611e81565b9050826001600160a01b03167fe95dd4d9dab9ae5340f0d2038bccf2058c8a61640d34ccdd62be6a9e54cd69b88260055460405161127e929190918252602082015260400190565b60405180910390a292915050565b6112968282610bdc565b156108de5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6112fb6117dd565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001546060906001600160a01b038481169116148061137457506001546001600160a01b038381169116145b1561143e57604080516002808252606082018352600092602083019080368337019050506001549091506001600160a01b038581169116146113b657836113c3565b6001546001600160a01b03165b816000815181106113d6576113d661213b565b6001600160a01b0392831660209182029290920101526001548482169116146113ff578261140c565b6001546001600160a01b03165b8160018151811061141f5761141f61213b565b6001600160a01b039092166020928302919091019091015290506106e4565b604080516003808252608082019092526000916020820160608036833701905050905083816000815181106114755761147561213b565b6001600160a01b03928316602091820292909201015260018054835192169183919081106114a5576114a561213b565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061141f5761141f61213b565b6114e1610da3565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861132b3390565b600080600360009054906101000a90046001600160a01b03166001600160a01b0316630f2e68af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190611e64565b60035460405163294cdf0d60e01b81526001600160a01b0387811660048301529293506000929091169063294cdf0d9060240160206040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190611e81565b90506000826001600160a01b031663ba7aef438787856040518463ffffffff1660e01b815260040161165c93929190611f7b565b602060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190611e81565b9050846040516116be9190611ec6565b604080519182900382206006548484526020840152916001600160a01b038916917f32044e50415e96c0068a718b8df9993f4803b2e54518d56c52ef6438a91619aa910160405180910390a395945050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610fa090859061182d565b600061070a82846120cb565b6117838282610bdc565b6108de5761179b816001600160a01b031660146118ff565b6117a68360206118ff565b6040516020016117b7929190611ee2565b60408051601f198184030181529082905262461bcd60e51b825261078e91600401611faf565b600154600160a01b900460ff16610df05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161078e565b6000611882826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a9b9092919063ffffffff16565b80519091501561084057808060200190518101906118a09190611dcf565b6108405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161078e565b6060600061190e8360026120ac565b611919906002612094565b67ffffffffffffffff81111561193157611931612151565b6040519080825280601f01601f19166020018201604052801561195b576020820181803683370190505b509050600360fc1b816000815181106119765761197661213b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119a5576119a561213b565b60200101906001600160f81b031916908160001a90535060006119c98460026120ac565b6119d4906001612094565b90505b6001811115611a4c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a0857611a0861213b565b1a60f81b828281518110611a1e57611a1e61213b565b60200101906001600160f81b031916908160001a90535060049490941c93611a458161210e565b90506119d7565b50831561070a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161078e565b6060611aaa8484600085611ab2565b949350505050565b606082471015611b135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161078e565b6001600160a01b0385163b611b6a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161078e565b600080866001600160a01b03168587604051611b869190611ec6565b60006040518083038185875af1925050503d8060008114611bc3576040519150601f19603f3d011682016040523d82523d6000602084013e611bc8565b606091505b5091509150611bd8828286611be3565b979650505050505050565b60608315611bf257508161070a565b825115611c025782518084602001fd5b8160405162461bcd60e51b815260040161078e9190611faf565b600060208284031215611c2e57600080fd5b813561070a81612167565b600080600060608486031215611c4e57600080fd5b8335611c5981612167565b92506020840135611c6981612167565b929592945050506040919091013590565b60008060408385031215611c8d57600080fd5b8235611c9881612167565b915060208381013567ffffffffffffffff80821115611cb657600080fd5b818601915086601f830112611cca57600080fd5b813581811115611cdc57611cdc612151565b611cee601f8201601f19168501612063565b91508082528784828501011115611d0457600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020808385031215611d3557600080fd5b825167ffffffffffffffff80821115611d4d57600080fd5b818501915085601f830112611d6157600080fd5b815181811115611d7357611d73612151565b8060051b9150611d84848301612063565b8181528481019084860184860187018a1015611d9f57600080fd5b600095505b83861015611dc2578051835260019590950194918601918601611da4565b5098975050505050505050565b600060208284031215611de157600080fd5b8151801515811461070a57600080fd5b600060208284031215611e0357600080fd5b5035919050565b60008060408385031215611e1d57600080fd5b823591506020830135611e2f81612167565b809150509250929050565b600060208284031215611e4c57600080fd5b81356001600160e01b03198116811461070a57600080fd5b600060208284031215611e7657600080fd5b815161070a81612167565b600060208284031215611e9357600080fd5b5051919050565b60008151808452611eb28160208601602086016120e2565b601f01601f19169290920160200192915050565b60008251611ed88184602087016120e2565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f1a8160178501602088016120e2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f4b8160288401602088016120e2565b01602801949350505050565b6001600160a01b0383168152604060208201819052600090611aaa90830184611e9a565b6001600160a01b0384168152606060208201819052600090611f9f90830185611e9a565b9050826040830152949350505050565b60208152600061070a6020830184611e9a565b6020808252600a908201526953414d455f56414c554560b01b604082015260600190565b6020808252600c908201526b5a45524f5f4144445245535360a01b604082015260600190565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156120565784516001600160a01b031683529383019391830191600101612031565b5090979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561208c5761208c612151565b604052919050565b600082198211156120a7576120a7612125565b500190565b60008160001904831182151516156120c6576120c6612125565b500290565b6000828210156120dd576120dd612125565b500390565b60005b838110156120fd5781810151838201526020016120e5565b83811115610fa05750506000910152565b60008161211d5761211d612125565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461099657600080fdfea2646970667358221220faa98336a82e0f0136c5d729794486818f854f96284002d00b0930240587d08d64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c806376a77ae111610123578063ae86ed89116100ab578063d72b11bd1161006f578063d72b11bd1461060a578063da058ae31461062a578063dafe84881461064a578063dda4fa8f1461065f578063e63ab1e91461067f57600080fd5b8063ae86ed8914610577578063bcbaae9314610597578063c31c9c07146105b7578063d247f920146105d7578063d547741f146105ea57600080fd5b80639013ae08116100f25780639013ae08146104ed57806391d148541461050d578063992642e51461052d578063a217fddf1461054d578063a87376b51461056257600080fd5b806376a77ae11461048d57806377bed5ed146104a35780638456cb59146104c35780638f448d02146104d857600080fd5b806332e40884116101a65780633f4ba83a116101755780633f4ba83a146103f9578063412736571461040e5780634dccb7191461042e5780635c975abb1461044e5780635f2a25181461046d57600080fd5b806332e408841461039057806336568abe146103a35780633ad3033e146103c35780633f301656146103e357600080fd5b80631cfd11c6116101ed5780631cfd11c6146102c357806323af4e17146102fe578063248a9ca314610320578063299a698d146103505780632f2ff15d1461037057600080fd5b806301ffc9a71461021f57806304c5bee01461025457806317fcb39b146102785780631bbd23f8146102b0575b600080fd5b34801561022b57600080fd5b5061023f61023a366004611e3a565b6106b3565b60405190151581526020015b60405180910390f35b34801561026057600080fd5b5061026a60065481565b60405190815260200161024b565b34801561028457600080fd5b50600154610298906001600160a01b031681565b6040516001600160a01b03909116815260200161024b565b61026a6102be366004611c7a565b6106ea565b3480156102cf57600080fd5b506102e36102de366004611df1565b610711565b6040805193845260208401929092529082015260600161024b565b34801561030a57600080fd5b5061031e610319366004611c1c565b61075d565b005b34801561032c57600080fd5b5061026a61033b366004611df1565b60009081526002602052604090206001015490565b34801561035c57600080fd5b5061031e61036b366004611df1565b6107e8565b34801561037c57600080fd5b5061031e61038b366004611e0a565b61081b565b61026a61039e366004611c1c565b610845565b3480156103af57600080fd5b5061031e6103be366004611e0a565b610864565b3480156103cf57600080fd5b5061031e6103de366004611c1c565b6108e2565b3480156103ef57600080fd5b5061026a60045481565b34801561040557600080fd5b5061031e610964565b34801561041a57600080fd5b5061031e610429366004611c1c565b610999565b34801561043a57600080fd5b5061031e610449366004611df1565b610a1b565b34801561045a57600080fd5b50600154600160a01b900460ff1661023f565b34801561047957600080fd5b5061026a610488366004611c39565b610a4e565b34801561049957600080fd5b5061026a60055481565b3480156104af57600080fd5b50600354610298906001600160a01b031681565b3480156104cf57600080fd5b5061031e610b0c565b3480156104e457600080fd5b506102e3610b3e565b3480156104f957600080fd5b5061031e610508366004611c1c565b610b5a565b34801561051957600080fd5b5061023f610528366004611e0a565b610bdc565b34801561053957600080fd5b50600754610298906001600160a01b031681565b34801561055957600080fd5b5061026a600081565b34801561056e57600080fd5b506102e3610c07565b34801561058357600080fd5b50600854610298906001600160a01b031681565b3480156105a357600080fd5b5061031e6105b2366004611df1565b610c17565b3480156105c357600080fd5b50600054610298906001600160a01b031681565b61026a6105e5366004611c7a565b610c4a565b3480156105f657600080fd5b5061031e610605366004611e0a565b610c6a565b34801561061657600080fd5b50600954610298906001600160a01b031681565b34801561063657600080fd5b5061031e610645366004611c1c565b610c8f565b34801561065657600080fd5b506102e3610d11565b34801561066b57600080fd5b5061031e61067a366004611c1c565b610d21565b34801561068b57600080fd5b5061026a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216637965db0b60e01b14806106e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106f4610da3565b61070083600454610df2565b61070a3383611037565b9392505050565b60015460075482916000918291610735916001600160a01b03918216911685610a4e565b600854600754919350610755916001600160a01b03918216911686610a4e565b929491935050565b600061076881611123565b6001600160a01b0382166107975760405162461bcd60e51b815260040161078e90611fe6565b60405180910390fd5b6007546001600160a01b03838116911614156107c55760405162461bcd60e51b815260040161078e90611fc2565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006107f381611123565b8160055414156108155760405162461bcd60e51b815260040161078e90611fc2565b50600555565b60008281526002602052604090206001015461083681611123565b610840838361112d565b505050565b600061084f610da3565b61085b82600554610df2565b6106e4336111b3565b6001600160a01b03811633146108d45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161078e565b6108de828261128c565b5050565b60006108ed81611123565b6001600160a01b0382166109135760405162461bcd60e51b815260040161078e90611fe6565b6003546001600160a01b03838116911614156109415760405162461bcd60e51b815260040161078e90611fc2565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61098e81611123565b6109966112f3565b50565b60006109a481611123565b6001600160a01b0382166109ca5760405162461bcd60e51b815260040161078e90611fe6565b6000546001600160a01b03838116911614156109f85760405162461bcd60e51b815260040161078e90611fc2565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610a2681611123565b816006541415610a485760405162461bcd60e51b815260040161078e90611fc2565b50600655565b6000606080610a5d8686611348565b6000546040516307c0329d60e21b81529192506001600160a01b031690631f00ca7490610a90908790859060040161200c565b60006040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae49190810190611d22565b915081600081518110610af957610af961213b565b6020026020010151925050509392505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b3681611123565b6109966114d9565b6000806000610b4e600454610711565b91959094509092509050565b6000610b6581611123565b6001600160a01b038216610b8b5760405162461bcd60e51b815260040161078e90611fe6565b6008546001600160a01b0383811691161415610bb95760405162461bcd60e51b815260040161078e90611fc2565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806000610b4e600554610711565b6000610c2281611123565b816004541415610c445760405162461bcd60e51b815260040161078e90611fc2565b50600455565b6000610c54610da3565b610c6083600654610df2565b61070a338361151c565b600082815260026020526040902060010154610c8581611123565b610840838361128c565b6000610c9a81611123565b6001600160a01b038216610cc05760405162461bcd60e51b815260040161078e90611fe6565b6001546001600160a01b0383811691161415610cee5760405162461bcd60e51b815260040161078e90611fc2565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000610b4e600654610711565b6000610d2c81611123565b6001600160a01b038216610d525760405162461bcd60e51b815260040161078e90611fe6565b6009546001600160a01b0383811691161415610d805760405162461bcd60e51b815260040161078e90611fc2565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600154600160a01b900460ff1615610df05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161078e565b565b6007546001600160a01b0383811691161415610e24576009546108de906001600160a01b038481169133911684611713565b6001600160a01b038216610fa657600154600754600091610e52916001600160a01b03918216911684610a4e565b905080341015610e9d5760405162461bcd60e51b81526020600482015260166024820152751253959053125117d410565351539517d05353d5539560521b604482015260640161078e565b6009546040516000916001600160a01b03169083908381818185875af1925050503d8060008114610eea576040519150601f19603f3d011682016040523d82523d6000602084013e610eef565b606091505b5050905080610f325760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161078e565b81341115610fa0576000610f46348461176d565b60405190915033908290600081818185875af1925050503d8060008114610f89576040519150601f19603f3d011682016040523d82523d6000602084013e610f8e565b606091505b50508092505081610f9e57600080fd5b505b50505050565b6008546001600160a01b0383811691161415610ff657600754600090610fd79084906001600160a01b031684610a4e565b600954909150610840906001600160a01b038581169133911684611713565b60405162461bcd60e51b81526020600482015260166024820152751253959053125117d410565351539517d351551213d160521b604482015260640161078e565b600354604051636132c61360e11b815260009182916001600160a01b039091169063c2658c269061106e9087908790600401611f57565b602060405180830381600087803b15801561108857600080fd5b505af115801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c09190611e81565b9050826040516110d09190611ec6565b604080519182900382206005548484526020840152916001600160a01b038716917f60579b770d8bde9b5f57c468ffb4acb023252b190304137b45b86b72f66a1940910160405180910390a39392505050565b6109968133611779565b6111378282610bdc565b6108de5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561116f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6003546040516335313c2160e11b81526001600160a01b0383811660048301526000928392911690636a62784290602401602060405180830381600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190611e81565b9050826001600160a01b03167fe95dd4d9dab9ae5340f0d2038bccf2058c8a61640d34ccdd62be6a9e54cd69b88260055460405161127e929190918252602082015260400190565b60405180910390a292915050565b6112968282610bdc565b156108de5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6112fb6117dd565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001546060906001600160a01b038481169116148061137457506001546001600160a01b038381169116145b1561143e57604080516002808252606082018352600092602083019080368337019050506001549091506001600160a01b038581169116146113b657836113c3565b6001546001600160a01b03165b816000815181106113d6576113d661213b565b6001600160a01b0392831660209182029290920101526001548482169116146113ff578261140c565b6001546001600160a01b03165b8160018151811061141f5761141f61213b565b6001600160a01b039092166020928302919091019091015290506106e4565b604080516003808252608082019092526000916020820160608036833701905050905083816000815181106114755761147561213b565b6001600160a01b03928316602091820292909201015260018054835192169183919081106114a5576114a561213b565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061141f5761141f61213b565b6114e1610da3565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861132b3390565b600080600360009054906101000a90046001600160a01b03166001600160a01b0316630f2e68af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190611e64565b60035460405163294cdf0d60e01b81526001600160a01b0387811660048301529293506000929091169063294cdf0d9060240160206040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190611e81565b90506000826001600160a01b031663ba7aef438787856040518463ffffffff1660e01b815260040161165c93929190611f7b565b602060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190611e81565b9050846040516116be9190611ec6565b604080519182900382206006548484526020840152916001600160a01b038916917f32044e50415e96c0068a718b8df9993f4803b2e54518d56c52ef6438a91619aa910160405180910390a395945050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610fa090859061182d565b600061070a82846120cb565b6117838282610bdc565b6108de5761179b816001600160a01b031660146118ff565b6117a68360206118ff565b6040516020016117b7929190611ee2565b60408051601f198184030181529082905262461bcd60e51b825261078e91600401611faf565b600154600160a01b900460ff16610df05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161078e565b6000611882826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a9b9092919063ffffffff16565b80519091501561084057808060200190518101906118a09190611dcf565b6108405760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161078e565b6060600061190e8360026120ac565b611919906002612094565b67ffffffffffffffff81111561193157611931612151565b6040519080825280601f01601f19166020018201604052801561195b576020820181803683370190505b509050600360fc1b816000815181106119765761197661213b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119a5576119a561213b565b60200101906001600160f81b031916908160001a90535060006119c98460026120ac565b6119d4906001612094565b90505b6001811115611a4c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a0857611a0861213b565b1a60f81b828281518110611a1e57611a1e61213b565b60200101906001600160f81b031916908160001a90535060049490941c93611a458161210e565b90506119d7565b50831561070a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161078e565b6060611aaa8484600085611ab2565b949350505050565b606082471015611b135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161078e565b6001600160a01b0385163b611b6a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161078e565b600080866001600160a01b03168587604051611b869190611ec6565b60006040518083038185875af1925050503d8060008114611bc3576040519150601f19603f3d011682016040523d82523d6000602084013e611bc8565b606091505b5091509150611bd8828286611be3565b979650505050505050565b60608315611bf257508161070a565b825115611c025782518084602001fd5b8160405162461bcd60e51b815260040161078e9190611faf565b600060208284031215611c2e57600080fd5b813561070a81612167565b600080600060608486031215611c4e57600080fd5b8335611c5981612167565b92506020840135611c6981612167565b929592945050506040919091013590565b60008060408385031215611c8d57600080fd5b8235611c9881612167565b915060208381013567ffffffffffffffff80821115611cb657600080fd5b818601915086601f830112611cca57600080fd5b813581811115611cdc57611cdc612151565b611cee601f8201601f19168501612063565b91508082528784828501011115611d0457600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020808385031215611d3557600080fd5b825167ffffffffffffffff80821115611d4d57600080fd5b818501915085601f830112611d6157600080fd5b815181811115611d7357611d73612151565b8060051b9150611d84848301612063565b8181528481019084860184860187018a1015611d9f57600080fd5b600095505b83861015611dc2578051835260019590950194918601918601611da4565b5098975050505050505050565b600060208284031215611de157600080fd5b8151801515811461070a57600080fd5b600060208284031215611e0357600080fd5b5035919050565b60008060408385031215611e1d57600080fd5b823591506020830135611e2f81612167565b809150509250929050565b600060208284031215611e4c57600080fd5b81356001600160e01b03198116811461070a57600080fd5b600060208284031215611e7657600080fd5b815161070a81612167565b600060208284031215611e9357600080fd5b5051919050565b60008151808452611eb28160208601602086016120e2565b601f01601f19169290920160200192915050565b60008251611ed88184602087016120e2565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f1a8160178501602088016120e2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f4b8160288401602088016120e2565b01602801949350505050565b6001600160a01b0383168152604060208201819052600090611aaa90830184611e9a565b6001600160a01b0384168152606060208201819052600090611f9f90830185611e9a565b9050826040830152949350505050565b60208152600061070a6020830184611e9a565b6020808252600a908201526953414d455f56414c554560b01b604082015260600190565b6020808252600c908201526b5a45524f5f4144445245535360a01b604082015260600190565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156120565784516001600160a01b031683529383019391830191600101612031565b5090979650505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561208c5761208c612151565b604052919050565b600082198211156120a7576120a7612125565b500190565b60008160001904831182151516156120c6576120c6612125565b500290565b6000828210156120dd576120dd612125565b500390565b60005b838110156120fd5781810151838201526020016120e5565b83811115610fa05750506000910152565b60008161211d5761211d612125565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461099657600080fdfea2646970667358221220faa98336a82e0f0136c5d729794486818f854f96284002d00b0930240587d08d64736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "From this smart contract we can mint new Soulbound Identities and Soul Name NFTs. This minting can be done paying a fee in ETH, USDC or CORN",
    "kind": "dev",
    "methods": {
      "_getSwapAmounts(uint256)": {
        "details": "Returns all current pricing and amount informations for a purchase",
        "returns": {
          "priceInETH": "Current pric in native token (ETH)",
          "priceInStableCoin": "Current price in stable coin",
          "priceInUtilityToken": "Current price in utility token ($CORN)"
        }
      },
      "constructor": {
        "details": "Creates a new Soul Factory, that has the role to minting new Soulbound Identities and Soul Name NFTs, paying a fee",
        "params": {
          "_mintingIdentityAndNamePrice": "Price of the identity and name minting in stable coin",
          "_mintingIdentityPrice": "Price of the identity minting in stable coin",
          "_mintingNamePrice": "Price of the name minting in stable coin",
          "_reserveWallet": "Wallet that will receive the fee",
          "_soulBoundIdentity": "Address of the Soulbound identity contract",
          "_stableCoin": "Stable coin to pay the fee in (USDC)",
          "_swapRouter": "Swap router address",
          "_utilityToken": "Utility token to pay the fee in ($CORN)",
          "_wrappedNativeToken": "Wrapped native token address",
          "owner": "Owner of the smart contract"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "Sets an emergency stop mechanism that can be triggered by an authorized account."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseIdentity(address)": {
        "details": "This function allows the purchase of a soulbound identity using stable coin (USDC), native token (ETH) or utility token ($CORN)",
        "params": {
          "paymentMethod": "Address of token that user want to pay"
        },
        "returns": {
          "_0": "TokenId of the new soulbound identity"
        }
      },
      "purchaseIdentityAndName(address,string)": {
        "details": "This function allows the purchase of a soulbound identity and name using stable coin (USDC), native token (ETH) or utility token ($CORN)",
        "params": {
          "name": "Name of the new soul name",
          "paymentMethod": "Address of token that user want to pay"
        },
        "returns": {
          "_0": "TokenId of the new soulbound identity"
        }
      },
      "purchaseIdentityAndNameInfo()": {
        "details": "Returns all current pricing and amount informations for a purchase",
        "returns": {
          "priceInETH": "Current price of the identity and name minting in native token (ETH)",
          "priceInStableCoin": "Current price of the identity and name minting in stable coin",
          "priceInUtilityToken": "Current price of the identity and nameminting in utility token ($CORN)"
        }
      },
      "purchaseIdentityInfo()": {
        "details": "Returns all current pricing and amount informations for a purchase",
        "returns": {
          "priceInETH": "Current price of the identity minting in native token (ETH)",
          "priceInStableCoin": "Current price of the identity minting in stable coin",
          "priceInUtilityToken": "Current price of the identity minting in utility token ($CORN)"
        }
      },
      "purchaseName(address,string)": {
        "details": "This function allows the purchase of a soul name using stable coin (USDC), native token (ETH) or utility token ($CORN)",
        "params": {
          "name": "Name of the new soul name",
          "paymentMethod": "Address of token that user want to pay"
        },
        "returns": {
          "_0": "TokenId of the new sou name"
        }
      },
      "purchaseNameInfo()": {
        "details": "Returns all current pricing and amount informations for a purchase",
        "returns": {
          "priceInETH": "Current price of the name minting in native token (ETH)",
          "priceInStableCoin": "Current price of the name minting in stable coin",
          "priceInUtilityToken": "Current price of the name minting in utility token ($CORN)"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setMintingIdentityAndNamePrice(uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_mintingIdentityAndNamePrice": "New price of the identity and name minting in stable coin"
        }
      },
      "setMintingIdentityPrice(uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_mintingIdentityPrice": "New price of the identity minting in stable coin"
        }
      },
      "setMintingNamePrice(uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_mintingNamePrice": "New price of the name minting in stable coin"
        }
      },
      "setReserveWallet(address)": {
        "details": "Let change the reserve walled. It can be triggered by an authorized account.",
        "params": {
          "_reserveWallet": "New reserve wallet"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_soulboundIdentity": "New SoulboundIdentity contract address"
        }
      },
      "setStableCoin(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_stableCoin": "New stable coin to pay the fee in"
        }
      },
      "setSwapRouter(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_swapRouter": "New swap router address"
        }
      },
      "setUtilityToken(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_utilityToken": "New utility token to pay the fee in"
        }
      },
      "setWrappedNativeToken(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_wrappedNativeToken": "New wrapped native token address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unsets an emergency stop mechanism. It can be triggered by an authorized account."
      }
    },
    "title": "Soul Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_getSwapAmounts(uint256)": {
        "notice": "Returns the price of minting"
      },
      "constructor": {
        "notice": "Creates a new Soul Factory"
      },
      "pause()": {
        "notice": "Pauses the operations in the smart contract"
      },
      "purchaseIdentity(address)": {
        "notice": "Mints a new Soulbound Identity purchasing it"
      },
      "purchaseIdentityAndName(address,string)": {
        "notice": "Mints a new Soulbound Identity and Name purchasing it"
      },
      "purchaseIdentityAndNameInfo()": {
        "notice": "Returns the price of the identity and name minting"
      },
      "purchaseIdentityInfo()": {
        "notice": "Returns the price of the identity minting"
      },
      "purchaseName(address,string)": {
        "notice": "Mints a new Soul Name purchasing it"
      },
      "purchaseNameInfo()": {
        "notice": "Returns the price of the name minting"
      },
      "setMintingIdentityAndNamePrice(uint256)": {
        "notice": "Sets the price of the identity and name minting in stable coin"
      },
      "setMintingIdentityPrice(uint256)": {
        "notice": "Sets the price of the identity minting in stable coin"
      },
      "setMintingNamePrice(uint256)": {
        "notice": "Sets the price of the name minting in stable coin"
      },
      "setReserveWallet(address)": {
        "notice": "Set the reserve wallet"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this factory"
      },
      "setStableCoin(address)": {
        "notice": "Sets the stable coin to pay the fee in (USDC)"
      },
      "setSwapRouter(address)": {
        "notice": "Sets the swap router address"
      },
      "setUtilityToken(address)": {
        "notice": "Sets the utility token to pay the fee in ($CORN)"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Sets the wrapped native token address"
      },
      "unpause()": {
        "notice": "Unpauses the operations in the smart contract"
      }
    },
    "notice": "Soul Factory, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5930,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "swapRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5932,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 523,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4090,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(SoulboundIdentity)5924"
      },
      {
        "astId": 4092,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "mintingIdentityAndNamePrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4094,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "mintingIdentityPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4096,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "mintingNamePrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4098,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "stableCoin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4100,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "utilityToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4102,
        "contract": "contracts/SoulFactory.sol:SoulFactory",
        "label": "reserveWallet",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(SoulboundIdentity)5924": {
        "encoding": "inplace",
        "label": "contract SoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulFactory.sol:SoulFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulFactory.sol:SoulFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}