{
  "address": "0xA0cDCD91536Ab81D3bE9734354263bC3d00e8C82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasLinks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x514c1554610275248d09ad88d9da67028b110ca9f9b739d0cb8a0bf40bcc8d15",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0xA0cDCD91536Ab81D3bE9734354263bC3d00e8C82",
    "transactionIndex": 1,
    "gasUsed": "262933",
    "logsBloom": "0x
    "blockHash": "0xe2eb35264a27f8aac969d15bfe9e078eca344240e0e062211410a4fa0ba9c159",
    "transactionHash": "0x514c1554610275248d09ad88d9da67028b110ca9f9b739d0cb8a0bf40bcc8d15",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7668383,
        "transactionHash": "0x514c1554610275248d09ad88d9da67028b110ca9f9b739d0cb8a0bf40bcc8d15",
        "address": "0xA0cDCD91536Ab81D3bE9734354263bC3d00e8C82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe2eb35264a27f8aac969d15bfe9e078eca344240e0e062211410a4fa0ba9c159"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7668383,
        "transactionHash": "0x514c1554610275248d09ad88d9da67028b110ca9f9b739d0cb8a0bf40bcc8d15",
        "address": "0xA0cDCD91536Ab81D3bE9734354263bC3d00e8C82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe2eb35264a27f8aac969d15bfe9e078eca344240e0e062211410a4fa0ba9c159"
      }
    ],
    "blockNumber": 7668383,
    "cumulativeGasUsed": "290339",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F"
  ],
  "numDeployments": 2,
  "solcInputHash": "008f157c48ab2ea5c55cd9eca024ed0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasLinks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"owner\":\"Owner of the smart contract\"}},\"hasLinks(address,uint256)\":{\"returns\":{\"_0\":\"`true` if the contract has links, `false` otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Soul linker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates a new soul linker\"},\"hasLinks(address,uint256)\":{\"notice\":\"Query if the contract has links for the given token id\"}},\"notice\":\"Soul linker smart contract that let add links to a Soulbound token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulLinker.sol\":\"SoulLinker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SoulLinker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/ISoulLinker.sol\\\";\\n\\n/// @title Soul linker\\n/// @author Masa Finance\\n/// @notice Soul linker smart contract that let add links to a Soulbound token.\\ncontract SoulLinker is Ownable, ISoulLinker {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    mapping(uint256 => Link) private links;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soul linker\\n    /// @param owner Owner of the smart contract\\n    constructor(address owner) Ownable() {\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Query if the contract has links for the given token id\\n    /// @return `true` if the contract has links, `false` otherwise\\n    function hasLinks(address, uint256) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x9ae5d94808ace8bb1fa9be6cf1d0ff5fa4816c9947fac8dfc632d76f5384081f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulLinker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulLinker {\\n    struct Link {\\n        address sourceContract;\\n        uint256 sourceId;\\n        address targetContract;\\n        uint256 targetId;\\n    }\\n\\n    function hasLinks(address token, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2e46745b3dd2f29aba33d0dcac60b88a3a50a54ae9f7a83b5e4fcd1de113f0e0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161053038038061053083398101604081905261002f91610121565b61003833610051565b61004b816100a160201b6100cf1760201c565b506101f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100a96100e4565b6001600160a01b0381166100d85760405162461bcd60e51b81526004016100cf9061014a565b60405180910390fd5b6100e181610051565b50565b6000546001600160a01b0316331461010e5760405162461bcd60e51b81526004016100cf90610194565b565b805161011b816101df565b92915050565b60006020828403121561013657610136600080fd5b60006101428484610110565b949350505050565b6020808252810161011b81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820161011b565b60006001600160a01b03821661011b565b6101e8816101ce565b81146100e157600080fd5b61032e806102026000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063fc9e382c1461008c575b600080fd5b6100596100ac565b005b6100636100c0565b604051610070919061022d565b60405180910390f35b6100596100873660046101b0565b6100cf565b61009f61009a3660046101d9565b610112565b604051610070919061023b565b6100b461011b565b6100be600061014a565b565b6000546001600160a01b031690565b6100d761011b565b6001600160a01b0381166101065760405162461bcd60e51b81526004016100fd90610249565b60405180910390fd5b61010f8161014a565b50565b60005b92915050565b336101246100c0565b6001600160a01b0316146100be5760405162461bcd60e51b81526004016100fd90610293565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035610115816102de565b8035610115816102f2565b6000602082840312156101c5576101c5600080fd5b60006101d1848461019a565b949350505050565b600080604083850312156101ef576101ef600080fd5b60006101fb858561019a565b925050602061020c858286016101a5565b9150509250929050565b61021f816102cd565b82525050565b80151561021f565b602081016101158284610216565b602081016101158284610225565b6020808252810161011581602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610115565b60006001600160a01b038216610115565b6102e7816102cd565b811461010f57600080fd5b806102e756fea26469706673582212202c3f690ecd79e89d6c777b88f4a5d53206867e5fa84445d8d5737c6af957dcbe64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063fc9e382c1461008c575b600080fd5b6100596100ac565b005b6100636100c0565b604051610070919061022d565b60405180910390f35b6100596100873660046101b0565b6100cf565b61009f61009a3660046101d9565b610112565b604051610070919061023b565b6100b461011b565b6100be600061014a565b565b6000546001600160a01b031690565b6100d761011b565b6001600160a01b0381166101065760405162461bcd60e51b81526004016100fd90610249565b60405180910390fd5b61010f8161014a565b50565b60005b92915050565b336101246100c0565b6001600160a01b0316146100be5760405162461bcd60e51b81526004016100fd90610293565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035610115816102de565b8035610115816102f2565b6000602082840312156101c5576101c5600080fd5b60006101d1848461019a565b949350505050565b600080604083850312156101ef576101ef600080fd5b60006101fb858561019a565b925050602061020c858286016101a5565b9150509250929050565b61021f816102cd565b82525050565b80151561021f565b602081016101158284610216565b602081016101158284610225565b6020808252810161011581602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610115565b60006001600160a01b038216610115565b6102e7816102cd565b811461010f57600080fd5b806102e756fea26469706673582212202c3f690ecd79e89d6c777b88f4a5d53206867e5fa84445d8d5737c6af957dcbe64736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "owner": "Owner of the smart contract"
        }
      },
      "hasLinks(address,uint256)": {
        "returns": {
          "_0": "`true` if the contract has links, `false` otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Soul linker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates a new soul linker"
      },
      "hasLinks(address,uint256)": {
        "notice": "Query if the contract has links for the given token id"
      }
    },
    "notice": "Soul linker smart contract that let add links to a Soulbound token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/SoulLinker.sol:SoulLinker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4025,
        "contract": "contracts/SoulLinker.sol:SoulLinker",
        "label": "links",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Link)6211_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Link)6211_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISoulLinker.Link)",
        "numberOfBytes": "32",
        "value": "t_struct(Link)6211_storage"
      },
      "t_struct(Link)6211_storage": {
        "encoding": "inplace",
        "label": "struct ISoulLinker.Link",
        "members": [
          {
            "astId": 6204,
            "contract": "contracts/SoulLinker.sol:SoulLinker",
            "label": "sourceContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6206,
            "contract": "contracts/SoulLinker.sol:SoulLinker",
            "label": "sourceId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6208,
            "contract": "contracts/SoulLinker.sol:SoulLinker",
            "label": "targetContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6210,
            "contract": "contracts/SoulLinker.sol:SoulLinker",
            "label": "targetId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}