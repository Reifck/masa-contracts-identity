{
  "address": "0x5f444715a9370a6EE6E85e2e98DBA012472E8F86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addLinkedSBT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIdentityId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSBTLinks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSBTLinks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "linkedSBT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "linkedSBTs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeLinkedSBT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "readerIdentityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ownerIdentityId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateLinkData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b3fa7364d772c679c891cf1c5d121025c0d28f7fee2fc4f00ceefd9a45f24b6",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0x5f444715a9370a6EE6E85e2e98DBA012472E8F86",
    "transactionIndex": 0,
    "gasUsed": "1508247",
    "logsBloom": "0x
    "blockHash": "0x5ab3cc95a10b4e5768bfc063868bbc9260f1954fe32b1897c7d9cdeb8f18928c",
    "transactionHash": "0x1b3fa7364d772c679c891cf1c5d121025c0d28f7fee2fc4f00ceefd9a45f24b6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7880047,
        "transactionHash": "0x1b3fa7364d772c679c891cf1c5d121025c0d28f7fee2fc4f00ceefd9a45f24b6",
        "address": "0x5f444715a9370a6EE6E85e2e98DBA012472E8F86",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5ab3cc95a10b4e5768bfc063868bbc9260f1954fe32b1897c7d9cdeb8f18928c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7880047,
        "transactionHash": "0x1b3fa7364d772c679c891cf1c5d121025c0d28f7fee2fc4f00ceefd9a45f24b6",
        "address": "0x5f444715a9370a6EE6E85e2e98DBA012472E8F86",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5ab3cc95a10b4e5768bfc063868bbc9260f1954fe32b1897c7d9cdeb8f18928c"
      }
    ],
    "blockNumber": 7880047,
    "cumulativeGasUsed": "1508247",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "0x83A5492f28CD7D2d5aA7A8b9c0Cf926f639Dd612"
  ],
  "numDeployments": 4,
  "solcInputHash": "9b4f276cb6a1fef5586ffa870889ee93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addLinkedSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIdentityId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSBTLinks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSBTLinks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"linkedSBT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"linkedSBTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeLinkedSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"readerIdentityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerIdentityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateLinkData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"kind\":\"dev\",\"methods\":{\"addLinkedSBT(address)\":{\"details\":\"The caller must be the owner to call this function\",\"params\":{\"token\":\"Address of the SBT contract\"}},\"constructor\":{\"params\":{\"owner\":\"Owner of the smart contract\"}},\"getIdentityId(address,uint256)\":{\"details\":\"The token must be linked to this soul linker\",\"params\":{\"token\":\"Address of the SBT contract\",\"tokenId\":\"Id of the token\"},\"returns\":{\"_0\":\"Id of the identity\"}},\"getSBTLinks(address,address)\":{\"details\":\"The token must be linked to this soul linker\",\"params\":{\"owner\":\"Address of the owner of the identity\",\"token\":\"Address of the SBT contract\"},\"returns\":{\"_0\":\"List of linked SBTs\"}},\"getSBTLinks(uint256,address)\":{\"details\":\"The token must be linked to this soul linker\",\"params\":{\"identityId\":\"Id of the identity\",\"token\":\"Address of the SBT contract\"},\"returns\":{\"_0\":\"List of linked SBTs\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLinkedSBT(address)\":{\"details\":\"The caller must be the owner to call this function\",\"params\":{\"token\":\"Address of the SBT contract\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must be the owner to call this function\",\"params\":{\"_soulboundIdentity\":\"Address of the SoulboundIdentity contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateLinkData(uint256,uint256,address,uint256,uint256,bytes)\":{\"details\":\"The token must be linked to this soul linker\",\"params\":{\"expirationDate\":\"Expiration date of the signature\",\"ownerIdentityId\":\"Id of the identity of the owner of the SBT\",\"readerIdentityId\":\"Id of the identity of the reader\",\"signature\":\"Signature of the read link request made by the owner\",\"token\":\"Address of the SBT contract\",\"tokenId\":\"Id of the token\"},\"returns\":{\"_0\":\"`true` if the signature is valid, `false` otherwise\"}}},\"title\":\"Soul linker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLinkedSBT(address)\":{\"notice\":\"Adds an SBT to the list of linked SBTs\"},\"constructor\":{\"notice\":\"Creates a new soul linker\"},\"getIdentityId(address,uint256)\":{\"notice\":\"Returns the identityId owned by the given token\"},\"getSBTLinks(address,address)\":{\"notice\":\"Returns the list of linked SBTs by a given SBT token\"},\"getSBTLinks(uint256,address)\":{\"notice\":\"Returns the list of linked SBTs by a given SBT token\"},\"removeLinkedSBT(address)\":{\"notice\":\"Removes an SBT from the list of linked SBTs\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this soul name\"},\"validateLinkData(uint256,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"Validates the signature of the given read link request\"}},\"notice\":\"Soul linker smart contract that let add links to a Soulbound token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulLinker.sol\":\"SoulLinker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SoulLinker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\n\\n/// @title Soul linker\\n/// @author Masa Finance\\n/// @notice Soul linker smart contract that let add links to a Soulbound token.\\ncontract SoulLinker is Ownable, EIP712 {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n\\n    // linked SBTs\\n    mapping(address => bool) public linkedSBT;\\n    address[] public linkedSBTs;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soul linker\\n    /// @param owner Owner of the smart contract\\n    constructor(address owner, ISoulboundIdentity _soulboundIdentity)\\n        EIP712(\\\"SoulLinker\\\", \\\"1.0.0\\\")\\n    {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        Ownable.transferOwnership(owner);\\n\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this soul name\\n    /// @dev The caller must be the owner to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(ISoulboundIdentity _soulboundIdentity)\\n        external\\n        onlyOwner\\n    {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulboundIdentity != _soulboundIdentity, \\\"SAME_VALUE\\\");\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Adds an SBT to the list of linked SBTs\\n    /// @dev The caller must be the owner to call this function\\n    /// @param token Address of the SBT contract\\n    function addLinkedSBT(address token) external onlyOwner {\\n        require(address(token) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(!linkedSBT[token], \\\"SBT_ALREADY_LINKED\\\");\\n\\n        linkedSBT[token] = true;\\n        linkedSBTs.push(token);\\n    }\\n\\n    /// @notice Removes an SBT from the list of linked SBTs\\n    /// @dev The caller must be the owner to call this function\\n    /// @param token Address of the SBT contract\\n    function removeLinkedSBT(address token) external onlyOwner {\\n        require(linkedSBT[token], \\\"SBT_NOT_LINKED\\\");\\n\\n        linkedSBT[token] = false;\\n        _removeLinkedSBT(token);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the identityId owned by the given token\\n    /// @dev The token must be linked to this soul linker\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @return Id of the identity\\n    function getIdentityId(address token, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        address owner = IERC721Enumerable(token).ownerOf(tokenId);\\n        return soulboundIdentity.tokenOfOwner(owner);\\n    }\\n\\n    /// @notice Returns the list of linked SBTs by a given SBT token\\n    /// @dev The token must be linked to this soul linker\\n    /// @param identityId Id of the identity\\n    /// @param token Address of the SBT contract\\n    /// @return List of linked SBTs\\n    function getSBTLinks(uint256 identityId, address token)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(linkedSBT[token], \\\"SBT_NOT_LINKED\\\");\\n        address owner = soulboundIdentity.ownerOf(identityId);\\n\\n        return getSBTLinks(owner, token);\\n    }\\n\\n    /// @notice Returns the list of linked SBTs by a given SBT token\\n    /// @dev The token must be linked to this soul linker\\n    /// @param owner Address of the owner of the identity\\n    /// @param token Address of the SBT contract\\n    /// @return List of linked SBTs\\n    function getSBTLinks(address owner, address token)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(linkedSBT[token], \\\"SBT_NOT_LINKED\\\");\\n\\n        uint256 links = IERC721Enumerable(token).balanceOf(owner);\\n        uint256[] memory sbtLinks = new uint256[](links);\\n        for (uint256 i = 0; i < links; i++) {\\n            sbtLinks[i] = IERC721Enumerable(token).tokenOfOwnerByIndex(\\n                owner,\\n                i\\n            );\\n        }\\n\\n        return sbtLinks;\\n    }\\n\\n    /// @notice Validates the signature of the given read link request\\n    /// @dev The token must be linked to this soul linker\\n    /// @param readerIdentityId Id of the identity of the reader\\n    /// @param ownerIdentityId Id of the identity of the owner of the SBT\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @param expirationDate Expiration date of the signature\\n    /// @param signature Signature of the read link request made by the owner\\n    /// @return `true` if the signature is valid, `false` otherwise\\n    function validateLinkData(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 expirationDate,\\n        bytes calldata signature\\n    ) external view returns (bool) {\\n        require(linkedSBT[token], \\\"SBT_NOT_LINKED\\\");\\n\\n        address identityReader = soulboundIdentity.ownerOf(readerIdentityId);\\n        address identityOwner = soulboundIdentity.ownerOf(ownerIdentityId);\\n        address tokenOwner = IERC721Enumerable(token).ownerOf(tokenId);\\n\\n        require(identityOwner == tokenOwner, \\\"IDENTITY_OWNER_NOT_TOKEN_OWNER\\\");\\n        require(identityReader == _msgSender(), \\\"CALLER_NOT_READER\\\");\\n        require(expirationDate >= block.timestamp, \\\"VALID_PERIOD_EXPIRED\\\");\\n        require(\\n            _verify(\\n                _hash(\\n                    readerIdentityId,\\n                    ownerIdentityId,\\n                    token,\\n                    tokenId,\\n                    expirationDate\\n                ),\\n                signature,\\n                identityOwner\\n            ),\\n            \\\"INVALID_SIGNATURE\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _removeLinkedSBT(address token) internal {\\n        for (uint256 i = 0; i < linkedSBTs.length; i++) {\\n            if (linkedSBTs[i] == token) {\\n                linkedSBTs[i] = linkedSBTs[linkedSBTs.length - 1];\\n                linkedSBTs.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _hash(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 expirationDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"Link(uint256 readerIdentityId,uint256 ownerIdentityId,address token,uint256 tokenId,uint256 expirationDate)\\\"\\n                        ),\\n                        readerIdentityId,\\n                        ownerIdentityId,\\n                        token,\\n                        tokenId,\\n                        expirationDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _verify(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address owner\\n    ) internal pure returns (bool) {\\n        return ECDSA.recover(digest, signature) == owner;\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xed2855363d9739ff813288162973af50d2d7e737b4020ef56b144960bb13108b\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(string memory name)\\n        external\\n        view\\n        returns (bool available);\\n\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0xb30e08139a4481c33d62f649191050bd08257617ec34fd4d1d9e0723fdeacde8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd901f30d43a5a4598c5164ed37b3b1690c0187232711744f35a1cb57733a35e0\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb73cd9241d2aa847f40371da241cd4d75c1ddca8197bbb7057a3d6906a648db1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001db438038062001db4833981016040819052620000359162000282565b6040518060400160405280600a81526020016929b7bab62634b735b2b960b11b815250604051806040016040528060058152602001640312e302e360dc1b815250620000906200008a6200016260201b60201c565b62000166565b815160208084019190912082519183019190912060e08290526101008190524660a0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000e1818484620001b6565b6080523060601b60c05261012052505050506001600160a01b038116620001255760405162461bcd60e51b81526004016200011c90620003d7565b60405180910390fd5b6200013b82620001f260201b62000a4a1760201c565b600180546001600160a01b0319166001600160a01b0392909216919091179055506200043c565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008383834630604051602001620001d395949392919062000336565b6040516020818303038152906040528051906020012090509392505050565b620001fc62000233565b6001600160a01b038116620002255760405162461bcd60e51b81526004016200011c906200038c565b620002308162000166565b50565b6000546001600160a01b03163314620002605760405162461bcd60e51b81526004016200011c90620003e9565b565b80516200026f816200041a565b92915050565b80516200026f8162000431565b600080604083850312156200029a576200029a600080fd5b6000620002a8858562000262565b9250506020620002bb8582860162000275565b9150509250929050565b620002d081620003fb565b82525050565b80620002d0565b600c81526000602082016b5a45524f5f4144445245535360a01b815291505b5060200190565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000620002fc565b60a08101620003468288620002d6565b620003556020830187620002d6565b620003646040830186620002d6565b620003736060830185620002d6565b620003826080830184620002c5565b9695505050505050565b602080825281016200026f81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b602080825281016200026f81620002dd565b602080825281016200026f8162000303565b60006001600160a01b0382166200026f565b60006200026f82620003fb565b6200042581620003fb565b81146200023057600080fd5b62000425816200040d565b60805160a05160c05160601c60e05161010051610120516119256200048f6000396000610d5c01526000610d9e01526000610d7d01526000610ce101526000610d0b01526000610d3501526119256000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806304b6b5dd146100b4578063237700c3146100dd578063342c27ad146100fd5780633450793f1461011d5780633ad3033e1461013257806342231b24146101455780636ccaaa7b14610168578063715018a61461017b57806377bed5ed1461018357806380776ac4146101a35780638da5cb5b146101c3578063d1d105de146101cb578063f2fde38b146101de575b600080fd5b6100c76100c23660046111cb565b6101f1565b6040516100d4919061161a565b60405180910390f35b6100f06100eb3660046111ed565b6102cc565b6040516100d4919061162b565b61011061010b366004611189565b610583565b6040516100d491906115f1565b61013061012b3660046110b6565b6105ad565b005b610130610140366004611168565b610619565b6100f06101533660046110b6565b60026020526000908152604090205460ff1681565b6101306101763660046110b6565b610697565b610130610764565b600154610196906001600160a01b031681565b6040516100d49190611709565b6101b66101b1366004611135565b610778565b6040516100d491906117f7565b610110610878565b6100c76101d93660046110f8565b610887565b6101306101ec3660046110b6565b610a4a565b6001600160a01b03811660009081526002602052604090205460609060ff166102355760405162461bcd60e51b815260040161022c906117d7565b60405180910390fd5b6001546040516331a9108f60e11b81526000916001600160a01b031690636352211e906102669087906004016117f7565b60206040518083038186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b691906110d7565b90506102c28184610887565b9150505b92915050565b6001600160a01b03851660009081526002602052604081205460ff166103045760405162461bcd60e51b815260040161022c906117d7565b6001546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610335908c906004016117f7565b60206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038591906110d7565b6001546040516331a9108f60e11b81529192506000916001600160a01b0390911690636352211e906103bb908c906004016117f7565b60206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b91906110d7565b90506000886001600160a01b0316636352211e896040518263ffffffff1660e01b815260040161043b91906117f7565b60206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b91906110d7565b9050806001600160a01b0316826001600160a01b0316146104be5760405162461bcd60e51b815260040161022c90611747565b6001600160a01b03831633146104e65760405162461bcd60e51b815260040161022c906117c7565b428710156105065760405162461bcd60e51b815260040161022c906117b7565b6105546105168c8c8c8c8c610a81565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610ae8915050565b6105705760405162461bcd60e51b815260040161022c90611777565b600193505050505b979650505050505050565b6003818154811061059357600080fd5b6000918252602090912001546001600160a01b0316905081565b6105b5610b12565b6001600160a01b03811660009081526002602052604090205460ff166105ed5760405162461bcd60e51b815260040161022c906117d7565b6001600160a01b0381166000908152600260205260409020805460ff1916905561061681610b41565b50565b610621610b12565b6001600160a01b0381166106475760405162461bcd60e51b815260040161022c90611787565b6001546001600160a01b03828116911614156106755760405162461bcd60e51b815260040161022c90611767565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61069f610b12565b6001600160a01b0381166106c55760405162461bcd60e51b815260040161022c90611787565b6001600160a01b03811660009081526002602052604090205460ff16156106fe5760405162461bcd60e51b815260040161022c906117e7565b6001600160a01b03166000818152600260205260408120805460ff191660019081179091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169091179055565b61076c610b12565b6107766000610c4d565b565b600080836001600160a01b0316636352211e846040518263ffffffff1660e01b81526004016107a791906117f7565b60206040518083038186803b1580156107bf57600080fd5b505afa1580156107d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f791906110d7565b60015460405163294cdf0d60e01b81529192506001600160a01b03169063294cdf0d906108289084906004016115f1565b60206040518083038186803b15801561084057600080fd5b505afa158015610854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c291906111aa565b6000546001600160a01b031690565b6001600160a01b03811660009081526002602052604090205460609060ff166108c25760405162461bcd60e51b815260040161022c906117d7565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906108f19087906004016115f1565b60206040518083038186803b15801561090957600080fd5b505afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906111aa565b90506000816001600160401b0381111561095d5761095d6118b6565b604051908082528060200260200182016040528015610986578160200160208202803683370190505b50905060005b82811015610a4157604051632f745c5960e01b81526001600160a01b03861690632f745c59906109c290899085906004016115ff565b60206040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906111aa565b828281518110610a2457610a246118a0565b602090810291909101015280610a3981611843565b91505061098c565b50949350505050565b610a52610b12565b6001600160a01b038116610a785760405162461bcd60e51b815260040161022c90611737565b61061681610c4d565b6000610adc7f7b89f80b5059cd12839d64ba016c9064695538ba62ec30cfe2a04de9da80405b8787878787604051602001610ac196959493929190611685565b60405160208183030381529060405280519060200120610c9d565b90505b95945050505050565b6000816001600160a01b0316610afe8585610cb0565b6001600160a01b03161490505b9392505050565b33610b1b610878565b6001600160a01b0316146107765760405162461bcd60e51b815260040161022c906117a7565b60005b600354811015610c4957816001600160a01b031660038281548110610b6b57610b6b6118a0565b6000918252602090912001546001600160a01b03161415610c375760038054610b9690600190611805565b81548110610ba657610ba66118a0565b600091825260209091200154600380546001600160a01b039092169183908110610bd257610bd26118a0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610c1157610c1161188a565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610c4181611843565b915050610b44565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006102c6610caa610cd4565b83610dc7565b6000806000610cbf8585610dfa565b91509150610ccc81610e40565b509392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d2d57507f000000000000000000000000000000000000000000000000000000000000000046145b15610d5757507f000000000000000000000000000000000000000000000000000000000000000090565b610dc27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610f25565b905090565b60008282604051602001610ddc9291906115c0565b60405160208183030381529060405280519060200120905092915050565b600080825160411415610e315760208301516040840151606085015160001a610e2587828585610f5f565b94509450505050610e39565b506000905060025b9250929050565b6000816004811115610e5457610e54611874565b1415610e5d5750565b6001816004811115610e7157610e71611874565b1415610e8f5760405162461bcd60e51b815260040161022c90611717565b6002816004811115610ea357610ea3611874565b1415610ec15760405162461bcd60e51b815260040161022c90611727565b6003816004811115610ed557610ed5611874565b1415610ef35760405162461bcd60e51b815260040161022c90611757565b6004816004811115610f0757610f07611874565b14156106165760405162461bcd60e51b815260040161022c90611797565b60008383834630604051602001610f40959493929190611639565b6040516020818303038152906040528051906020012090509392505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610f8c575060009050600361102c565b8460ff16601b14158015610fa457508460ff16601c14155b15610fb5575060009050600461102c565b600060018787878760405160008152602001604052604051610fda94939291906116d4565b6020604051602081039080840390855afa158015610ffc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110255760006001925092505061102c565b9150600090505b94509492505050565b80356102c6816118cc565b80516102c6816118cc565b60008083601f84011261106057611060600080fd5b5081356001600160401b0381111561107a5761107a600080fd5b602083019150836001820283011115610e3957610e39600080fd5b80356102c6816118e0565b80356102c6816118e9565b80516102c6816118e9565b6000602082840312156110cb576110cb600080fd5b60006102c28484611035565b6000602082840312156110ec576110ec600080fd5b60006102c28484611040565b6000806040838503121561110e5761110e600080fd5b600061111a8585611035565b925050602061112b85828601611035565b9150509250929050565b6000806040838503121561114b5761114b600080fd5b60006111578585611035565b925050602061112b858286016110a0565b60006020828403121561117d5761117d600080fd5b60006102c28484611095565b60006020828403121561119e5761119e600080fd5b60006102c284846110a0565b6000602082840312156111bf576111bf600080fd5b60006102c284846110ab565b600080604083850312156111e1576111e1600080fd5b600061111a85856110a0565b600080600080600080600060c0888a03121561120b5761120b600080fd5b60006112178a8a6110a0565b97505060206112288a828b016110a0565b96505060406112398a828b01611035565b955050606061124a8a828b016110a0565b945050608061125b8a828b016110a0565b93505060a08801356001600160401b0381111561127a5761127a600080fd5b6112868a828b0161104b565b925092505092959891949750929550565b60006112a3838361130b565b505060200190565b6112b48161181c565b82525050565b60006112c4825190565b80845260209384019383018060005b838110156112f85781516112e78882611297565b9750602083019250506001016112d3565b509495945050505050565b8015156112b4565b806112b4565b6112b481611838565b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b815291505b5060200190565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150611345565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291505b5060400190565b601e81526000602082017f4944454e544954595f4f574e45525f4e4f545f544f4b454e5f4f574e4552000081529150611345565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015291506113bf565b600a81526000602082016953414d455f56414c554560b01b81529150611345565b6011815260006020820170494e56414c49445f5349474e415455524560781b81529150611345565b600c81526000602082016b5a45524f5f4144445245535360a01b81529150611345565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b602082015291506113bf565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000611345565b6014815260006020820173159053125117d411549253d117d156141254915160621b81529150611345565b601181526000602082017021a0a62622a92fa727aa2fa922a0a222a960791b81529150611345565b600e81526000602082016d14d09517d393d517d3125392d15160921b81529150611345565b601281526000602082017114d09517d053149150511657d3125392d15160721b81529150611345565b60ff81166112b4565b61190160f01b815260020160006115d7828561130b565b6020820191506115e7828461130b565b5060200192915050565b602081016102c682846112ab565b6040810161160d82856112ab565b610b0b602083018461130b565b60208082528101610b0b81846112ba565b602081016102c68284611303565b60a08101611647828861130b565b611654602083018761130b565b611661604083018661130b565b61166e606083018561130b565b61167b60808301846112ab565b9695505050505050565b60c08101611693828961130b565b6116a0602083018861130b565b6116ad604083018761130b565b6116ba60608301866112ab565b6116c7608083018561130b565b61057860a083018461130b565b608081016116e2828761130b565b6116ef60208301866115b7565b6116fc604083018561130b565b610adf606083018461130b565b602081016102c68284611311565b602080825281016102c68161131a565b602080825281016102c68161134c565b602080825281016102c681611380565b602080825281016102c6816113c6565b602080825281016102c6816113fa565b602080825281016102c681611439565b602080825281016102c68161145a565b602080825281016102c681611482565b602080825281016102c6816114a5565b602080825281016102c6816114e4565b602080825281016102c681611516565b602080825281016102c681611541565b602080825281016102c681611569565b602080825281016102c68161158e565b602081016102c6828461130b565b6000828210156118175761181761185e565b500390565b60006001600160a01b0382166102c6565b60006102c68261181c565b60006102c68261182d565b60006000198214156118575761185761185e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6118d58161181c565b811461061657600080fd5b6118d58161182d565b806118d556fea26469706673582212200226abf90f17bbbcc72d12b3a7f4f82368535a0a9aef38350b690c66f33a159e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100af5760003560e01c806304b6b5dd146100b4578063237700c3146100dd578063342c27ad146100fd5780633450793f1461011d5780633ad3033e1461013257806342231b24146101455780636ccaaa7b14610168578063715018a61461017b57806377bed5ed1461018357806380776ac4146101a35780638da5cb5b146101c3578063d1d105de146101cb578063f2fde38b146101de575b600080fd5b6100c76100c23660046111cb565b6101f1565b6040516100d4919061161a565b60405180910390f35b6100f06100eb3660046111ed565b6102cc565b6040516100d4919061162b565b61011061010b366004611189565b610583565b6040516100d491906115f1565b61013061012b3660046110b6565b6105ad565b005b610130610140366004611168565b610619565b6100f06101533660046110b6565b60026020526000908152604090205460ff1681565b6101306101763660046110b6565b610697565b610130610764565b600154610196906001600160a01b031681565b6040516100d49190611709565b6101b66101b1366004611135565b610778565b6040516100d491906117f7565b610110610878565b6100c76101d93660046110f8565b610887565b6101306101ec3660046110b6565b610a4a565b6001600160a01b03811660009081526002602052604090205460609060ff166102355760405162461bcd60e51b815260040161022c906117d7565b60405180910390fd5b6001546040516331a9108f60e11b81526000916001600160a01b031690636352211e906102669087906004016117f7565b60206040518083038186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b691906110d7565b90506102c28184610887565b9150505b92915050565b6001600160a01b03851660009081526002602052604081205460ff166103045760405162461bcd60e51b815260040161022c906117d7565b6001546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610335908c906004016117f7565b60206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038591906110d7565b6001546040516331a9108f60e11b81529192506000916001600160a01b0390911690636352211e906103bb908c906004016117f7565b60206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b91906110d7565b90506000886001600160a01b0316636352211e896040518263ffffffff1660e01b815260040161043b91906117f7565b60206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b91906110d7565b9050806001600160a01b0316826001600160a01b0316146104be5760405162461bcd60e51b815260040161022c90611747565b6001600160a01b03831633146104e65760405162461bcd60e51b815260040161022c906117c7565b428710156105065760405162461bcd60e51b815260040161022c906117b7565b6105546105168c8c8c8c8c610a81565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610ae8915050565b6105705760405162461bcd60e51b815260040161022c90611777565b600193505050505b979650505050505050565b6003818154811061059357600080fd5b6000918252602090912001546001600160a01b0316905081565b6105b5610b12565b6001600160a01b03811660009081526002602052604090205460ff166105ed5760405162461bcd60e51b815260040161022c906117d7565b6001600160a01b0381166000908152600260205260409020805460ff1916905561061681610b41565b50565b610621610b12565b6001600160a01b0381166106475760405162461bcd60e51b815260040161022c90611787565b6001546001600160a01b03828116911614156106755760405162461bcd60e51b815260040161022c90611767565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61069f610b12565b6001600160a01b0381166106c55760405162461bcd60e51b815260040161022c90611787565b6001600160a01b03811660009081526002602052604090205460ff16156106fe5760405162461bcd60e51b815260040161022c906117e7565b6001600160a01b03166000818152600260205260408120805460ff191660019081179091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169091179055565b61076c610b12565b6107766000610c4d565b565b600080836001600160a01b0316636352211e846040518263ffffffff1660e01b81526004016107a791906117f7565b60206040518083038186803b1580156107bf57600080fd5b505afa1580156107d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f791906110d7565b60015460405163294cdf0d60e01b81529192506001600160a01b03169063294cdf0d906108289084906004016115f1565b60206040518083038186803b15801561084057600080fd5b505afa158015610854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c291906111aa565b6000546001600160a01b031690565b6001600160a01b03811660009081526002602052604090205460609060ff166108c25760405162461bcd60e51b815260040161022c906117d7565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906108f19087906004016115f1565b60206040518083038186803b15801561090957600080fd5b505afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906111aa565b90506000816001600160401b0381111561095d5761095d6118b6565b604051908082528060200260200182016040528015610986578160200160208202803683370190505b50905060005b82811015610a4157604051632f745c5960e01b81526001600160a01b03861690632f745c59906109c290899085906004016115ff565b60206040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906111aa565b828281518110610a2457610a246118a0565b602090810291909101015280610a3981611843565b91505061098c565b50949350505050565b610a52610b12565b6001600160a01b038116610a785760405162461bcd60e51b815260040161022c90611737565b61061681610c4d565b6000610adc7f7b89f80b5059cd12839d64ba016c9064695538ba62ec30cfe2a04de9da80405b8787878787604051602001610ac196959493929190611685565b60405160208183030381529060405280519060200120610c9d565b90505b95945050505050565b6000816001600160a01b0316610afe8585610cb0565b6001600160a01b03161490505b9392505050565b33610b1b610878565b6001600160a01b0316146107765760405162461bcd60e51b815260040161022c906117a7565b60005b600354811015610c4957816001600160a01b031660038281548110610b6b57610b6b6118a0565b6000918252602090912001546001600160a01b03161415610c375760038054610b9690600190611805565b81548110610ba657610ba66118a0565b600091825260209091200154600380546001600160a01b039092169183908110610bd257610bd26118a0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610c1157610c1161188a565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610c4181611843565b915050610b44565b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006102c6610caa610cd4565b83610dc7565b6000806000610cbf8585610dfa565b91509150610ccc81610e40565b509392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d2d57507f000000000000000000000000000000000000000000000000000000000000000046145b15610d5757507f000000000000000000000000000000000000000000000000000000000000000090565b610dc27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610f25565b905090565b60008282604051602001610ddc9291906115c0565b60405160208183030381529060405280519060200120905092915050565b600080825160411415610e315760208301516040840151606085015160001a610e2587828585610f5f565b94509450505050610e39565b506000905060025b9250929050565b6000816004811115610e5457610e54611874565b1415610e5d5750565b6001816004811115610e7157610e71611874565b1415610e8f5760405162461bcd60e51b815260040161022c90611717565b6002816004811115610ea357610ea3611874565b1415610ec15760405162461bcd60e51b815260040161022c90611727565b6003816004811115610ed557610ed5611874565b1415610ef35760405162461bcd60e51b815260040161022c90611757565b6004816004811115610f0757610f07611874565b14156106165760405162461bcd60e51b815260040161022c90611797565b60008383834630604051602001610f40959493929190611639565b6040516020818303038152906040528051906020012090509392505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610f8c575060009050600361102c565b8460ff16601b14158015610fa457508460ff16601c14155b15610fb5575060009050600461102c565b600060018787878760405160008152602001604052604051610fda94939291906116d4565b6020604051602081039080840390855afa158015610ffc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110255760006001925092505061102c565b9150600090505b94509492505050565b80356102c6816118cc565b80516102c6816118cc565b60008083601f84011261106057611060600080fd5b5081356001600160401b0381111561107a5761107a600080fd5b602083019150836001820283011115610e3957610e39600080fd5b80356102c6816118e0565b80356102c6816118e9565b80516102c6816118e9565b6000602082840312156110cb576110cb600080fd5b60006102c28484611035565b6000602082840312156110ec576110ec600080fd5b60006102c28484611040565b6000806040838503121561110e5761110e600080fd5b600061111a8585611035565b925050602061112b85828601611035565b9150509250929050565b6000806040838503121561114b5761114b600080fd5b60006111578585611035565b925050602061112b858286016110a0565b60006020828403121561117d5761117d600080fd5b60006102c28484611095565b60006020828403121561119e5761119e600080fd5b60006102c284846110a0565b6000602082840312156111bf576111bf600080fd5b60006102c284846110ab565b600080604083850312156111e1576111e1600080fd5b600061111a85856110a0565b600080600080600080600060c0888a03121561120b5761120b600080fd5b60006112178a8a6110a0565b97505060206112288a828b016110a0565b96505060406112398a828b01611035565b955050606061124a8a828b016110a0565b945050608061125b8a828b016110a0565b93505060a08801356001600160401b0381111561127a5761127a600080fd5b6112868a828b0161104b565b925092505092959891949750929550565b60006112a3838361130b565b505060200190565b6112b48161181c565b82525050565b60006112c4825190565b80845260209384019383018060005b838110156112f85781516112e78882611297565b9750602083019250506001016112d3565b509495945050505050565b8015156112b4565b806112b4565b6112b481611838565b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b815291505b5060200190565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150611345565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291505b5060400190565b601e81526000602082017f4944454e544954595f4f574e45525f4e4f545f544f4b454e5f4f574e4552000081529150611345565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015291506113bf565b600a81526000602082016953414d455f56414c554560b01b81529150611345565b6011815260006020820170494e56414c49445f5349474e415455524560781b81529150611345565b600c81526000602082016b5a45524f5f4144445245535360a01b81529150611345565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b602082015291506113bf565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000611345565b6014815260006020820173159053125117d411549253d117d156141254915160621b81529150611345565b601181526000602082017021a0a62622a92fa727aa2fa922a0a222a960791b81529150611345565b600e81526000602082016d14d09517d393d517d3125392d15160921b81529150611345565b601281526000602082017114d09517d053149150511657d3125392d15160721b81529150611345565b60ff81166112b4565b61190160f01b815260020160006115d7828561130b565b6020820191506115e7828461130b565b5060200192915050565b602081016102c682846112ab565b6040810161160d82856112ab565b610b0b602083018461130b565b60208082528101610b0b81846112ba565b602081016102c68284611303565b60a08101611647828861130b565b611654602083018761130b565b611661604083018661130b565b61166e606083018561130b565b61167b60808301846112ab565b9695505050505050565b60c08101611693828961130b565b6116a0602083018861130b565b6116ad604083018761130b565b6116ba60608301866112ab565b6116c7608083018561130b565b61057860a083018461130b565b608081016116e2828761130b565b6116ef60208301866115b7565b6116fc604083018561130b565b610adf606083018461130b565b602081016102c68284611311565b602080825281016102c68161131a565b602080825281016102c68161134c565b602080825281016102c681611380565b602080825281016102c6816113c6565b602080825281016102c6816113fa565b602080825281016102c681611439565b602080825281016102c68161145a565b602080825281016102c681611482565b602080825281016102c6816114a5565b602080825281016102c6816114e4565b602080825281016102c681611516565b602080825281016102c681611541565b602080825281016102c681611569565b602080825281016102c68161158e565b602081016102c6828461130b565b6000828210156118175761181761185e565b500390565b60006001600160a01b0382166102c6565b60006102c68261181c565b60006102c68261182d565b60006000198214156118575761185761185e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6118d58161181c565b811461061657600080fd5b6118d58161182d565b806118d556fea26469706673582212200226abf90f17bbbcc72d12b3a7f4f82368535a0a9aef38350b690c66f33a159e64736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "kind": "dev",
    "methods": {
      "addLinkedSBT(address)": {
        "details": "The caller must be the owner to call this function",
        "params": {
          "token": "Address of the SBT contract"
        }
      },
      "constructor": {
        "params": {
          "owner": "Owner of the smart contract"
        }
      },
      "getIdentityId(address,uint256)": {
        "details": "The token must be linked to this soul linker",
        "params": {
          "token": "Address of the SBT contract",
          "tokenId": "Id of the token"
        },
        "returns": {
          "_0": "Id of the identity"
        }
      },
      "getSBTLinks(address,address)": {
        "details": "The token must be linked to this soul linker",
        "params": {
          "owner": "Address of the owner of the identity",
          "token": "Address of the SBT contract"
        },
        "returns": {
          "_0": "List of linked SBTs"
        }
      },
      "getSBTLinks(uint256,address)": {
        "details": "The token must be linked to this soul linker",
        "params": {
          "identityId": "Id of the identity",
          "token": "Address of the SBT contract"
        },
        "returns": {
          "_0": "List of linked SBTs"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLinkedSBT(address)": {
        "details": "The caller must be the owner to call this function",
        "params": {
          "token": "Address of the SBT contract"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must be the owner to call this function",
        "params": {
          "_soulboundIdentity": "Address of the SoulboundIdentity contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateLinkData(uint256,uint256,address,uint256,uint256,bytes)": {
        "details": "The token must be linked to this soul linker",
        "params": {
          "expirationDate": "Expiration date of the signature",
          "ownerIdentityId": "Id of the identity of the owner of the SBT",
          "readerIdentityId": "Id of the identity of the reader",
          "signature": "Signature of the read link request made by the owner",
          "token": "Address of the SBT contract",
          "tokenId": "Id of the token"
        },
        "returns": {
          "_0": "`true` if the signature is valid, `false` otherwise"
        }
      }
    },
    "title": "Soul linker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLinkedSBT(address)": {
        "notice": "Adds an SBT to the list of linked SBTs"
      },
      "constructor": {
        "notice": "Creates a new soul linker"
      },
      "getIdentityId(address,uint256)": {
        "notice": "Returns the identityId owned by the given token"
      },
      "getSBTLinks(address,address)": {
        "notice": "Returns the list of linked SBTs by a given SBT token"
      },
      "getSBTLinks(uint256,address)": {
        "notice": "Returns the list of linked SBTs by a given SBT token"
      },
      "removeLinkedSBT(address)": {
        "notice": "Removes an SBT from the list of linked SBTs"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this soul name"
      },
      "validateLinkData(uint256,uint256,address,uint256,uint256,bytes)": {
        "notice": "Validates the signature of the given read link request"
      }
    },
    "notice": "Soul linker smart contract that let add links to a Soulbound token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/SoulLinker.sol:SoulLinker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4460,
        "contract": "contracts/SoulLinker.sol:SoulLinker",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISoulboundIdentity)7409"
      },
      {
        "astId": 4464,
        "contract": "contracts/SoulLinker.sol:SoulLinker",
        "label": "linkedSBT",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4467,
        "contract": "contracts/SoulLinker.sol:SoulLinker",
        "label": "linkedSBTs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISoulboundIdentity)7409": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}