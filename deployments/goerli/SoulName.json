{
  "address": "0xf4B9De884175f1b2A6A383a64D02E88C850e94fF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIdentityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "IdentityIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpirationDate",
          "type": "uint256"
        }
      ],
      "name": "YearsPeriodRenewed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "sbtName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "renewYearsPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        }
      ],
      "name": "setExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "updateIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05040b8ad6b0eea1cff9ed1a4528e8fbde710448e19b8e137e7c2a0edd6ac87e",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0xf4B9De884175f1b2A6A383a64D02E88C850e94fF",
    "transactionIndex": 0,
    "gasUsed": "3964526",
    "logsBloom": "0x0000000c
    "blockHash": "0xbf326be9178529bb91a72eb1837661ccd95fdac4f4526a90b96894949f964e2e",
    "transactionHash": "0x05040b8ad6b0eea1cff9ed1a4528e8fbde710448e19b8e137e7c2a0edd6ac87e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7880074,
        "transactionHash": "0x05040b8ad6b0eea1cff9ed1a4528e8fbde710448e19b8e137e7c2a0edd6ac87e",
        "address": "0xf4B9De884175f1b2A6A383a64D02E88C850e94fF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbf326be9178529bb91a72eb1837661ccd95fdac4f4526a90b96894949f964e2e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7880074,
        "transactionHash": "0x05040b8ad6b0eea1cff9ed1a4528e8fbde710448e19b8e137e7c2a0edd6ac87e",
        "address": "0xf4B9De884175f1b2A6A383a64D02E88C850e94fF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbf326be9178529bb91a72eb1837661ccd95fdac4f4526a90b96894949f964e2e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7880074,
        "transactionHash": "0x05040b8ad6b0eea1cff9ed1a4528e8fbde710448e19b8e137e7c2a0edd6ac87e",
        "address": "0xf4B9De884175f1b2A6A383a64D02E88C850e94fF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xbf326be9178529bb91a72eb1837661ccd95fdac4f4526a90b96894949f964e2e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7880074,
        "transactionHash": "0x05040b8ad6b0eea1cff9ed1a4528e8fbde710448e19b8e137e7c2a0edd6ac87e",
        "address": "0xf4B9De884175f1b2A6A383a64D02E88C850e94fF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xbf326be9178529bb91a72eb1837661ccd95fdac4f4526a90b96894949f964e2e"
      }
    ],
    "blockNumber": 7880074,
    "cumulativeGasUsed": "3964526",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "0x83A5492f28CD7D2d5aA7A8b9c0Cf926f639Dd612",
    ".soul",
    "ipfs://QmZfLPRvTZax8s1BWN7ZDQRdHfZ7QXKRmeRvg88JW9DMzt"
  ],
  "numDeployments": 4,
  "solcInputHash": "89b82a9f434ae9a1c5324eb49f2e286b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIdentityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"IdentityIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpirationDate\",\"type\":\"uint256\"}],\"name\":\"YearsPeriodRenewed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sbtName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"renewYearsPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"updateIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token. It has an extension, and stores all the information about the identity names.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"tokenId\":\"TokenId of the soul name to burn\"}},\"constructor\":{\"details\":\"Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\",\"params\":{\"_contractURI\":\"URI of the smart contract metadata\",\"_extension\":\"Extension of the soul name\",\"_soulboundIdentity\":\"Address of the Soulbound identity contract\",\"owner\":\"Owner of the smart contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getExtension()\":{\"details\":\"This function is used to get the extension of the soul name\",\"returns\":{\"_0\":\"Extension of the soul name\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSoulNames(address)\":{\"details\":\"This function queries all the identity names of the specified account\",\"params\":{\"owner\":\"Address of the owner of the identities\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the account\"}},\"getSoulNames(uint256)\":{\"details\":\"This function queries all the identity names of the specified identity Id\",\"params\":{\"identityId\":\"TokenId of the identity\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the identity Id\"}},\"getTokenData(string)\":{\"details\":\"This function queries the information of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"active\":\"`true` if the soul name is active, `false` otherwise\",\"expirationDate\":\"Expiration date of the soul name\",\"identityId\":\"Identity id of the soul name\",\"sbtName\":\"Soul name, in upper/lower case and extension\",\"tokenId\":\"SoulName id of the soul name\"}},\"getTokenId(string)\":{\"details\":\"This function queries the token id of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"SoulName id of the soul name\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isAvailable(string)\":{\"details\":\"This function queries if a soul name already exists and is in the available state\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"available\":\"`true` if the soul name is available, `false` otherwise\"}},\"mint(address,string,uint256,uint256,string)\":{\"details\":\"The caller can mint more than one name. The soul name must be unique.\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"identityId\":\"TokenId of the soulbound identity that will be pointed from this soul name\",\"name\":\"Name of the new soul name\",\"to\":\"Address of the owner of the new soul name\",\"yearsPeriod\":\"Years of validity of the name\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renewYearsPeriod(uint256,uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"tokenId\":\"TokenId of the soul name\",\"yearsPeriod\":\"Years of validity of the name\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"The caller must have the owner to call this function\",\"params\":{\"_contractURI\":\"URI of the smart contract metadata\"}},\"setExtension(string)\":{\"details\":\"The caller must have the owner to call this function\",\"params\":{\"_extension\":\"Extension of the soul name\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must have the owner to call this function\",\"params\":{\"_soulboundIdentity\":\"Address of the SoulboundIdentity contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(string)\":{\"details\":\"This function returns the token URI of the soul name specified by the name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"URI of the soulname associated to a name\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenId\":\"NFT to get the URI of\"},\"returns\":{\"_0\":\"URI of the NFT\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateIdentityId(uint256,uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"identityId\":\"New TokenId of the soulbound identity that will be pointed from this soul name\",\"tokenId\":\"TokenId of the soul name\"}}},\"title\":\"SoulName NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn a soul name\"},\"constructor\":{\"notice\":\"Creates a new SoulName NFT\"},\"getExtension()\":{\"notice\":\"Returns the extension of the soul name\"},\"getSoulNames(address)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getSoulNames(uint256)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getTokenData(string)\":{\"notice\":\"Returns the information of a soul name\"},\"getTokenId(string)\":{\"notice\":\"Returns the token id of a soul name\"},\"isAvailable(string)\":{\"notice\":\"Checks if a soul name is available\"},\"mint(address,string,uint256,uint256,string)\":{\"notice\":\"Mints a new soul name\"},\"renewYearsPeriod(uint256,uint256)\":{\"notice\":\"Update the expiration date of a soul name\"},\"setContractURI(string)\":{\"notice\":\"Sets the URI of the smart contract metadata\"},\"setExtension(string)\":{\"notice\":\"Sets the extension of the soul name\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this soul name\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"tokenURI(string)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"updateIdentityId(uint256,uint256)\":{\"notice\":\"Update the identity id pointed from a soul name\"}},\"notice\":\"SoulName NFT that points to a Soulbound identity token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulName.sol\":\"SoulName\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./libraries/Utils.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/MasaNFT.sol\\\";\\n\\n/// @title SoulName NFT\\n/// @author Masa Finance\\n/// @notice SoulName NFT that points to a Soulbound identity token\\n/// @dev SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token.\\n/// It has an extension, and stores all the information about the identity names.\\ncontract SoulName is MasaNFT, ISoulName {\\n    /* ========== STATE VARIABLES ========== */\\n    using SafeMath for uint256;\\n\\n    uint256 constant YEAR = 31536000; // 60 seconds * 60 minutes * 24 hours * 365 days\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n    string public extension; // suffix of the names (.sol?)\\n\\n    // contractURI() points to the smart contract metadata\\n    // see https://docs.opensea.io/docs/contract-level-metadata\\n    string public contractURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(string => bool) private _URIs; // used to check if a uri is already used\\n\\n    mapping(uint256 => TokenData) public tokenData; // used to store the data of the token id\\n    mapping(string => NameData) public nameData; // stores the token id of the current active soul name\\n    mapping(uint256 => string[]) identityNames; // register of all names associated to an identityId\\n\\n    struct TokenData {\\n        string name; // Name with lowercase and uppercase\\n        uint256 identityId;\\n        uint256 expirationDate;\\n    }\\n\\n    struct NameData {\\n        bool exists;\\n        uint256 tokenId;\\n    }\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new SoulName NFT\\n    /// @dev Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\\n    /// @param owner Owner of the smart contract\\n    /// @param _soulboundIdentity Address of the Soulbound identity contract\\n    /// @param _extension Extension of the soul name\\n    /// @param _contractURI URI of the smart contract metadata\\n    constructor(\\n        address owner,\\n        ISoulboundIdentity _soulboundIdentity,\\n        string memory _extension,\\n        string memory _contractURI\\n    ) MasaNFT(owner, \\\"Masa Soul Name\\\", \\\"MSN\\\", \\\"\\\") {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        soulboundIdentity = _soulboundIdentity;\\n        extension = _extension;\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this soul name\\n    /// @dev The caller must have the owner to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(ISoulboundIdentity _soulboundIdentity)\\n        external\\n        onlyOwner\\n    {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulboundIdentity != _soulboundIdentity, \\\"SAME_VALUE\\\");\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the extension of the soul name\\n    /// @dev The caller must have the owner to call this function\\n    /// @param _extension Extension of the soul name\\n    function setExtension(string memory _extension) external onlyOwner {\\n        require(\\n            keccak256(abi.encodePacked((extension))) !=\\n                keccak256(abi.encodePacked((_extension))),\\n            \\\"SAME_VALUE\\\"\\n        );\\n        extension = _extension;\\n    }\\n\\n    /// @notice Sets the URI of the smart contract metadata\\n    /// @dev The caller must have the owner to call this function\\n    /// @param _contractURI URI of the smart contract metadata\\n    function setContractURI(string memory _contractURI) external onlyOwner {\\n        require(\\n            keccak256(abi.encodePacked((contractURI))) !=\\n                keccak256(abi.encodePacked((_contractURI))),\\n            \\\"SAME_VALUE\\\"\\n        );\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new soul name\\n    /// @dev The caller can mint more than one name. The soul name must be unique.\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param identityId TokenId of the soulbound identity that will be pointed from this soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) public override returns (uint256) {\\n        require(isAvailable(name), \\\"NAME_ALREADY_EXISTS\\\");\\n        require(bytes(name).length > 0, \\\"ZERO_LENGTH_NAME\\\");\\n        require(yearsPeriod > 0, \\\"ZERO_YEARS_PERIOD\\\");\\n        require(\\n            soulboundIdentity.ownerOf(identityId) != address(0),\\n            \\\"IDENTITY_NOT_FOUND\\\"\\n        );\\n        require(\\n            Utils.startsWith(_tokenURI, \\\"ar://\\\") ||\\n                Utils.startsWith(_tokenURI, \\\"ipfs://\\\"),\\n            \\\"INVALID_TOKEN_URI\\\"\\n        );\\n\\n        uint256 tokenId = _mintWithCounter(to);\\n        _setTokenURI(tokenId, _tokenURI);\\n\\n        tokenData[tokenId].name = name;\\n        tokenData[tokenId].identityId = identityId;\\n        tokenData[tokenId].expirationDate = block.timestamp.add(\\n            YEAR.mul(yearsPeriod)\\n        );\\n\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        nameData[lowercaseName].tokenId = tokenId;\\n        nameData[lowercaseName].exists = true;\\n\\n        identityNames[identityId].push(lowercaseName);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Update the identity id pointed from a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param identityId New TokenId of the soulbound identity that will be pointed from this soul name\\n    function updateIdentityId(uint256 tokenId, uint256 identityId) public {\\n        // ERC721: caller is not token owner nor approved\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721_CALLER_NOT_OWNER\\\"\\n        );\\n        require(\\n            soulboundIdentity.ownerOf(identityId) != address(0),\\n            \\\"IDENTITY_NOT_FOUND\\\"\\n        );\\n\\n        uint256 oldIdentityId = tokenData[tokenId].identityId;\\n        require(identityId != oldIdentityId, \\\"SAME_VALUE\\\");\\n\\n        // change value from soulNames\\n        tokenData[tokenId].identityId = identityId;\\n\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        // remove name from identityNames[oldIdentityId]\\n        Utils.removeStringFromArray(\\n            identityNames[oldIdentityId],\\n            lowercaseName\\n        );\\n\\n        // add name to identityNames[identityId]\\n        identityNames[identityId].push(lowercaseName);\\n\\n        emit IdentityIdUpdated(tokenId, oldIdentityId, identityId);\\n    }\\n\\n    /// @notice Update the expiration date of a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    function renewYearsPeriod(uint256 tokenId, uint256 yearsPeriod) public {\\n        // ERC721: caller is not token owner nor approved\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721_CALLER_NOT_OWNER\\\"\\n        );\\n        require(yearsPeriod > 0, \\\"ZERO_YEARS_PERIOD\\\");\\n\\n        // check that the last registered tokenId for that name is the current token\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        require(nameData[lowercaseName].exists, \\\"NAME_NOT_FOUND\\\");\\n        require(nameData[lowercaseName].tokenId == tokenId, \\\"CAN_NOT_RENEW\\\");\\n\\n        // check if the name is expired\\n        if (tokenData[tokenId].expirationDate < block.timestamp) {\\n            tokenData[tokenId].expirationDate = block.timestamp.add(\\n                YEAR.mul(yearsPeriod)\\n            );\\n        } else {\\n            tokenData[tokenId].expirationDate = tokenData[tokenId]\\n                .expirationDate\\n                .add(YEAR.mul(yearsPeriod));\\n        }\\n\\n        emit YearsPeriodRenewed(\\n            tokenId,\\n            yearsPeriod,\\n            tokenData[tokenId].expirationDate\\n        );\\n    }\\n\\n    /// @notice Burn a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name to burn\\n    function burn(uint256 tokenId) public override {\\n        require(_exists(tokenId), \\\"TOKEN_NOT_FOUND\\\");\\n\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        uint256 identityId = tokenData[tokenId].identityId;\\n\\n        // remove info from tokenIdName and tokenData\\n        delete tokenData[tokenId];\\n\\n        // if the last owner of the name is burning it, remove the name from nameData\\n        if (nameData[lowercaseName].tokenId == tokenId) {\\n            delete nameData[lowercaseName];\\n        }\\n        Utils.removeStringFromArray(identityNames[identityId], lowercaseName);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n            _URIs[_tokenURIs[tokenId]] = false;\\n        }\\n\\n        super.burn(tokenId);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function is used to get the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() external view override returns (string memory) {\\n        return extension;\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(string memory name)\\n        public\\n        view\\n        override\\n        returns (bool available)\\n    {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        if (nameData[lowercaseName].exists) {\\n            uint256 tokenId = nameData[lowercaseName].tokenId;\\n            return tokenData[tokenId].expirationDate < block.timestamp;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return identityId Identity id of the soul name\\n    /// @return tokenId SoulName id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        override\\n        returns (\\n            string memory sbtName,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        tokenId = _getTokenId(name);\\n\\n        TokenData memory _tokenData = tokenData[tokenId];\\n        return (\\n            _getName(_tokenData.name),\\n            _tokenData.identityId,\\n            tokenId,\\n            _tokenData.expirationDate,\\n            _tokenData.expirationDate >= block.timestamp\\n        );\\n    }\\n\\n    /// @notice Returns the token id of a soul name\\n    /// @dev This function queries the token id of a soul name\\n    /// @param name Name of the soul name\\n    /// @return SoulName id of the soul name\\n    function getTokenId(string memory name)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getTokenId(name);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        // return identity id if exists\\n        uint256 identityId = soulboundIdentity.tokenOfOwner(owner);\\n\\n        return getSoulNames(identityId);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param identityId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(uint256 identityId)\\n        public\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        uint256 results;\\n        for (uint256 i = 0; i < identityNames[identityId].length; i++) {\\n            string memory lowercaseName = identityNames[identityId][i];\\n\\n            if (nameData[lowercaseName].exists) {\\n                uint256 tokenId = nameData[lowercaseName].tokenId;\\n                if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                    results = results.add(1);\\n                }\\n            }\\n        }\\n\\n        string[] memory _sbtNames = new string[](results);\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < identityNames[identityId].length; i++) {\\n            string memory lowercaseName = identityNames[identityId][i];\\n\\n            if (nameData[lowercaseName].exists) {\\n                uint256 tokenId = nameData[lowercaseName].tokenId;\\n                if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                    _sbtNames[index] = lowercaseName;\\n                    index = index.add(1);\\n                }\\n            }\\n        }\\n\\n        // return identity names if exists and are active\\n        return _sbtNames;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev This function returns the token URI of the soul name specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the soulname associated to a name\\n    function tokenURI(string memory name)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        uint256 tokenId = _getTokenId(name);\\n        return tokenURI(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _getName(string memory name) private view returns (string memory) {\\n        return string(bytes.concat(bytes(name), bytes(extension)));\\n    }\\n\\n    function _getTokenId(string memory name) private view returns (uint256) {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        require(nameData[lowercaseName].exists, \\\"NAME_NOT_FOUND\\\");\\n\\n        return nameData[lowercaseName].tokenId;\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI set of nonexistent token\\\"\\n        );\\n        require(_URIs[_tokenURI] == false, \\\"URI_ALREADY_EXISTS\\\");\\n\\n        _tokenURIs[tokenId] = _tokenURI;\\n        _URIs[_tokenURI] = true;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event IdentityIdUpdated(\\n        uint256 tokenId,\\n        uint256 oldIdentityId,\\n        uint256 identityId\\n    );\\n\\n    event YearsPeriodRenewed(\\n        uint256 tokenId,\\n        uint256 yearsPeriod,\\n        uint256 newExpirationDate\\n    );\\n}\\n\",\"keccak256\":\"0xc135da39f7b249d15a66c32f54e1d22b0df59b5d7b940b9c840e939d12920d24\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(string memory name)\\n        external\\n        view\\n        returns (bool available);\\n\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0xb30e08139a4481c33d62f649191050bd08257617ec34fd4d1d9e0723fdeacde8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd901f30d43a5a4598c5164ed37b3b1690c0187232711744f35a1cb57733a35e0\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\n/// @title Utilities library for Masa Contracts Identity repository\\n/// @author Masa Finance\\n/// @notice Library of utilities for Masa Contracts Identity repository\\nlibrary Utils {\\n    struct slice {\\n        uint256 _len;\\n        uint256 _ptr;\\n    }\\n\\n    function toLowerCase(string memory _str)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n\\n    function removeStringFromArray(string[] storage array, string memory name)\\n        internal\\n    {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked((array[i]))) ==\\n                keccak256(abi.encodePacked((name)))\\n            ) {\\n                array[i] = array[array.length - 1];\\n                array.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    function startsWith(string memory str, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        slice memory s_str = toSlice(str);\\n        slice memory s_needle = toSlice(needle);\\n\\n        if (s_str._len < s_needle._len) {\\n            return false;\\n        }\\n\\n        if (s_str._ptr == s_needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(s_needle)\\n            let selfptr := mload(add(s_str, 0x20))\\n            let needleptr := mload(add(s_needle, 0x20))\\n            equal := eq(\\n                keccak256(selfptr, length),\\n                keccak256(needleptr, length)\\n            )\\n        }\\n        return equal;\\n    }\\n}\\n\",\"keccak256\":\"0xb71d6911b00ed77d9579bc2ae3dcc8e06bb0fe0fad35034a5a2ea239bab525a7\",\"license\":\"Apache-2.0\"},\"contracts/tokens/MasaNFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title MasaNFT\\n/// @author Masa Finance\\n/// @notice Non-fungible token is a token that is not fungible.\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n/// that inherits from {ERC721Enumerable}, {Ownable}, {AccessControl} and {ERC721Burnable}.\\nabstract contract MasaNFT is\\n    ERC721,\\n    ERC721Enumerable,\\n    Ownable,\\n    AccessControl,\\n    ERC721Burnable\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private _baseTokenURI;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new NFT\\n    /// @dev Creates a new Non-fungible token\\n    /// @param owner Owner of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        Ownable.transferOwnership(owner);\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    function _mintWithCounter(address to)\\n        internal\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x7cf8a08fdb51384e94c694742d03e8dba2b4b4ad464f9d8d3f471ff552bf9368\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb73cd9241d2aa847f40371da241cd4d75c1ddca8197bbb7057a3d6906a648db1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200493038038062004930833981016040819052620000349162000469565b604080518082018252600e81526d4d61736120536f756c204e616d6560901b602080830191825283518085018552600381526226a9a760e91b818301528451918201909452600080825283518995938592859262000093929062000330565b508051620000a990600190602084019062000330565b505050620000c6620000c0620001b260201b60201c565b620001b6565b620000dc846200020860201b62001b111760201c565b620000e960008562000249565b620001157f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68562000249565b80516200012a90600d90602084019062000330565b50505050506001600160a01b038316620001615760405162461bcd60e51b81526004016200015890620005b3565b60405180910390fd5b600e80546001600160a01b0319166001600160a01b03851617905581516200019190600f90602085019062000330565b508051620001a790601090602084019062000330565b505050505062000733565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000212620002d4565b6001600160a01b0381166200023b5760405162461bcd60e51b8152600401620001589062000568565b6200024681620001b6565b50565b62000255828262000303565b620002d0576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200028f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600a546001600160a01b03163314620003015760405162461bcd60e51b81526004016200015890620005c5565b565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b8280546200033e9062000678565b90600052602060002090601f016020900481019282620003625760008555620003ad565b82601f106200037d57805160ff1916838001178555620003ad565b82800160010185558215620003ad579182015b82811115620003ad57825182559160200191906001019062000390565b50620003bb929150620003bf565b5090565b5b80821115620003bb5760008155600101620003c0565b6000620003ed620003e784620005f6565b620005d7565b9050828152602081018484840111156200040a576200040a600080fd5b6200041784828562000645565b509392505050565b80516200032a8162000711565b80516200032a8162000728565b600082601f8301126200044f576200044f600080fd5b815162000461848260208601620003d6565b949350505050565b60008060008060808587031215620004845762000484600080fd5b60006200049287876200041f565b9450506020620004a5878288016200042c565b93505060408501516001600160401b03811115620004c657620004c6600080fd5b620004d48782880162000439565b92505060608501516001600160401b03811115620004f557620004f5600080fd5b620005038782880162000439565b91505092959194509250565b600c81526000602082016b5a45524f5f4144445245535360a01b815291505b5060200190565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006200052e565b602080825281016200032a81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b602080825281016200032a816200050f565b602080825281016200032a8162000535565b6000620005e360405190565b9050620005f18282620006a9565b919050565b60006001600160401b03821115620006125762000612620006f1565b6200061d8262000707565b60200192915050565b60006001600160a01b0382166200032a565b60006200032a8262000626565b60005b838110156200066257818101518382015260200162000648565b8381111562000672576000848401525b50505050565b6002810460018216806200068d57607f821691505b60208210811415620006a357620006a3620006db565b50919050565b620006b48262000707565b81018181106001600160401b0382111715620006d457620006d4620006f1565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6200071c8162000626565b81146200024657600080fd5b6200071c8162000638565b6141ed80620007436000396000f3fe608060405234801561001057600080fd5b506004361061020f5760003560e01c806301ffc9a71461021457806306fdde031461023d578063081812fc14610252578063095ea7b3146102725780630c151fec1461028757806318160ddd146102a75780631e7663bc146102af57806323b872dd146102c2578063248a9ca3146102d55780632d5537b0146102e85780632f2ff15d146102f05780632f745c591461030357806336568abe146103165780633ad3033e146103295780633d44f8e01461033c57806342842e0e1461034f57806342966c681461036257806346b2b087146103755780634cf12d26146103995780634f6ccce7146103ac5780636352211e146103bf57806370a08231146103d2578063715018a6146103e5578063776ce6a1146103ed57806377bed5ed146103f55780637e2285aa146104155780637e669891146104285780638da5cb5b1461044857806391d1485414610450578063938e3d7b1461046357806395d89b4114610476578063965306aa1461047e578063a217fddf14610491578063a22cb46514610499578063b4b5b48f146104ac578063b79636b6146104ce578063b88d4fde146104e1578063bdf29a85146104f4578063c87b56dd1461053a578063d53913931461054d578063d547741f14610562578063e8a3d48514610575578063e985e9c51461057d578063ebfcbee114610590578063f2fde38b146105a3575b600080fd5b61022761022236600461325b565b6105b6565b6040516102349190613c26565b60405180910390f35b6102456105c7565b6040516102349190613c6b565b610265610260366004613218565b610659565b6040516102349190613bc3565b6102856102803660046131e5565b610680565b005b61029a610295366004613139565b61070f565b6040516102349190613c4f565b60085461029a565b61029a6102bd3660046132be565b6109a8565b6102856102d0366004613038565b6109b3565b61029a6102e3366004613218565b6109e5565b6102456109fa565b6102856102fe366004613239565b610a88565b61029a6103113660046131e5565b610aa4565b610285610324366004613239565b610af6565b61028561033736600461329d565b610b2c565b61028561034a366004613319565b610baa565b61028561035d366004613038565b610de2565b610285610370366004613218565b610dfd565b6103886103833660046132be565b610f62565b604051610234959493929190613ca9565b6102456103a73660046132be565b611069565b61029a6103ba366004613218565b611088565b6102656103cd366004613218565b6110d6565b61029a6103e0366004612fb9565b61110b565b61028561114f565b610245611163565b600e54610408906001600160a01b031681565b6040516102349190613c5d565b6102856104233660046132be565b611172565b61043b610436366004613218565b6111fa565b6040516102349190613c15565b61026561152f565b61022761045e366004613239565b61153e565b6102856104713660046132be565b611569565b6102456115f1565b61022761048c3660046132be565b611600565b61029a600081565b6102856104a7366004613106565b611686565b6104bf6104ba366004613218565b611691565b60405161023493929190613c7c565b61043b6104dc366004612fb9565b61173b565b6102856104ef366004613088565b6117cc565b61052c6105023660046132be565b80516020818301810180516014825292820191909301209152805460019091015460ff9091169082565b604051610234929190613c34565b610245610548366004613218565b611803565b61029a60008051602061417883398151915281565b610285610570366004613239565b611907565b610245611923565b61022761058b366004612ffb565b611930565b61028561059e366004613319565b61195e565b6102856105b1366004612fb9565b611b11565b60006105c182611b4b565b92915050565b6060600080546105d69061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546106029061402b565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b5050505050905090565b600061066482611b70565b506000908152600460205260409020546001600160a01b031690565b600061068b826110d6565b9050806001600160a01b0316836001600160a01b031614156106c85760405162461bcd60e51b81526004016106bf90613e80565b60405180910390fd5b336001600160a01b03821614806106e457506106e48133611930565b6107005760405162461bcd60e51b81526004016106bf90613e20565b61070a8383611b95565b505050565b600061071a85611600565b6107365760405162461bcd60e51b81526004016106bf90613d60565b60008551116107575760405162461bcd60e51b81526004016106bf90613d70565b600083116107775760405162461bcd60e51b81526004016106bf90613de0565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e906107a8908890600401613c4f565b60206040518083038186803b1580156107c057600080fd5b505afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190612fda565b6001600160a01b0316141561081f5760405162461bcd60e51b81526004016106bf90613e60565b610846826040518060400160405280600581526020016461723a2f2f60d81b815250611c03565b8061087557506108758260405180604001604052806007815260200166697066733a2f2f60c81b815250611c03565b6108915760405162461bcd60e51b81526004016106bf90613d00565b600061089c87611c69565b90506108a88184611ca8565b600081815260136020908152604090912087516108c792890190612db6565b5060008181526013602052604090206001018590556108f46108ed6301e1338086611d63565b4290611d6f565b60008281526013602052604081206002019190915561091287611d7b565b9050816014826040516109259190613b17565b908152602001604051809103902060010181905550600160148260405161094c9190613b17565b9081526040805160209281900383019020805460ff191693151593909317909255600088815260158252918220805460018101825590835291819020835161099b939190910191840190612db6565b5090979650505050505050565b60006105c182611ef1565b6109be335b82611f68565b6109da5760405162461bcd60e51b81526004016106bf90613eb0565b61070a838383611fc6565b6000908152600b602052604090206001015490565b600f8054610a079061402b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a339061402b565b8015610a805780601f10610a5557610100808354040283529160200191610a80565b820191906000526020600020905b815481529060010190602001808311610a6357829003601f168201915b505050505081565b610a91826109e5565b610a9a816120e1565b61070a83836120eb565b6000610aaf8361110b565b8210610acd5760405162461bcd60e51b81526004016106bf90613d10565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610b1e5760405162461bcd60e51b81526004016106bf90613ec0565b610b288282612171565b5050565b610b346121d8565b6001600160a01b038116610b5a5760405162461bcd60e51b81526004016106bf90613df0565b600e546001600160a01b0382811691161415610b885760405162461bcd60e51b81526004016106bf90613db0565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b610bb5335b83611f68565b610bd15760405162461bcd60e51b81526004016106bf90613e10565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c02908590600401613c4f565b60206040518083038186803b158015610c1a57600080fd5b505afa158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190612fda565b6001600160a01b03161415610c795760405162461bcd60e51b81526004016106bf90613e60565b60008281526013602052604090206001015481811415610cab5760405162461bcd60e51b81526004016106bf90613db0565b6000838152601360205260408120600181018490558054610d539190610cd09061402b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfc9061402b565b8015610d495780601f10610d1e57610100808354040283529160200191610d49565b820191906000526020600020905b815481529060010190602001808311610d2c57829003601f168201915b5050505050611d7b565b6000838152601560205260409020909150610d6e9082612207565b600083815260156020908152604082208054600181018255908352918190208351610da0939190910191840190612db6565b507f49554a718bc4f67010242de90ef62df1a09330859f5fa73030c9eb4f3aada248848385604051610dd493929190613ed0565b60405180910390a150505050565b61070a838383604051806020016040528060008152506117cc565b610e0681612325565b610e225760405162461bcd60e51b81526004016106bf90613e40565b60008181526013602052604081208054610e409190610cd09061402b565b6000838152601360205260408120600181015492935090610e618282612e3a565b60018201600090556002820160009055505082601483604051610e849190613b17565b9081526020016040518091039020600101541415610ecc57601482604051610eac9190613b17565b908152604051908190036020019020805460ff1916815560006001909101555b6000818152601560205260409020610ee49083612207565b60008381526011602052604090208054610efd9061402b565b159050610f59576000838152601160205260408120610f1b91612e3a565b6000838152601160205260408082209051601291610f3891613b69565b908152604051908190036020019020805491151560ff199092169190911790555b61070a83612342565b6060600080600080610f7386611ef1565b9250600060136000858152602001908152602001600020604051806060016040529081600082018054610fa59061402b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd19061402b565b801561101e5780601f10610ff35761010080835404028352916020019161101e565b820191906000526020600020905b81548152906001019060200180831161100157829003601f168201915b5050505050815260200160018201548152602001600282015481525050905061104a8160000151612370565b6020820151604090920151909891975093955092935050504282101590565b6060600061107683611ef1565b905061108181611803565b9392505050565b600061109360085490565b82106110b15760405162461bcd60e51b81526004016106bf90613ea0565b600882815481106110c4576110c4614106565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105c15760405162461bcd60e51b81526004016106bf90613e70565b60006001600160a01b0382166111335760405162461bcd60e51b81526004016106bf90613dd0565b506001600160a01b031660009081526003602052604090205490565b6111576121d8565b611161600061239c565b565b6060600f80546105d69061402b565b61117a6121d8565b8060405160200161118b9190613b17565b60405160208183030381529060405280519060200120600f6040516020016111b39190613b69565b6040516020818303038152906040528051906020012014156111e75760405162461bcd60e51b81526004016106bf90613db0565b8051610b2890600f906020840190612db6565b60606000805b60008481526015602052604090205481101561135957600084815260156020526040812080548390811061123657611236614106565b90600052602060002001805461124b9061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546112779061402b565b80156112c45780601f10611299576101008083540402835291602001916112c4565b820191906000526020600020905b8154815290600101906020018083116112a757829003601f168201915b505050505090506014816040516112db9190613b17565b9081526040519081900360200190205460ff16156113465760006014826040516113059190613b17565b90815260200160405180910390206001015490504260136000838152602001908152602001600020600201541061134457611341846001611d6f565b93505b505b50806113518161407f565b915050611200565b506000816001600160401b038111156113745761137461411c565b6040519080825280602002602001820160405280156113a757816020015b60608152602001906001900390816113925790505b5090506000805b6000868152601560205260409020548110156115255760008681526015602052604081208054839081106113e4576113e4614106565b9060005260206000200180546113f99061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546114259061402b565b80156114725780601f1061144757610100808354040283529160200191611472565b820191906000526020600020905b81548152906001019060200180831161145557829003601f168201915b505050505090506014816040516114899190613b17565b9081526040519081900360200190205460ff16156115125760006014826040516114b39190613b17565b90815260200160405180910390206001015490504260136000838152602001908152602001600020600201541061151057818585815181106114f7576114f7614106565b602090810291909101015261150d846001611d6f565b93505b505b508061151d8161407f565b9150506113ae565b5090949350505050565b600a546001600160a01b031690565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6115716121d8565b806040516020016115829190613b17565b6040516020818303038152906040528051906020012060106040516020016115aa9190613b69565b6040516020818303038152906040528051906020012014156115de5760405162461bcd60e51b81526004016106bf90613db0565b8051610b28906010906020840190612db6565b6060600180546105d69061402b565b60008061160c83611d7b565b905060148160405161161e9190613b17565b9081526040519081900360200190205460ff16156116775760006014826040516116489190613b17565b908152604080516020928190038301902060010154600090815260139092529020600201544211949350505050565b50600192915050565b50919050565b610b283383836123ee565b6013602052600090815260409020805481906116ac9061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546116d89061402b565b80156117255780601f106116fa57610100808354040283529160200191611725565b820191906000526020600020905b81548152906001019060200180831161170857829003601f168201915b5050505050908060010154908060020154905083565b600e5460405163294cdf0d60e01b81526060916000916001600160a01b039091169063294cdf0d90611771908690600401613bc3565b60206040518083038186803b15801561178957600080fd5b505afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c191906132f8565b9050611081816111fa565b6117d533610baf565b6117f15760405162461bcd60e51b81526004016106bf90613eb0565b6117fd84848484612491565b50505050565b606061180e82611b70565b600082815260116020526040812080546118279061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546118539061402b565b80156118a05780601f10611875576101008083540402835291602001916118a0565b820191906000526020600020905b81548152906001019060200180831161188357829003601f168201915b5050505050905060006118b16124c4565b90508051600014156118c4575092915050565b8151156118f65780826040516020016118de929190613b23565b60405160208183030381529060405292505050919050565b6118ff846124d3565b949350505050565b611910826109e5565b611919816120e1565b61070a8383612171565b60108054610a079061402b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61196733610baf565b6119835760405162461bcd60e51b81526004016106bf90613e10565b600081116119a35760405162461bcd60e51b81526004016106bf90613de0565b600082815260136020526040812080546119c19190610cd09061402b565b90506014816040516119d39190613b17565b9081526040519081900360200190205460ff16611a025760405162461bcd60e51b81526004016106bf90613e90565b82601482604051611a139190613b17565b90815260200160405180910390206001015414611a425760405162461bcd60e51b81526004016106bf90613dc0565b600083815260136020526040902060020154421115611a8357611a6c6108ed6301e1338084611d63565b600084815260136020526040902060020155611abf565b611aac611a946301e1338084611d63565b60008581526013602052604090206002015490611d6f565b6000848152601360205260409020600201555b600083815260136020526040908190206002015490517f88ef5d91ad01b04046836022a7aade9038eb1188da66972705cc01ae3d49f08391611b049186918691613ed0565b60405180910390a1505050565b611b196121d8565b6001600160a01b038116611b3f5760405162461bcd60e51b81526004016106bf90613d30565b611b488161239c565b50565b60006001600160e01b03198216637965db0b60e01b14806105c157506105c182612539565b611b7981612325565b611b485760405162461bcd60e51b81526004016106bf90613e70565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611bca826110d6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c0f8461255e565b90506000611c1c8461255e565b805183519192501115611c34576000925050506105c1565b806020015182602001511415611c4f576001925050506105c1565b805160209283015192909101518190209120149392505050565b6000600080516020614178833981519152611c83816120e1565b6000611c8e600c5490565b9050611c9e600c80546001019055565b611081848261258b565b611cb182612325565b611ccd5760405162461bcd60e51b81526004016106bf90613e00565b601281604051611cdd9190613b17565b9081526040519081900360200190205460ff1615611d0d5760405162461bcd60e51b81526004016106bf90613d80565b60008281526011602090815260409091208251611d2c92840190612db6565b506001601282604051611d3f9190613b17565b908152604051908190036020019020805491151560ff199092169190911790555050565b60006110818284613f7f565b60006110818284613f32565b60606000829050600081516001600160401b03811115611d9d57611d9d61411c565b6040519080825280601f01601f191660200182016040528015611dc7576020820181803683370190505b50905060005b8251811015611ee957604160f81b838281518110611ded57611ded614106565b01602001516001600160f81b03191610801590611e2e5750605a60f81b838281518110611e1c57611e1c614106565b01602001516001600160f81b03191611155b15611e9057828181518110611e4557611e45614106565b602001015160f81c60f81b60f81c6020611e5f9190613f4a565b60f81b828281518110611e7457611e74614106565b60200101906001600160f81b031916908160001a905350611ed7565b828181518110611ea257611ea2614106565b602001015160f81c60f81b828281518110611ebf57611ebf614106565b60200101906001600160f81b031916908160001a9053505b80611ee18161407f565b915050611dcd565b509392505050565b600080611efd83611d7b565b9050601481604051611f0f9190613b17565b9081526040519081900360200190205460ff16611f3e5760405162461bcd60e51b81526004016106bf90613e90565b601481604051611f4e9190613b17565b908152602001604051809103902060010154915050919050565b600080611f74836110d6565b9050806001600160a01b0316846001600160a01b03161480611f9b5750611f9b8185611930565b806118ff5750836001600160a01b0316611fb484610659565b6001600160a01b031614949350505050565b826001600160a01b0316611fd9826110d6565b6001600160a01b031614611fff5760405162461bcd60e51b81526004016106bf90613d40565b6001600160a01b0382166120255760405162461bcd60e51b81526004016106bf90613d90565b6120308383836125a5565b61203b600082611b95565b6001600160a01b0383166000908152600360205260408120805460019290612064908490613f9e565b90915550506001600160a01b0382166000908152600360205260408120805460019290612092908490613f32565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061419883398151915291a4505050565b611b4881336125b0565b6120f5828261153e565b610b28576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561212d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61217b828261153e565b15610b28576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b336121e161152f565b6001600160a01b0316146111615760405162461bcd60e51b81526004016106bf90613e50565b60005b825481101561070a57816040516020016122249190613b17565b6040516020818303038152906040528051906020012083828154811061224c5761224c614106565b906000526020600020016040516020016122669190613b69565b604051602081830303815290604052805190602001201415612313578254839061229290600190613f9e565b815481106122a2576122a2614106565b906000526020600020018382815481106122be576122be614106565b906000526020600020019080546122d49061402b565b6122df929190612e74565b50828054806122f0576122f06140f0565b60019003818190600052602060002001600061230c9190612e3a565b9055505050565b8061231d8161407f565b91505061220a565b6000908152600260205260409020546001600160a01b0316151590565b61234b336109b8565b6123675760405162461bcd60e51b81526004016106bf90613eb0565b611b4881612614565b606081600f604051602001612386929190613aff565b6040516020818303038152906040529050919050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156124205760405162461bcd60e51b81526004016106bf90613da0565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190612484908590613c26565b60405180910390a3505050565b61249c848484611fc6565b6124a8848484846126a9565b6117fd5760405162461bcd60e51b81526004016106bf90613d20565b6060600d80546105d69061402b565b60606124de82611b70565b60006124e86124c4565b905060008151116125085760405180602001604052806000815250611081565b80612512846127b6565b604051602001612523929190613b3b565b6040516020818303038152906040529392505050565b60006001600160e01b0319821663780e9d6360e01b14806105c157506105c1826128b3565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b610b28828260405180602001604052806000815250612903565b61070a838383612936565b6125ba828261153e565b610b28576125d2816001600160a01b031660146129ee565b6125dd8360206129ee565b6040516020016125ee929190613b75565b60408051601f198184030181529082905262461bcd60e51b82526106bf91600401613c6b565b600061261f826110d6565b905061262d816000846125a5565b612638600083611b95565b6001600160a01b0381166000908152600360205260408120805460019290612661908490613f9e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020614198833981519152908390a45050565b60006001600160a01b0384163b156127ab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906126ed903390899088908890600401613bd1565b602060405180830381600087803b15801561270757600080fd5b505af1925050508015612737575060408051601f3d908101601f191682019092526127349181019061327c565b60015b612791573d808015612765576040519150601f19603f3d011682016040523d82523d6000602084013e61276a565b606091505b5080516127895760405162461bcd60e51b81526004016106bf90613d20565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118ff565b506001949350505050565b6060816127da5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561280457806127ee8161407f565b91506127fd9050600a83613f6b565b91506127de565b6000816001600160401b0381111561281e5761281e61411c565b6040519080825280601f01601f191660200182016040528015612848576020820181803683370190505b5090505b84156118ff5761285d600183613f9e565b915061286a600a8661409a565b612875906030613f32565b60f81b81838151811061288a5761288a614106565b60200101906001600160f81b031916908160001a9053506128ac600a86613f6b565b945061284c565b60006001600160e01b031982166380ac58cd60e01b14806128e457506001600160e01b03198216635b5e139f60e01b145b806105c157506301ffc9a760e01b6001600160e01b03198316146105c1565b61290d8383612b59565b61291a60008484846126a9565b61070a5760405162461bcd60e51b81526004016106bf90613d20565b6001600160a01b0383166129915761298c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6129b4565b816001600160a01b0316836001600160a01b0316146129b4576129b48382612c26565b6001600160a01b0382166129cb5761070a81612cc3565b826001600160a01b0316826001600160a01b03161461070a5761070a8282612d72565b606060006129fd836002613f7f565b612a08906002613f32565b6001600160401b03811115612a1f57612a1f61411c565b6040519080825280601f01601f191660200182016040528015612a49576020820181803683370190505b509050600360fc1b81600081518110612a6457612a64614106565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a9357612a93614106565b60200101906001600160f81b031916908160001a9053506000612ab7846002613f7f565b612ac2906001613f32565b90505b6001811115612b3a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612af657612af6614106565b1a60f81b828281518110612b0c57612b0c614106565b60200101906001600160f81b031916908160001a90535060049490941c93612b3381614014565b9050612ac5565b5083156110815760405162461bcd60e51b81526004016106bf90613cf0565b6001600160a01b038216612b7f5760405162461bcd60e51b81526004016106bf90613e30565b612b8881612325565b15612ba55760405162461bcd60e51b81526004016106bf90613d50565b612bb1600083836125a5565b6001600160a01b0382166000908152600360205260408120805460019290612bda908490613f32565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020614198833981519152908290a45050565b60006001612c338461110b565b612c3d9190613f9e565b600083815260076020526040902054909150808214612c90576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612cd590600190613f9e565b60008381526009602052604081205460088054939450909284908110612cfd57612cfd614106565b906000526020600020015490508060088381548110612d1e57612d1e614106565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612d5657612d566140f0565b6001900381819060005260206000200160009055905550505050565b6000612d7d8361110b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612dc29061402b565b90600052602060002090601f016020900481019282612de45760008555612e2a565b82601f10612dfd57805160ff1916838001178555612e2a565b82800160010185558215612e2a579182015b82811115612e2a578251825591602001919060010190612e0f565b50612e36929150612eef565b5090565b508054612e469061402b565b6000825580601f10612e56575050565b601f016020900490600052602060002090810190611b489190612eef565b828054612e809061402b565b90600052602060002090601f016020900481019282612ea25760008555612e2a565b82601f10612eb35780548555612e2a565b82800160010185558215612e2a57600052602060002091601f016020900482015b82811115612e2a578254825591600101919060010190612ed4565b5b80821115612e365760008155600101612ef0565b6000612f17612f1284613f07565b613eeb565b905082815260208101848484011115612f3257612f32600080fd5b611ee9848285613fdc565b80356105c18161413c565b80516105c18161413c565b80356105c181614150565b80356105c181614158565b80356105c18161415e565b80516105c18161415e565b600082601f830112612f9357612f93600080fd5b81356118ff848260208601612f04565b80356105c18161416e565b80516105c181614158565b600060208284031215612fce57612fce600080fd5b60006118ff8484612f3d565b600060208284031215612fef57612fef600080fd5b60006118ff8484612f48565b6000806040838503121561301157613011600080fd5b600061301d8585612f3d565b925050602061302e85828601612f3d565b9150509250929050565b60008060006060848603121561305057613050600080fd5b600061305c8686612f3d565b935050602061306d86828701612f3d565b925050604061307e86828701612f5e565b9150509250925092565b600080600080608085870312156130a1576130a1600080fd5b60006130ad8787612f3d565b94505060206130be87828801612f3d565b93505060406130cf87828801612f5e565b92505060608501356001600160401b038111156130ee576130ee600080fd5b6130fa87828801612f7f565b91505092959194509250565b6000806040838503121561311c5761311c600080fd5b60006131288585612f3d565b925050602061302e85828601612f53565b600080600080600060a0868803121561315457613154600080fd5b60006131608888612f3d565b95505060208601356001600160401b0381111561317f5761317f600080fd5b61318b88828901612f7f565b945050604061319c88828901612f5e565b93505060606131ad88828901612f5e565b92505060808601356001600160401b038111156131cc576131cc600080fd5b6131d888828901612f7f565b9150509295509295909350565b600080604083850312156131fb576131fb600080fd5b60006132078585612f3d565b925050602061302e85828601612f5e565b60006020828403121561322d5761322d600080fd5b60006118ff8484612f5e565b6000806040838503121561324f5761324f600080fd5b600061301d8585612f5e565b60006020828403121561327057613270600080fd5b60006118ff8484612f69565b60006020828403121561329157613291600080fd5b60006118ff8484612f74565b6000602082840312156132b2576132b2600080fd5b60006118ff8484612fa3565b6000602082840312156132d3576132d3600080fd5b81356001600160401b038111156132ec576132ec600080fd5b6118ff84828501612f7f565b60006020828403121561330d5761330d600080fd5b60006118ff8484612fae565b6000806040838503121561332f5761332f600080fd5b60006132078585612f5e565b600061108183836133ca565b61335081613fb5565b82525050565b6000613360825190565b8084526020840193508360208202850161337a8560200190565b8060005b858110156133af5784840389528151613397858261333b565b94506020830160209a909a019992505060010161337e565b5091979650505050505050565b801515613350565b80613350565b60006133d4825190565b8084526020840193506133eb818560208601613fe8565b6133f481614132565b9093019392505050565b6000613408825190565b613416818560208601613fe8565b9290920192915050565b6000815461342d8161402b565b600182168015613444576001811461345557613485565b60ff19831686528186019350613485565b60008581526020902060005b8381101561347d57815488820152600190910190602001613461565b838801955050505b50505092915050565b61335081613fd1565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b6011815260006020820170494e56414c49445f544f4b454e5f55524960781b815291506134c5565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150613538565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150613538565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150613538565b601c81526000602082017b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b815291506134c5565b60138152600060208201724e414d455f414c52454144595f45584953545360681b815291506134c5565b601081526000602082016f5a45524f5f4c454e4754485f4e414d4560801b815291506134c5565b60128152600060208201715552495f414c52454144595f45584953545360701b815291506134c5565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150613538565b601981526000602082017822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b815291506134c5565b600a81526000602082016953414d455f56414c554560b01b815291506134c5565b600d81526000602082016c43414e5f4e4f545f52454e455760981b815291506134c5565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150613538565b601181526000602082017016915493d7d651505494d7d411549253d1607a1b815291506134c5565b600c81526000602082016b5a45524f5f4144445245535360a01b815291506134c5565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150613538565b601781526000602082017622a9219b9918afa1a0a62622a92fa727aa2fa7aba722a960491b815291506134c5565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150613538565b60208082527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373910190815260006134c5565b600f81526000602082016e1513d2d15397d393d517d193d55391608a1b815291506134c5565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006134c5565b6012815260006020820171125111539512551657d393d517d193d5539160721b815291506134c5565b6018815260006020820177115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b815291506134c5565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150613538565b600e81526000602082016d1390535157d393d517d193d5539160921b815291506134c5565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150613538565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150613538565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613538565b6000613b0b82856133fe565b91506118ff8284613420565b600061108182846133fe565b6000613b2f82856133fe565b91506118ff82846133fe565b6000613b4782856133fe565b9150613b5382846133fe565b64173539b7b760d91b81529150600582016118ff565b60006110818284613420565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000613ba182856133fe565b7001034b99036b4b9b9b4b733903937b6329607d1b8152915060118201613b2f565b602081016105c18284613347565b60808101613bdf8287613347565b613bec6020830186613347565b613bf960408301856133c4565b8181036060830152613c0b81846133ca565b9695505050505050565b602080825281016110818184613356565b602081016105c182846133bc565b60408101613c4282856133bc565b61108160208301846133c4565b602081016105c182846133c4565b602081016105c1828461348e565b6020808252810161108181846133ca565b60608082528101613c8d81866133ca565b9050613c9c60208301856133c4565b6118ff60408301846133c4565b60a08082528101613cba81886133ca565b9050613cc960208301876133c4565b613cd660408301866133c4565b613ce360608301856133c4565b613c0b60808301846133bc565b602080825281016105c181613497565b602080825281016105c1816134cc565b602080825281016105c1816134f4565b602080825281016105c18161353f565b602080825281016105c18161358e565b602080825281016105c1816135d1565b602080825281016105c181613613565b602080825281016105c181613646565b602080825281016105c181613670565b602080825281016105c181613697565b602080825281016105c1816136c0565b602080825281016105c181613701565b602080825281016105c181613731565b602080825281016105c181613752565b602080825281016105c181613776565b602080825281016105c1816137bc565b602080825281016105c1816137e4565b602080825281016105c181613807565b602080825281016105c181613852565b602080825281016105c181613880565b602080825281016105c1816138da565b602080825281016105c18161390c565b602080825281016105c181613932565b602080825281016105c181613964565b602080825281016105c18161398d565b602080825281016105c1816139bc565b602080825281016105c1816139fa565b602080825281016105c181613a1f565b602080825281016105c181613a68565b602080825281016105c181613ab3565b60608101613ede82866133c4565b613c9c60208301856133c4565b6000613ef660405190565b9050613f028282614052565b919050565b60006001600160401b03821115613f2057613f2061411c565b613f2982614132565b60200192915050565b60008219821115613f4557613f456140ae565b500190565b600060ff8216915060ff831692508260ff03821115613f4557613f456140ae565b600082613f7a57613f7a6140c4565b500490565b6000816000190483118215151615613f9957613f996140ae565b500290565b600082821015613fb057613fb06140ae565b500390565b60006001600160a01b0382166105c1565b60006105c182613fb5565b60006105c182613fc6565b82818337506000910152565b60005b83811015614003578181015183820152602001613feb565b838111156117fd5750506000910152565b600081614023576140236140ae565b506000190190565b60028104600182168061403f57607f821691505b60208210811415611680576116806140da565b61405b82614132565b81018181106001600160401b03821117156140785761407861411c565b6040525050565b6000600019821415614093576140936140ae565b5060010190565b6000826140a9576140a96140c4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b61414581613fb5565b8114611b4857600080fd5b801515614145565b80614145565b6001600160e01b03198116614145565b61414581613fc656fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b9ba11200fe27766da50b7a4ddcc45879daeb1fd606c5db2e7efd95b4a6e2a0c64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020f5760003560e01c806301ffc9a71461021457806306fdde031461023d578063081812fc14610252578063095ea7b3146102725780630c151fec1461028757806318160ddd146102a75780631e7663bc146102af57806323b872dd146102c2578063248a9ca3146102d55780632d5537b0146102e85780632f2ff15d146102f05780632f745c591461030357806336568abe146103165780633ad3033e146103295780633d44f8e01461033c57806342842e0e1461034f57806342966c681461036257806346b2b087146103755780634cf12d26146103995780634f6ccce7146103ac5780636352211e146103bf57806370a08231146103d2578063715018a6146103e5578063776ce6a1146103ed57806377bed5ed146103f55780637e2285aa146104155780637e669891146104285780638da5cb5b1461044857806391d1485414610450578063938e3d7b1461046357806395d89b4114610476578063965306aa1461047e578063a217fddf14610491578063a22cb46514610499578063b4b5b48f146104ac578063b79636b6146104ce578063b88d4fde146104e1578063bdf29a85146104f4578063c87b56dd1461053a578063d53913931461054d578063d547741f14610562578063e8a3d48514610575578063e985e9c51461057d578063ebfcbee114610590578063f2fde38b146105a3575b600080fd5b61022761022236600461325b565b6105b6565b6040516102349190613c26565b60405180910390f35b6102456105c7565b6040516102349190613c6b565b610265610260366004613218565b610659565b6040516102349190613bc3565b6102856102803660046131e5565b610680565b005b61029a610295366004613139565b61070f565b6040516102349190613c4f565b60085461029a565b61029a6102bd3660046132be565b6109a8565b6102856102d0366004613038565b6109b3565b61029a6102e3366004613218565b6109e5565b6102456109fa565b6102856102fe366004613239565b610a88565b61029a6103113660046131e5565b610aa4565b610285610324366004613239565b610af6565b61028561033736600461329d565b610b2c565b61028561034a366004613319565b610baa565b61028561035d366004613038565b610de2565b610285610370366004613218565b610dfd565b6103886103833660046132be565b610f62565b604051610234959493929190613ca9565b6102456103a73660046132be565b611069565b61029a6103ba366004613218565b611088565b6102656103cd366004613218565b6110d6565b61029a6103e0366004612fb9565b61110b565b61028561114f565b610245611163565b600e54610408906001600160a01b031681565b6040516102349190613c5d565b6102856104233660046132be565b611172565b61043b610436366004613218565b6111fa565b6040516102349190613c15565b61026561152f565b61022761045e366004613239565b61153e565b6102856104713660046132be565b611569565b6102456115f1565b61022761048c3660046132be565b611600565b61029a600081565b6102856104a7366004613106565b611686565b6104bf6104ba366004613218565b611691565b60405161023493929190613c7c565b61043b6104dc366004612fb9565b61173b565b6102856104ef366004613088565b6117cc565b61052c6105023660046132be565b80516020818301810180516014825292820191909301209152805460019091015460ff9091169082565b604051610234929190613c34565b610245610548366004613218565b611803565b61029a60008051602061417883398151915281565b610285610570366004613239565b611907565b610245611923565b61022761058b366004612ffb565b611930565b61028561059e366004613319565b61195e565b6102856105b1366004612fb9565b611b11565b60006105c182611b4b565b92915050565b6060600080546105d69061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546106029061402b565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b5050505050905090565b600061066482611b70565b506000908152600460205260409020546001600160a01b031690565b600061068b826110d6565b9050806001600160a01b0316836001600160a01b031614156106c85760405162461bcd60e51b81526004016106bf90613e80565b60405180910390fd5b336001600160a01b03821614806106e457506106e48133611930565b6107005760405162461bcd60e51b81526004016106bf90613e20565b61070a8383611b95565b505050565b600061071a85611600565b6107365760405162461bcd60e51b81526004016106bf90613d60565b60008551116107575760405162461bcd60e51b81526004016106bf90613d70565b600083116107775760405162461bcd60e51b81526004016106bf90613de0565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e906107a8908890600401613c4f565b60206040518083038186803b1580156107c057600080fd5b505afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190612fda565b6001600160a01b0316141561081f5760405162461bcd60e51b81526004016106bf90613e60565b610846826040518060400160405280600581526020016461723a2f2f60d81b815250611c03565b8061087557506108758260405180604001604052806007815260200166697066733a2f2f60c81b815250611c03565b6108915760405162461bcd60e51b81526004016106bf90613d00565b600061089c87611c69565b90506108a88184611ca8565b600081815260136020908152604090912087516108c792890190612db6565b5060008181526013602052604090206001018590556108f46108ed6301e1338086611d63565b4290611d6f565b60008281526013602052604081206002019190915561091287611d7b565b9050816014826040516109259190613b17565b908152602001604051809103902060010181905550600160148260405161094c9190613b17565b9081526040805160209281900383019020805460ff191693151593909317909255600088815260158252918220805460018101825590835291819020835161099b939190910191840190612db6565b5090979650505050505050565b60006105c182611ef1565b6109be335b82611f68565b6109da5760405162461bcd60e51b81526004016106bf90613eb0565b61070a838383611fc6565b6000908152600b602052604090206001015490565b600f8054610a079061402b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a339061402b565b8015610a805780601f10610a5557610100808354040283529160200191610a80565b820191906000526020600020905b815481529060010190602001808311610a6357829003601f168201915b505050505081565b610a91826109e5565b610a9a816120e1565b61070a83836120eb565b6000610aaf8361110b565b8210610acd5760405162461bcd60e51b81526004016106bf90613d10565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610b1e5760405162461bcd60e51b81526004016106bf90613ec0565b610b288282612171565b5050565b610b346121d8565b6001600160a01b038116610b5a5760405162461bcd60e51b81526004016106bf90613df0565b600e546001600160a01b0382811691161415610b885760405162461bcd60e51b81526004016106bf90613db0565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b610bb5335b83611f68565b610bd15760405162461bcd60e51b81526004016106bf90613e10565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c02908590600401613c4f565b60206040518083038186803b158015610c1a57600080fd5b505afa158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190612fda565b6001600160a01b03161415610c795760405162461bcd60e51b81526004016106bf90613e60565b60008281526013602052604090206001015481811415610cab5760405162461bcd60e51b81526004016106bf90613db0565b6000838152601360205260408120600181018490558054610d539190610cd09061402b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfc9061402b565b8015610d495780601f10610d1e57610100808354040283529160200191610d49565b820191906000526020600020905b815481529060010190602001808311610d2c57829003601f168201915b5050505050611d7b565b6000838152601560205260409020909150610d6e9082612207565b600083815260156020908152604082208054600181018255908352918190208351610da0939190910191840190612db6565b507f49554a718bc4f67010242de90ef62df1a09330859f5fa73030c9eb4f3aada248848385604051610dd493929190613ed0565b60405180910390a150505050565b61070a838383604051806020016040528060008152506117cc565b610e0681612325565b610e225760405162461bcd60e51b81526004016106bf90613e40565b60008181526013602052604081208054610e409190610cd09061402b565b6000838152601360205260408120600181015492935090610e618282612e3a565b60018201600090556002820160009055505082601483604051610e849190613b17565b9081526020016040518091039020600101541415610ecc57601482604051610eac9190613b17565b908152604051908190036020019020805460ff1916815560006001909101555b6000818152601560205260409020610ee49083612207565b60008381526011602052604090208054610efd9061402b565b159050610f59576000838152601160205260408120610f1b91612e3a565b6000838152601160205260408082209051601291610f3891613b69565b908152604051908190036020019020805491151560ff199092169190911790555b61070a83612342565b6060600080600080610f7386611ef1565b9250600060136000858152602001908152602001600020604051806060016040529081600082018054610fa59061402b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd19061402b565b801561101e5780601f10610ff35761010080835404028352916020019161101e565b820191906000526020600020905b81548152906001019060200180831161100157829003601f168201915b5050505050815260200160018201548152602001600282015481525050905061104a8160000151612370565b6020820151604090920151909891975093955092935050504282101590565b6060600061107683611ef1565b905061108181611803565b9392505050565b600061109360085490565b82106110b15760405162461bcd60e51b81526004016106bf90613ea0565b600882815481106110c4576110c4614106565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105c15760405162461bcd60e51b81526004016106bf90613e70565b60006001600160a01b0382166111335760405162461bcd60e51b81526004016106bf90613dd0565b506001600160a01b031660009081526003602052604090205490565b6111576121d8565b611161600061239c565b565b6060600f80546105d69061402b565b61117a6121d8565b8060405160200161118b9190613b17565b60405160208183030381529060405280519060200120600f6040516020016111b39190613b69565b6040516020818303038152906040528051906020012014156111e75760405162461bcd60e51b81526004016106bf90613db0565b8051610b2890600f906020840190612db6565b60606000805b60008481526015602052604090205481101561135957600084815260156020526040812080548390811061123657611236614106565b90600052602060002001805461124b9061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546112779061402b565b80156112c45780601f10611299576101008083540402835291602001916112c4565b820191906000526020600020905b8154815290600101906020018083116112a757829003601f168201915b505050505090506014816040516112db9190613b17565b9081526040519081900360200190205460ff16156113465760006014826040516113059190613b17565b90815260200160405180910390206001015490504260136000838152602001908152602001600020600201541061134457611341846001611d6f565b93505b505b50806113518161407f565b915050611200565b506000816001600160401b038111156113745761137461411c565b6040519080825280602002602001820160405280156113a757816020015b60608152602001906001900390816113925790505b5090506000805b6000868152601560205260409020548110156115255760008681526015602052604081208054839081106113e4576113e4614106565b9060005260206000200180546113f99061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546114259061402b565b80156114725780601f1061144757610100808354040283529160200191611472565b820191906000526020600020905b81548152906001019060200180831161145557829003601f168201915b505050505090506014816040516114899190613b17565b9081526040519081900360200190205460ff16156115125760006014826040516114b39190613b17565b90815260200160405180910390206001015490504260136000838152602001908152602001600020600201541061151057818585815181106114f7576114f7614106565b602090810291909101015261150d846001611d6f565b93505b505b508061151d8161407f565b9150506113ae565b5090949350505050565b600a546001600160a01b031690565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6115716121d8565b806040516020016115829190613b17565b6040516020818303038152906040528051906020012060106040516020016115aa9190613b69565b6040516020818303038152906040528051906020012014156115de5760405162461bcd60e51b81526004016106bf90613db0565b8051610b28906010906020840190612db6565b6060600180546105d69061402b565b60008061160c83611d7b565b905060148160405161161e9190613b17565b9081526040519081900360200190205460ff16156116775760006014826040516116489190613b17565b908152604080516020928190038301902060010154600090815260139092529020600201544211949350505050565b50600192915050565b50919050565b610b283383836123ee565b6013602052600090815260409020805481906116ac9061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546116d89061402b565b80156117255780601f106116fa57610100808354040283529160200191611725565b820191906000526020600020905b81548152906001019060200180831161170857829003601f168201915b5050505050908060010154908060020154905083565b600e5460405163294cdf0d60e01b81526060916000916001600160a01b039091169063294cdf0d90611771908690600401613bc3565b60206040518083038186803b15801561178957600080fd5b505afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c191906132f8565b9050611081816111fa565b6117d533610baf565b6117f15760405162461bcd60e51b81526004016106bf90613eb0565b6117fd84848484612491565b50505050565b606061180e82611b70565b600082815260116020526040812080546118279061402b565b80601f01602080910402602001604051908101604052809291908181526020018280546118539061402b565b80156118a05780601f10611875576101008083540402835291602001916118a0565b820191906000526020600020905b81548152906001019060200180831161188357829003601f168201915b5050505050905060006118b16124c4565b90508051600014156118c4575092915050565b8151156118f65780826040516020016118de929190613b23565b60405160208183030381529060405292505050919050565b6118ff846124d3565b949350505050565b611910826109e5565b611919816120e1565b61070a8383612171565b60108054610a079061402b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61196733610baf565b6119835760405162461bcd60e51b81526004016106bf90613e10565b600081116119a35760405162461bcd60e51b81526004016106bf90613de0565b600082815260136020526040812080546119c19190610cd09061402b565b90506014816040516119d39190613b17565b9081526040519081900360200190205460ff16611a025760405162461bcd60e51b81526004016106bf90613e90565b82601482604051611a139190613b17565b90815260200160405180910390206001015414611a425760405162461bcd60e51b81526004016106bf90613dc0565b600083815260136020526040902060020154421115611a8357611a6c6108ed6301e1338084611d63565b600084815260136020526040902060020155611abf565b611aac611a946301e1338084611d63565b60008581526013602052604090206002015490611d6f565b6000848152601360205260409020600201555b600083815260136020526040908190206002015490517f88ef5d91ad01b04046836022a7aade9038eb1188da66972705cc01ae3d49f08391611b049186918691613ed0565b60405180910390a1505050565b611b196121d8565b6001600160a01b038116611b3f5760405162461bcd60e51b81526004016106bf90613d30565b611b488161239c565b50565b60006001600160e01b03198216637965db0b60e01b14806105c157506105c182612539565b611b7981612325565b611b485760405162461bcd60e51b81526004016106bf90613e70565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611bca826110d6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c0f8461255e565b90506000611c1c8461255e565b805183519192501115611c34576000925050506105c1565b806020015182602001511415611c4f576001925050506105c1565b805160209283015192909101518190209120149392505050565b6000600080516020614178833981519152611c83816120e1565b6000611c8e600c5490565b9050611c9e600c80546001019055565b611081848261258b565b611cb182612325565b611ccd5760405162461bcd60e51b81526004016106bf90613e00565b601281604051611cdd9190613b17565b9081526040519081900360200190205460ff1615611d0d5760405162461bcd60e51b81526004016106bf90613d80565b60008281526011602090815260409091208251611d2c92840190612db6565b506001601282604051611d3f9190613b17565b908152604051908190036020019020805491151560ff199092169190911790555050565b60006110818284613f7f565b60006110818284613f32565b60606000829050600081516001600160401b03811115611d9d57611d9d61411c565b6040519080825280601f01601f191660200182016040528015611dc7576020820181803683370190505b50905060005b8251811015611ee957604160f81b838281518110611ded57611ded614106565b01602001516001600160f81b03191610801590611e2e5750605a60f81b838281518110611e1c57611e1c614106565b01602001516001600160f81b03191611155b15611e9057828181518110611e4557611e45614106565b602001015160f81c60f81b60f81c6020611e5f9190613f4a565b60f81b828281518110611e7457611e74614106565b60200101906001600160f81b031916908160001a905350611ed7565b828181518110611ea257611ea2614106565b602001015160f81c60f81b828281518110611ebf57611ebf614106565b60200101906001600160f81b031916908160001a9053505b80611ee18161407f565b915050611dcd565b509392505050565b600080611efd83611d7b565b9050601481604051611f0f9190613b17565b9081526040519081900360200190205460ff16611f3e5760405162461bcd60e51b81526004016106bf90613e90565b601481604051611f4e9190613b17565b908152602001604051809103902060010154915050919050565b600080611f74836110d6565b9050806001600160a01b0316846001600160a01b03161480611f9b5750611f9b8185611930565b806118ff5750836001600160a01b0316611fb484610659565b6001600160a01b031614949350505050565b826001600160a01b0316611fd9826110d6565b6001600160a01b031614611fff5760405162461bcd60e51b81526004016106bf90613d40565b6001600160a01b0382166120255760405162461bcd60e51b81526004016106bf90613d90565b6120308383836125a5565b61203b600082611b95565b6001600160a01b0383166000908152600360205260408120805460019290612064908490613f9e565b90915550506001600160a01b0382166000908152600360205260408120805460019290612092908490613f32565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061419883398151915291a4505050565b611b4881336125b0565b6120f5828261153e565b610b28576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561212d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61217b828261153e565b15610b28576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b336121e161152f565b6001600160a01b0316146111615760405162461bcd60e51b81526004016106bf90613e50565b60005b825481101561070a57816040516020016122249190613b17565b6040516020818303038152906040528051906020012083828154811061224c5761224c614106565b906000526020600020016040516020016122669190613b69565b604051602081830303815290604052805190602001201415612313578254839061229290600190613f9e565b815481106122a2576122a2614106565b906000526020600020018382815481106122be576122be614106565b906000526020600020019080546122d49061402b565b6122df929190612e74565b50828054806122f0576122f06140f0565b60019003818190600052602060002001600061230c9190612e3a565b9055505050565b8061231d8161407f565b91505061220a565b6000908152600260205260409020546001600160a01b0316151590565b61234b336109b8565b6123675760405162461bcd60e51b81526004016106bf90613eb0565b611b4881612614565b606081600f604051602001612386929190613aff565b6040516020818303038152906040529050919050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156124205760405162461bcd60e51b81526004016106bf90613da0565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190612484908590613c26565b60405180910390a3505050565b61249c848484611fc6565b6124a8848484846126a9565b6117fd5760405162461bcd60e51b81526004016106bf90613d20565b6060600d80546105d69061402b565b60606124de82611b70565b60006124e86124c4565b905060008151116125085760405180602001604052806000815250611081565b80612512846127b6565b604051602001612523929190613b3b565b6040516020818303038152906040529392505050565b60006001600160e01b0319821663780e9d6360e01b14806105c157506105c1826128b3565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b610b28828260405180602001604052806000815250612903565b61070a838383612936565b6125ba828261153e565b610b28576125d2816001600160a01b031660146129ee565b6125dd8360206129ee565b6040516020016125ee929190613b75565b60408051601f198184030181529082905262461bcd60e51b82526106bf91600401613c6b565b600061261f826110d6565b905061262d816000846125a5565b612638600083611b95565b6001600160a01b0381166000908152600360205260408120805460019290612661908490613f9e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020614198833981519152908390a45050565b60006001600160a01b0384163b156127ab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906126ed903390899088908890600401613bd1565b602060405180830381600087803b15801561270757600080fd5b505af1925050508015612737575060408051601f3d908101601f191682019092526127349181019061327c565b60015b612791573d808015612765576040519150601f19603f3d011682016040523d82523d6000602084013e61276a565b606091505b5080516127895760405162461bcd60e51b81526004016106bf90613d20565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118ff565b506001949350505050565b6060816127da5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561280457806127ee8161407f565b91506127fd9050600a83613f6b565b91506127de565b6000816001600160401b0381111561281e5761281e61411c565b6040519080825280601f01601f191660200182016040528015612848576020820181803683370190505b5090505b84156118ff5761285d600183613f9e565b915061286a600a8661409a565b612875906030613f32565b60f81b81838151811061288a5761288a614106565b60200101906001600160f81b031916908160001a9053506128ac600a86613f6b565b945061284c565b60006001600160e01b031982166380ac58cd60e01b14806128e457506001600160e01b03198216635b5e139f60e01b145b806105c157506301ffc9a760e01b6001600160e01b03198316146105c1565b61290d8383612b59565b61291a60008484846126a9565b61070a5760405162461bcd60e51b81526004016106bf90613d20565b6001600160a01b0383166129915761298c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6129b4565b816001600160a01b0316836001600160a01b0316146129b4576129b48382612c26565b6001600160a01b0382166129cb5761070a81612cc3565b826001600160a01b0316826001600160a01b03161461070a5761070a8282612d72565b606060006129fd836002613f7f565b612a08906002613f32565b6001600160401b03811115612a1f57612a1f61411c565b6040519080825280601f01601f191660200182016040528015612a49576020820181803683370190505b509050600360fc1b81600081518110612a6457612a64614106565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a9357612a93614106565b60200101906001600160f81b031916908160001a9053506000612ab7846002613f7f565b612ac2906001613f32565b90505b6001811115612b3a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612af657612af6614106565b1a60f81b828281518110612b0c57612b0c614106565b60200101906001600160f81b031916908160001a90535060049490941c93612b3381614014565b9050612ac5565b5083156110815760405162461bcd60e51b81526004016106bf90613cf0565b6001600160a01b038216612b7f5760405162461bcd60e51b81526004016106bf90613e30565b612b8881612325565b15612ba55760405162461bcd60e51b81526004016106bf90613d50565b612bb1600083836125a5565b6001600160a01b0382166000908152600360205260408120805460019290612bda908490613f32565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020614198833981519152908290a45050565b60006001612c338461110b565b612c3d9190613f9e565b600083815260076020526040902054909150808214612c90576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612cd590600190613f9e565b60008381526009602052604081205460088054939450909284908110612cfd57612cfd614106565b906000526020600020015490508060088381548110612d1e57612d1e614106565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612d5657612d566140f0565b6001900381819060005260206000200160009055905550505050565b6000612d7d8361110b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612dc29061402b565b90600052602060002090601f016020900481019282612de45760008555612e2a565b82601f10612dfd57805160ff1916838001178555612e2a565b82800160010185558215612e2a579182015b82811115612e2a578251825591602001919060010190612e0f565b50612e36929150612eef565b5090565b508054612e469061402b565b6000825580601f10612e56575050565b601f016020900490600052602060002090810190611b489190612eef565b828054612e809061402b565b90600052602060002090601f016020900481019282612ea25760008555612e2a565b82601f10612eb35780548555612e2a565b82800160010185558215612e2a57600052602060002091601f016020900482015b82811115612e2a578254825591600101919060010190612ed4565b5b80821115612e365760008155600101612ef0565b6000612f17612f1284613f07565b613eeb565b905082815260208101848484011115612f3257612f32600080fd5b611ee9848285613fdc565b80356105c18161413c565b80516105c18161413c565b80356105c181614150565b80356105c181614158565b80356105c18161415e565b80516105c18161415e565b600082601f830112612f9357612f93600080fd5b81356118ff848260208601612f04565b80356105c18161416e565b80516105c181614158565b600060208284031215612fce57612fce600080fd5b60006118ff8484612f3d565b600060208284031215612fef57612fef600080fd5b60006118ff8484612f48565b6000806040838503121561301157613011600080fd5b600061301d8585612f3d565b925050602061302e85828601612f3d565b9150509250929050565b60008060006060848603121561305057613050600080fd5b600061305c8686612f3d565b935050602061306d86828701612f3d565b925050604061307e86828701612f5e565b9150509250925092565b600080600080608085870312156130a1576130a1600080fd5b60006130ad8787612f3d565b94505060206130be87828801612f3d565b93505060406130cf87828801612f5e565b92505060608501356001600160401b038111156130ee576130ee600080fd5b6130fa87828801612f7f565b91505092959194509250565b6000806040838503121561311c5761311c600080fd5b60006131288585612f3d565b925050602061302e85828601612f53565b600080600080600060a0868803121561315457613154600080fd5b60006131608888612f3d565b95505060208601356001600160401b0381111561317f5761317f600080fd5b61318b88828901612f7f565b945050604061319c88828901612f5e565b93505060606131ad88828901612f5e565b92505060808601356001600160401b038111156131cc576131cc600080fd5b6131d888828901612f7f565b9150509295509295909350565b600080604083850312156131fb576131fb600080fd5b60006132078585612f3d565b925050602061302e85828601612f5e565b60006020828403121561322d5761322d600080fd5b60006118ff8484612f5e565b6000806040838503121561324f5761324f600080fd5b600061301d8585612f5e565b60006020828403121561327057613270600080fd5b60006118ff8484612f69565b60006020828403121561329157613291600080fd5b60006118ff8484612f74565b6000602082840312156132b2576132b2600080fd5b60006118ff8484612fa3565b6000602082840312156132d3576132d3600080fd5b81356001600160401b038111156132ec576132ec600080fd5b6118ff84828501612f7f565b60006020828403121561330d5761330d600080fd5b60006118ff8484612fae565b6000806040838503121561332f5761332f600080fd5b60006132078585612f5e565b600061108183836133ca565b61335081613fb5565b82525050565b6000613360825190565b8084526020840193508360208202850161337a8560200190565b8060005b858110156133af5784840389528151613397858261333b565b94506020830160209a909a019992505060010161337e565b5091979650505050505050565b801515613350565b80613350565b60006133d4825190565b8084526020840193506133eb818560208601613fe8565b6133f481614132565b9093019392505050565b6000613408825190565b613416818560208601613fe8565b9290920192915050565b6000815461342d8161402b565b600182168015613444576001811461345557613485565b60ff19831686528186019350613485565b60008581526020902060005b8381101561347d57815488820152600190910190602001613461565b838801955050505b50505092915050565b61335081613fd1565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b6011815260006020820170494e56414c49445f544f4b454e5f55524960781b815291506134c5565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150613538565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150613538565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150613538565b601c81526000602082017b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b815291506134c5565b60138152600060208201724e414d455f414c52454144595f45584953545360681b815291506134c5565b601081526000602082016f5a45524f5f4c454e4754485f4e414d4560801b815291506134c5565b60128152600060208201715552495f414c52454144595f45584953545360701b815291506134c5565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150613538565b601981526000602082017822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b815291506134c5565b600a81526000602082016953414d455f56414c554560b01b815291506134c5565b600d81526000602082016c43414e5f4e4f545f52454e455760981b815291506134c5565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150613538565b601181526000602082017016915493d7d651505494d7d411549253d1607a1b815291506134c5565b600c81526000602082016b5a45524f5f4144445245535360a01b815291506134c5565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150613538565b601781526000602082017622a9219b9918afa1a0a62622a92fa727aa2fa7aba722a960491b815291506134c5565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150613538565b60208082527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373910190815260006134c5565b600f81526000602082016e1513d2d15397d393d517d193d55391608a1b815291506134c5565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006134c5565b6012815260006020820171125111539512551657d393d517d193d5539160721b815291506134c5565b6018815260006020820177115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b815291506134c5565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150613538565b600e81526000602082016d1390535157d393d517d193d5539160921b815291506134c5565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150613538565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150613538565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613538565b6000613b0b82856133fe565b91506118ff8284613420565b600061108182846133fe565b6000613b2f82856133fe565b91506118ff82846133fe565b6000613b4782856133fe565b9150613b5382846133fe565b64173539b7b760d91b81529150600582016118ff565b60006110818284613420565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000613ba182856133fe565b7001034b99036b4b9b9b4b733903937b6329607d1b8152915060118201613b2f565b602081016105c18284613347565b60808101613bdf8287613347565b613bec6020830186613347565b613bf960408301856133c4565b8181036060830152613c0b81846133ca565b9695505050505050565b602080825281016110818184613356565b602081016105c182846133bc565b60408101613c4282856133bc565b61108160208301846133c4565b602081016105c182846133c4565b602081016105c1828461348e565b6020808252810161108181846133ca565b60608082528101613c8d81866133ca565b9050613c9c60208301856133c4565b6118ff60408301846133c4565b60a08082528101613cba81886133ca565b9050613cc960208301876133c4565b613cd660408301866133c4565b613ce360608301856133c4565b613c0b60808301846133bc565b602080825281016105c181613497565b602080825281016105c1816134cc565b602080825281016105c1816134f4565b602080825281016105c18161353f565b602080825281016105c18161358e565b602080825281016105c1816135d1565b602080825281016105c181613613565b602080825281016105c181613646565b602080825281016105c181613670565b602080825281016105c181613697565b602080825281016105c1816136c0565b602080825281016105c181613701565b602080825281016105c181613731565b602080825281016105c181613752565b602080825281016105c181613776565b602080825281016105c1816137bc565b602080825281016105c1816137e4565b602080825281016105c181613807565b602080825281016105c181613852565b602080825281016105c181613880565b602080825281016105c1816138da565b602080825281016105c18161390c565b602080825281016105c181613932565b602080825281016105c181613964565b602080825281016105c18161398d565b602080825281016105c1816139bc565b602080825281016105c1816139fa565b602080825281016105c181613a1f565b602080825281016105c181613a68565b602080825281016105c181613ab3565b60608101613ede82866133c4565b613c9c60208301856133c4565b6000613ef660405190565b9050613f028282614052565b919050565b60006001600160401b03821115613f2057613f2061411c565b613f2982614132565b60200192915050565b60008219821115613f4557613f456140ae565b500190565b600060ff8216915060ff831692508260ff03821115613f4557613f456140ae565b600082613f7a57613f7a6140c4565b500490565b6000816000190483118215151615613f9957613f996140ae565b500290565b600082821015613fb057613fb06140ae565b500390565b60006001600160a01b0382166105c1565b60006105c182613fb5565b60006105c182613fc6565b82818337506000910152565b60005b83811015614003578181015183820152602001613feb565b838111156117fd5750506000910152565b600081614023576140236140ae565b506000190190565b60028104600182168061403f57607f821691505b60208210811415611680576116806140da565b61405b82614132565b81018181106001600160401b03821117156140785761407861411c565b6040525050565b6000600019821415614093576140936140ae565b5060010190565b6000826140a9576140a96140c4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b61414581613fb5565b8114611b4857600080fd5b801515614145565b80614145565b6001600160e01b03198116614145565b61414581613fc656fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b9ba11200fe27766da50b7a4ddcc45879daeb1fd606c5db2e7efd95b4a6e2a0c64736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token. It has an extension, and stores all the information about the identity names.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "tokenId": "TokenId of the soul name to burn"
        }
      },
      "constructor": {
        "details": "Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.",
        "params": {
          "_contractURI": "URI of the smart contract metadata",
          "_extension": "Extension of the soul name",
          "_soulboundIdentity": "Address of the Soulbound identity contract",
          "owner": "Owner of the smart contract"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getExtension()": {
        "details": "This function is used to get the extension of the soul name",
        "returns": {
          "_0": "Extension of the soul name"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSoulNames(address)": {
        "details": "This function queries all the identity names of the specified account",
        "params": {
          "owner": "Address of the owner of the identities"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the account"
        }
      },
      "getSoulNames(uint256)": {
        "details": "This function queries all the identity names of the specified identity Id",
        "params": {
          "identityId": "TokenId of the identity"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the identity Id"
        }
      },
      "getTokenData(string)": {
        "details": "This function queries the information of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "active": "`true` if the soul name is active, `false` otherwise",
          "expirationDate": "Expiration date of the soul name",
          "identityId": "Identity id of the soul name",
          "sbtName": "Soul name, in upper/lower case and extension",
          "tokenId": "SoulName id of the soul name"
        }
      },
      "getTokenId(string)": {
        "details": "This function queries the token id of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "SoulName id of the soul name"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isAvailable(string)": {
        "details": "This function queries if a soul name already exists and is in the available state",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "available": "`true` if the soul name is available, `false` otherwise"
        }
      },
      "mint(address,string,uint256,uint256,string)": {
        "details": "The caller can mint more than one name. The soul name must be unique.",
        "params": {
          "_tokenURI": "URI of the NFT",
          "identityId": "TokenId of the soulbound identity that will be pointed from this soul name",
          "name": "Name of the new soul name",
          "to": "Address of the owner of the new soul name",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renewYearsPeriod(uint256,uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "tokenId": "TokenId of the soul name",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "The caller must have the owner to call this function",
        "params": {
          "_contractURI": "URI of the smart contract metadata"
        }
      },
      "setExtension(string)": {
        "details": "The caller must have the owner to call this function",
        "params": {
          "_extension": "Extension of the soul name"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must have the owner to call this function",
        "params": {
          "_soulboundIdentity": "Address of the SoulboundIdentity contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(string)": {
        "details": "This function returns the token URI of the soul name specified by the name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "URI of the soulname associated to a name"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
        "params": {
          "tokenId": "NFT to get the URI of"
        },
        "returns": {
          "_0": "URI of the NFT"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateIdentityId(uint256,uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "identityId": "New TokenId of the soulbound identity that will be pointed from this soul name",
          "tokenId": "TokenId of the soul name"
        }
      }
    },
    "title": "SoulName NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn a soul name"
      },
      "constructor": {
        "notice": "Creates a new SoulName NFT"
      },
      "getExtension()": {
        "notice": "Returns the extension of the soul name"
      },
      "getSoulNames(address)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getSoulNames(uint256)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getTokenData(string)": {
        "notice": "Returns the information of a soul name"
      },
      "getTokenId(string)": {
        "notice": "Returns the token id of a soul name"
      },
      "isAvailable(string)": {
        "notice": "Checks if a soul name is available"
      },
      "mint(address,string,uint256,uint256,string)": {
        "notice": "Mints a new soul name"
      },
      "renewYearsPeriod(uint256,uint256)": {
        "notice": "Update the expiration date of a soul name"
      },
      "setContractURI(string)": {
        "notice": "Sets the URI of the smart contract metadata"
      },
      "setExtension(string)": {
        "notice": "Sets the extension of the soul name"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this soul name"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenURI(string)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "updateIdentityId(uint256,uint256)": {
        "notice": "Update the identity id pointed from a soul name"
      }
    },
    "notice": "SoulName NFT that points to a Soulbound identity token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1537,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1539,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1543,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1547,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1551,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1557,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2557,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2561,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2564,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2568,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 400,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 7767,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)3261_storage"
      },
      {
        "astId": 7769,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 4933,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISoulboundIdentity)7409"
      },
      {
        "astId": 4935,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "extension",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 4937,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 4941,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4945,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_URIs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 4950,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "tokenData",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(TokenData)4967_storage)"
      },
      {
        "astId": 4955,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "nameData",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_struct(NameData)4972_storage)"
      },
      {
        "astId": 4960,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "identityNames",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulboundIdentity)7409": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(NameData)4972_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SoulName.NameData)",
        "numberOfBytes": "32",
        "value": "t_struct(NameData)4972_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)4967_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SoulName.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)4967_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3261_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3260,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NameData)4972_storage": {
        "encoding": "inplace",
        "label": "struct SoulName.NameData",
        "members": [
          {
            "astId": 4969,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4971,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)4967_storage": {
        "encoding": "inplace",
        "label": "struct SoulName.TokenData",
        "members": [
          {
            "astId": 4962,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4964,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "identityId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4966,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}