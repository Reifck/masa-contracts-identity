{
  "address": "0xF8A4cE70d457F6343B77A17806C140bc25575Dc8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIdentityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "IdentityIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpirationDate",
          "type": "uint256"
        }
      ],
      "name": "YearsPeriodRenewed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "sbtName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "renewYearsPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        }
      ],
      "name": "setExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "updateIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5a6eaf848799ad8e7676a66e42d7c45b09a989317cce2812504573df54819b7",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0xF8A4cE70d457F6343B77A17806C140bc25575Dc8",
    "transactionIndex": 0,
    "gasUsed": "3833629",
    "logsBloom": "0x
    "blockHash": "0x94d377e5a878c26914546ff6209a4767f83b7e5f6178b74199f16f7c3d283502",
    "transactionHash": "0xe5a6eaf848799ad8e7676a66e42d7c45b09a989317cce2812504573df54819b7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7721323,
        "transactionHash": "0xe5a6eaf848799ad8e7676a66e42d7c45b09a989317cce2812504573df54819b7",
        "address": "0xF8A4cE70d457F6343B77A17806C140bc25575Dc8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x94d377e5a878c26914546ff6209a4767f83b7e5f6178b74199f16f7c3d283502"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7721323,
        "transactionHash": "0xe5a6eaf848799ad8e7676a66e42d7c45b09a989317cce2812504573df54819b7",
        "address": "0xF8A4cE70d457F6343B77A17806C140bc25575Dc8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x94d377e5a878c26914546ff6209a4767f83b7e5f6178b74199f16f7c3d283502"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7721323,
        "transactionHash": "0xe5a6eaf848799ad8e7676a66e42d7c45b09a989317cce2812504573df54819b7",
        "address": "0xF8A4cE70d457F6343B77A17806C140bc25575Dc8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x94d377e5a878c26914546ff6209a4767f83b7e5f6178b74199f16f7c3d283502"
      }
    ],
    "blockNumber": 7721323,
    "cumulativeGasUsed": "3833629",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "0xe7a4CaFA517cF82e90b42fB1cEE1437f4bb205F2",
    ".soul",
    "ipfs://QmZfLPRvTZax8s1BWN7ZDQRdHfZ7QXKRmeRvg88JW9DMzt"
  ],
  "numDeployments": 1,
  "solcInputHash": "820f86c65d0294b251813f2382387c11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIdentityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"IdentityIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpirationDate\",\"type\":\"uint256\"}],\"name\":\"YearsPeriodRenewed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sbtName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"renewYearsPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"updateIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token. It has an extension, and stores all the information about the identity names.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"tokenId\":\"TokenId of the soul name to burn\"}},\"constructor\":{\"details\":\"Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\",\"params\":{\"_contractURI\":\"URI of the smart contract metadata\",\"_extension\":\"Extension of the soul name\",\"_soulboundIdentity\":\"Address of the Soulbound identity contract\",\"admin\":\"Administrator of the smart contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getExtension()\":{\"details\":\"This function is used to get the extension of the soul name\",\"returns\":{\"_0\":\"Extension of the soul name\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSoulNames(address)\":{\"details\":\"This function queries all the identity names of the specified account\",\"params\":{\"owner\":\"Address of the owner of the identities\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the account\"}},\"getSoulNames(uint256)\":{\"details\":\"This function queries all the identity names of the specified identity Id\",\"params\":{\"identityId\":\"TokenId of the identity\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the identity Id\"}},\"getTokenData(string)\":{\"details\":\"This function queries the information of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"active\":\"`true` if the soul name is active, `false` otherwise\",\"expirationDate\":\"Expiration date of the soul name\",\"identityId\":\"Identity id of the soul name\",\"sbtName\":\"Soul name, in upper/lower case and extension\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isAvailable(string)\":{\"details\":\"This function queries if a soul name already exists and is in the available state\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"available\":\"`true` if the soul name is available, `false` otherwise\"}},\"mint(address,string,uint256,uint256,string)\":{\"details\":\"The caller can mint more than one name. The soul name must be unique.\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"identityId\":\"TokenId of the soulbound identity that will be pointed from this soul name\",\"name\":\"Name of the new soul name\",\"to\":\"Address of the owner of the new soul name\",\"yearsPeriod\":\"Years of validity of the name\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Sets an emergency stop mechanism that can be triggered by an authorized account.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renewYearsPeriod(uint256,uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"tokenId\":\"TokenId of the soul name\",\"yearsPeriod\":\"Years of validity of the name\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_contractURI\":\"URI of the smart contract metadata\"}},\"setExtension(string)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_extension\":\"Extension of the soul name\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_soulboundIdentity\":\"Address of the SoulboundIdentity contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenId\":\"NFT to get the URI of\"},\"returns\":{\"_0\":\"URI of the NFT\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Unsets an emergency stop mechanism. It can be triggered by an authorized account.\"},\"updateIdentityId(uint256,uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"identityId\":\"New TokenId of the soulbound identity that will be pointed from this soul name\",\"tokenId\":\"TokenId of the soul name\"}}},\"title\":\"SoulName NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn a soul name\"},\"constructor\":{\"notice\":\"Creates a new SoulName NFT\"},\"getExtension()\":{\"notice\":\"Returns the extension of the soul name\"},\"getSoulNames(address)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getSoulNames(uint256)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getTokenData(string)\":{\"notice\":\"Returns the information of a soul name\"},\"isAvailable(string)\":{\"notice\":\"Checks if a soul name is available\"},\"mint(address,string,uint256,uint256,string)\":{\"notice\":\"Mints a new soul name\"},\"pause()\":{\"notice\":\"Pauses the operations in the smart contract\"},\"renewYearsPeriod(uint256,uint256)\":{\"notice\":\"Update the expiration date of a soul name\"},\"setContractURI(string)\":{\"notice\":\"Sets the URI of the smart contract metadata\"},\"setExtension(string)\":{\"notice\":\"Sets the extension of the soul name\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this soul name\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"unpause()\":{\"notice\":\"Unpauses the operations in the smart contract\"},\"updateIdentityId(uint256,uint256)\":{\"notice\":\"Update the identity id pointed from a soul name\"}},\"notice\":\"SoulName NFT that points to a Soulbound identity token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulName.sol\":\"SoulName\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./libraries/Utils.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/NFT.sol\\\";\\n\\n/// @title SoulName NFT\\n/// @author Masa Finance\\n/// @notice SoulName NFT that points to a Soulbound identity token\\n/// @dev SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token.\\n/// It has an extension, and stores all the information about the identity names.\\ncontract SoulName is NFT, ISoulName {\\n    /* ========== STATE VARIABLES ========== */\\n    using SafeMath for uint256;\\n\\n    uint256 constant YEAR = 31536000; // 60 seconds * 60 minutes * 24 hours * 365 days\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n    string public extension; // suffix of the names (.sol?)\\n\\n    // contractURI() points to the smart contract metadata\\n    // see https://docs.opensea.io/docs/contract-level-metadata\\n    string public contractURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    mapping(uint256 => TokenData) public tokenData; // used to store the data of the token id\\n    mapping(string => NameData) public nameData; // stores the token id of the current active soul name\\n    mapping(uint256 => string[]) identityNames; // register of all names associated to an identityId\\n\\n    struct TokenData {\\n        string name; // Name with lowercase and uppercase\\n        uint256 identityId;\\n        uint256 expirationDate;\\n    }\\n\\n    struct NameData {\\n        bool exists;\\n        uint256 tokenId;\\n    }\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new SoulName NFT\\n    /// @dev Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param _soulboundIdentity Address of the Soulbound identity contract\\n    /// @param _extension Extension of the soul name\\n    /// @param _contractURI URI of the smart contract metadata\\n    constructor(\\n        address admin,\\n        ISoulboundIdentity _soulboundIdentity,\\n        string memory _extension,\\n        string memory _contractURI\\n    ) NFT(admin, \\\"Masa Soul Name\\\", \\\"MSN\\\", \\\"\\\") {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        soulboundIdentity = _soulboundIdentity;\\n        extension = _extension;\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(ISoulboundIdentity _soulboundIdentity)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulboundIdentity != _soulboundIdentity, \\\"SAME_VALUE\\\");\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the extension of the soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _extension Extension of the soul name\\n    function setExtension(string memory _extension)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            keccak256(abi.encodePacked((extension))) !=\\n                keccak256(abi.encodePacked((_extension))),\\n            \\\"SAME_VALUE\\\"\\n        );\\n        extension = _extension;\\n    }\\n\\n    /// @notice Sets the URI of the smart contract metadata\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _contractURI URI of the smart contract metadata\\n    function setContractURI(string memory _contractURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            keccak256(abi.encodePacked((contractURI))) !=\\n                keccak256(abi.encodePacked((_contractURI))),\\n            \\\"SAME_VALUE\\\"\\n        );\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new soul name\\n    /// @dev The caller can mint more than one name. The soul name must be unique.\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param identityId TokenId of the soulbound identity that will be pointed from this soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) public override returns (uint256) {\\n        require(!isAvailable(name), \\\"NAME_ALREADY_EXISTS\\\");\\n        require(bytes(name).length > 0, \\\"ZERO_LENGTH_NAME\\\");\\n        require(yearsPeriod > 0, \\\"ZERO_YEARS_PERIOD\\\");\\n        require(\\n            soulboundIdentity.ownerOf(identityId) != address(0),\\n            \\\"IDENTITY_NOT_FOUND\\\"\\n        );\\n\\n        uint256 tokenId = _mintWithCounter(to);\\n        _setTokenURI(tokenId, _tokenURI);\\n\\n        tokenData[tokenId].name = name;\\n        tokenData[tokenId].identityId = identityId;\\n        tokenData[tokenId].expirationDate = block.timestamp.add(\\n            YEAR.mul(yearsPeriod)\\n        );\\n\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        nameData[lowercaseName].tokenId = tokenId;\\n        nameData[lowercaseName].exists = true;\\n\\n        identityNames[identityId].push(lowercaseName);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Update the identity id pointed from a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param identityId New TokenId of the soulbound identity that will be pointed from this soul name\\n    function updateIdentityId(uint256 tokenId, uint256 identityId) public {\\n        // ERC721: caller is not token owner nor approved\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721_CALLER_NOT_OWNER\\\"\\n        );\\n        require(\\n            soulboundIdentity.ownerOf(identityId) != address(0),\\n            \\\"IDENTITY_NOT_FOUND\\\"\\n        );\\n\\n        uint256 oldIdentityId = tokenData[tokenId].identityId;\\n        require(identityId != oldIdentityId, \\\"SAME_VALUE\\\");\\n\\n        // change value from soulNames\\n        tokenData[tokenId].identityId = identityId;\\n\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        // remove name from identityNames[oldIdentityId]\\n        Utils.removeStringFromArray(\\n            identityNames[oldIdentityId],\\n            lowercaseName\\n        );\\n\\n        // add name to identityNames[identityId]\\n        identityNames[identityId].push(lowercaseName);\\n\\n        emit IdentityIdUpdated(tokenId, oldIdentityId, identityId);\\n    }\\n\\n    /// @notice Update the expiration date of a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    function renewYearsPeriod(uint256 tokenId, uint256 yearsPeriod) public {\\n        // ERC721: caller is not token owner nor approved\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721_CALLER_NOT_OWNER\\\"\\n        );\\n        require(yearsPeriod > 0, \\\"ZERO_YEARS_PERIOD\\\");\\n\\n        // check that the last registered tokenId for that name is the current token\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        require(nameData[lowercaseName].exists, \\\"NAME_NOT_FOUND\\\");\\n        require(nameData[lowercaseName].tokenId == tokenId, \\\"CAN_NOT_RENEW\\\");\\n\\n        // check if the name is expired\\n        if (tokenData[tokenId].expirationDate < block.timestamp) {\\n            tokenData[tokenId].expirationDate = block.timestamp.add(\\n                YEAR.mul(yearsPeriod)\\n            );\\n        } else {\\n            tokenData[tokenId].expirationDate = tokenData[tokenId]\\n                .expirationDate\\n                .add(YEAR.mul(yearsPeriod));\\n        }\\n\\n        emit YearsPeriodRenewed(\\n            tokenId,\\n            yearsPeriod,\\n            tokenData[tokenId].expirationDate\\n        );\\n    }\\n\\n    /// @notice Burn a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name to burn\\n    function burn(uint256 tokenId) public override {\\n        require(_exists(tokenId), \\\"TOKEN_NOT_FOUND\\\");\\n\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        uint256 identityId = tokenData[tokenId].identityId;\\n\\n        // remove info from tokenIdName and tokenData\\n        delete tokenData[tokenId];\\n\\n        // if the last owner of the name is burning it, remove the name from nameData\\n        if (nameData[lowercaseName].tokenId == tokenId) {\\n            delete nameData[lowercaseName];\\n        }\\n        Utils.removeStringFromArray(identityNames[identityId], lowercaseName);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        super.burn(tokenId);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function is used to get the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() external view override returns (string memory) {\\n        return extension;\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(string memory name)\\n        public\\n        view\\n        override\\n        returns (bool available)\\n    {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        if (nameData[lowercaseName].exists) {\\n            uint256 tokenId = nameData[lowercaseName].tokenId;\\n            return tokenData[tokenId].expirationDate >= block.timestamp;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return identityId Identity id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        override\\n        returns (\\n            string memory sbtName,\\n            uint256 identityId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n\\n        require(nameData[lowercaseName].exists, \\\"NAME_NOT_FOUND\\\");\\n\\n        uint256 tokenId = nameData[lowercaseName].tokenId;\\n\\n        TokenData memory _tokenData = tokenData[tokenId];\\n        return (\\n            _getName(_tokenData.name),\\n            _tokenData.identityId,\\n            _tokenData.expirationDate,\\n            _tokenData.expirationDate >= block.timestamp\\n        );\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        // return identity id if exists\\n        uint256 identityId = soulboundIdentity.tokenOfOwner(owner);\\n\\n        return getSoulNames(identityId);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param identityId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(uint256 identityId)\\n        public\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        uint256 results;\\n        for (uint256 i = 0; i < identityNames[identityId].length; i++) {\\n            string memory lowercaseName = identityNames[identityId][i];\\n\\n            if (nameData[lowercaseName].exists) {\\n                uint256 tokenId = nameData[lowercaseName].tokenId;\\n                if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                    results = results.add(1);\\n                }\\n            }\\n        }\\n\\n        string[] memory _sbtNames = new string[](results);\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < identityNames[identityId].length; i++) {\\n            string memory lowercaseName = identityNames[identityId][i];\\n\\n            if (nameData[lowercaseName].exists) {\\n                uint256 tokenId = nameData[lowercaseName].tokenId;\\n                if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                    _sbtNames[index] = lowercaseName;\\n                    index = index.add(1);\\n                }\\n            }\\n        }\\n\\n        // return identity names if exists and are active\\n        return _sbtNames;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _getName(string memory name) private view returns (string memory) {\\n        return string(bytes.concat(bytes(name), bytes(extension)));\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI set of nonexistent token\\\"\\n        );\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event IdentityIdUpdated(\\n        uint256 tokenId,\\n        uint256 oldIdentityId,\\n        uint256 identityId\\n    );\\n\\n    event YearsPeriodRenewed(\\n        uint256 tokenId,\\n        uint256 yearsPeriod,\\n        uint256 newExpirationDate\\n    );\\n}\\n\",\"keccak256\":\"0xbd1095d042bb155c57e2135b28bbafddd356f2d9590fbd07c014094bd138b79e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(string memory name)\\n        external\\n        view\\n        returns (bool available);\\n\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            uint256 identityId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x2bd9c823014b8a3fd091030d02db90bbee4d55d35b5e4aac32340dbbcd2a3a8d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is IERC721 {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x82463dcf72fdcb13f71bafd5071b75e10981ff7b3fd52fd78c95e2352df74043\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\n/// @title Utilities library for Masa Contracts Identity repository\\n/// @author Masa Finance\\n/// @notice Library of utilities for Masa Contracts Identity repository\\nlibrary Utils {\\n    function toLowerCase(string memory _str)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n\\n    function removeStringFromArray(string[] storage array, string memory name)\\n        internal\\n    {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked((array[i]))) ==\\n                keccak256(abi.encodePacked((name)))\\n            ) {\\n                array[i] = array[array.length - 1];\\n                array.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9886d2a5e27efcf81a00ceb05c1ad9631579cd380b5a1f4e98f66ab0e5272bf2\",\"license\":\"Apache-2.0\"},\"contracts/tokens/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title NFT\\n/// @author Masa Finance\\n/// @notice Non-fungible token is a token that is not fungible.\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n/// that inherits from {ERC721Enumerable}, {Pausable}, {AccessControl} and {ERC721Burnable}.\\nabstract contract NFT is\\n    ERC721,\\n    ERC721Enumerable,\\n    Pausable,\\n    AccessControl,\\n    ERC721Burnable\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private _baseTokenURI;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new NFT\\n    /// @dev Creates a new Non-fungible token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(PAUSER_ROLE, admin);\\n        _grantRole(MINTER_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Pauses the operations in the smart contract\\n    /// @dev Sets an emergency stop mechanism that can be triggered by an authorized account.\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the operations in the smart contract\\n    /// @dev Unsets an emergency stop mechanism. It can be triggered by an authorized account.\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function _mintWithCounter(address to)\\n        internal\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x5c5e930ac49bd422eb4d5360fa9e12dd8959d31dfd24ff61a676524302580a43\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200458c3803806200458c8339810160408190526200003491620003a9565b604080518082018252600e81526d4d61736120536f756c204e616d6560901b602080830191825283518085018552600381526226a9a760e91b818301528451918201909452600080825283518995938592859262000093929062000270565b508051620000a990600190602084019062000270565b5050600a805460ff1916905550620000c3600085620001b8565b620000ef7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a85620001b8565b6200011b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a685620001b8565b80516200013090600d90602084019062000270565b50505050506001600160a01b038316620001675760405162461bcd60e51b81526004016200015e906200044f565b60405180910390fd5b600e80546001600160a01b0319166001600160a01b03851617905581516200019790600f90602085019062000270565b508051620001ad90601090602084019062000270565b5050505050620005d9565b620001c4828262000243565b6200023f576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001fe3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b8280546200027e906200051b565b90600052602060002090601f016020900481019282620002a25760008555620002ed565b82601f10620002bd57805160ff1916838001178555620002ed565b82800160010185558215620002ed579182015b82811115620002ed578251825591602001919060010190620002d0565b50620002fb929150620002ff565b5090565b5b80821115620002fb576000815560010162000300565b60006200032d620003278462000499565b6200047a565b9050828152602081018484840111156200034a576200034a600080fd5b62000357848285620004e8565b509392505050565b80516200026a81620005b4565b80516200026a81620005ce565b600082601f8301126200038f576200038f600080fd5b8151620003a184826020860162000316565b949350505050565b60008060008060808587031215620003c457620003c4600080fd5b6000620003d287876200035f565b9450506020620003e5878288016200036c565b93505060408501516001600160401b03811115620004065762000406600080fd5b620004148782880162000379565b92505060608501516001600160401b03811115620004355762000435600080fd5b620004438782880162000379565b91505092959194509250565b602080825281016200026a81600c81526b5a45524f5f4144445245535360a01b602082015260400190565b60006200048660405190565b90506200049482826200054c565b919050565b60006001600160401b03821115620004b557620004b562000594565b620004c082620005aa565b60200192915050565b60006001600160a01b0382166200026a565b60006200026a82620004c9565b60005b8381101562000505578181015183820152602001620004eb565b8381111562000515576000848401525b50505050565b6002810460018216806200053057607f821691505b602082108114156200054657620005466200057e565b50919050565b6200055782620005aa565b81018181106001600160401b038211171562000577576200057762000594565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b620005bf81620004c9565b8114620005cb57600080fd5b50565b620005bf81620004db565b613fa380620005e96000396000f3fe608060405234801561001057600080fd5b50600436106102045760003560e01c806301ffc9a71461020957806306fdde0314610232578063081812fc14610247578063095ea7b3146102675780630c151fec1461027c57806318160ddd1461029c57806323b872dd146102a4578063248a9ca3146102b75780632d5537b0146102ca5780632f2ff15d146102d25780632f745c59146102e557806336568abe146102f85780633ad3033e1461030b5780633d44f8e01461031e5780633f4ba83a1461033157806342842e0e1461033957806342966c681461034c57806346b2b0871461035f5780634f6ccce7146103825780635c975abb146103955780636352211e146103a057806370a08231146103b3578063776ce6a1146103c657806377bed5ed146103ce5780637e2285aa146103ee5780637e669891146104015780638456cb591461042157806391d1485414610429578063938e3d7b1461043c57806395d89b411461044f578063965306aa14610457578063a217fddf1461046a578063a22cb46514610472578063b4b5b48f14610485578063b79636b6146104a7578063b88d4fde146104ba578063bdf29a85146104cd578063c87b56dd14610513578063d539139314610526578063d547741f1461053b578063e63ab1e91461054e578063e8a3d48514610563578063e985e9c51461056b578063ebfcbee11461057e575b600080fd5b61021c610217366004613092565b610591565b60405161022991906139e9565b60405180910390f35b61023a6105a2565b6040516102299190613a2e565b61025a61025536600461304f565b610634565b6040516102299190613986565b61027a61027536600461301c565b61065b565b005b61028f61028a366004612f70565b6106ea565b6040516102299190613a12565b60085461028f565b61027a6102b2366004612e6f565b610914565b61028f6102c536600461304f565b610946565b61023a61095b565b61027a6102e0366004613070565b6109e9565b61028f6102f336600461301c565b610a05565b61027a610306366004613070565b610a57565b61027a6103193660046130d4565b610a8d565b61027a61032c366004613150565b610b0f565b61027a610d47565b61027a610347366004612e6f565b610d6a565b61027a61035a36600461304f565b610d85565b61037261036d3660046130f5565b610eac565b6040516102299493929190613a6c565b61028f61039036600461304f565b611018565b600a5460ff1661021c565b61025a6103ae36600461304f565b611066565b61028f6103c1366004612df0565b61109b565b61023a6110df565b600e546103e1906001600160a01b031681565b6040516102299190613a20565b61027a6103fc3660046130f5565b6110ee565b61041461040f36600461304f565b611179565b60405161022991906139d8565b61027a6114ae565b61021c610437366004613070565b6114ce565b61027a61044a3660046130f5565b6114f9565b61023a611584565b61021c6104653660046130f5565b611593565b61028f600081565b61027a610480366004612f3d565b61161a565b61049861049336600461304f565b611625565b60405161022993929190613a3f565b6104146104b5366004612df0565b6116cf565b61027a6104c8366004612ebf565b611767565b6105056104db3660046130f5565b80516020818301810180516013825292820191909301209152805460019091015460ff9091169082565b6040516102299291906139f7565b61023a61052136600461304f565b61179e565b61028f600080516020613f2e83398151915281565b61027a610549366004613070565b6118a2565b61028f600080516020613f0e83398151915281565b61023a6118be565b61021c610579366004612e32565b6118cb565b61027a61058c366004613150565b6118f9565b600061059c82611aac565b92915050565b6060600080546105b190613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546105dd90613dc1565b801561062a5780601f106105ff5761010080835404028352916020019161062a565b820191906000526020600020905b81548152906001019060200180831161060d57829003601f168201915b5050505050905090565b600061063f82611ad1565b506000908152600460205260409020546001600160a01b031690565b600061066682611066565b9050806001600160a01b0316836001600160a01b031614156106a35760405162461bcd60e51b815260040161069a90613c16565b60405180910390fd5b336001600160a01b03821614806106bf57506106bf81336118cb565b6106db5760405162461bcd60e51b815260040161069a90613bc6565b6106e58383611af6565b505050565b60006106f585611593565b156107125760405162461bcd60e51b815260040161069a90613b06565b60008551116107335760405162461bcd60e51b815260040161069a90613b16565b600083116107535760405162461bcd60e51b815260040161069a90613b86565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610784908890600401613a12565b60206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190612e11565b6001600160a01b031614156107fb5760405162461bcd60e51b815260040161069a90613bf6565b600061080687611b64565b90506108128184611ba3565b6000818152601260209081526040909120875161083192890190612bed565b50600081815260126020526040902060010185905561085e6108576301e1338086611be7565b4290611bf3565b60008281526012602052604081206002019190915561087c87611bff565b90508160138260405161088f91906138da565b90815260200160405180910390206001018190555060016013826040516108b691906138da565b9081526040805160209281900383019020805460ff1916931515939093179092556000888152601482529182208054600181018255908352918190208351610905939190910191840190612bed565b50909150505b95945050505050565b61091f335b82611d75565b61093b5760405162461bcd60e51b815260040161069a90613c46565b6106e5838383611dd3565b6000908152600b602052604090206001015490565b600f805461096890613dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461099490613dc1565b80156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050505081565b6109f282610946565b6109fb81611eee565b6106e58383611ef8565b6000610a108361109b565b8210610a2e5760405162461bcd60e51b815260040161069a90613ac6565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610a7f5760405162461bcd60e51b815260040161069a90613c56565b610a898282611f7e565b5050565b6000610a9881611eee565b6001600160a01b038216610abe5760405162461bcd60e51b815260040161069a90613b96565b600e546001600160a01b0383811691161415610aec5760405162461bcd60e51b815260040161069a90613b46565b50600e80546001600160a01b0319166001600160a01b0392909216919091179055565b610b1a335b83611d75565b610b365760405162461bcd60e51b815260040161069a90613bb6565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610b67908590600401613a12565b60206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190612e11565b6001600160a01b03161415610bde5760405162461bcd60e51b815260040161069a90613bf6565b60008281526012602052604090206001015481811415610c105760405162461bcd60e51b815260040161069a90613b46565b6000838152601260205260408120600181018490558054610cb89190610c3590613dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6190613dc1565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b5050505050611bff565b6000838152601460205260409020909150610cd39082611fe5565b600083815260146020908152604082208054600181018255908352918190208351610d05939190910191840190612bed565b507f49554a718bc4f67010242de90ef62df1a09330859f5fa73030c9eb4f3aada248848385604051610d3993929190613c66565b60405180910390a150505050565b600080516020613f0e833981519152610d5f81611eee565b610d67612103565b50565b6106e583838360405180602001604052806000815250611767565b610d8e8161214f565b610daa5760405162461bcd60e51b815260040161069a90613be6565b60008181526012602052604081208054610dc89190610c3590613dc1565b6000838152601260205260408120600181015492935090610de98282612c71565b60018201600090556002820160009055505082601383604051610e0c91906138da565b9081526020016040518091039020600101541415610e5457601382604051610e3491906138da565b908152604051908190036020019020805460ff1916815560006001909101555b6000818152601460205260409020610e6c9083611fe5565b60008381526011602052604090208054610e8590613dc1565b159050610ea3576000838152601160205260408120610ea391612c71565b6106e58361216c565b6060600080600080610ebd86611bff565b9050601381604051610ecf91906138da565b9081526040519081900360200190205460ff16610efe5760405162461bcd60e51b815260040161069a90613c26565b6000601382604051610f1091906138da565b9081526020016040518091039020600101549050600060126000838152602001908152602001600020604051806060016040529081600082018054610f5490613dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8090613dc1565b8015610fcd5780601f10610fa257610100808354040283529160200191610fcd565b820191906000526020600020905b815481529060010190602001808311610fb057829003601f168201915b50505050508152602001600182015481526020016002820154815250509050610ff9816000015161219a565b6020820151604090920151909991985096504287101595509350505050565b600061102360085490565b82106110415760405162461bcd60e51b815260040161069a90613c36565b6008828154811061105457611054613e9c565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061059c5760405162461bcd60e51b815260040161069a90613c06565b60006001600160a01b0382166110c35760405162461bcd60e51b815260040161069a90613b76565b506001600160a01b031660009081526003602052604090205490565b6060600f80546105b190613dc1565b60006110f981611eee565b8160405160200161110a91906138da565b60405160208183030381529060405280519060200120600f604051602001611132919061392c565b6040516020818303038152906040528051906020012014156111665760405162461bcd60e51b815260040161069a90613b46565b81516106e590600f906020850190612bed565b60606000805b6000848152601460205260409020548110156112d85760008481526014602052604081208054839081106111b5576111b5613e9c565b9060005260206000200180546111ca90613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546111f690613dc1565b80156112435780601f1061121857610100808354040283529160200191611243565b820191906000526020600020905b81548152906001019060200180831161122657829003601f168201915b5050505050905060138160405161125a91906138da565b9081526040519081900360200190205460ff16156112c557600060138260405161128491906138da565b9081526020016040518091039020600101549050426012600083815260200190815260200160002060020154106112c3576112c0846001611bf3565b93505b505b50806112d081613e15565b91505061117f565b506000816001600160401b038111156112f3576112f3613eb2565b60405190808252806020026020018201604052801561132657816020015b60608152602001906001900390816113115790505b5090506000805b6000868152601460205260409020548110156114a457600086815260146020526040812080548390811061136357611363613e9c565b90600052602060002001805461137890613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546113a490613dc1565b80156113f15780601f106113c6576101008083540402835291602001916113f1565b820191906000526020600020905b8154815290600101906020018083116113d457829003601f168201915b5050505050905060138160405161140891906138da565b9081526040519081900360200190205460ff161561149157600060138260405161143291906138da565b90815260200160405180910390206001015490504260126000838152602001908152602001600020600201541061148f578185858151811061147657611476613e9c565b602090810291909101015261148c846001611bf3565b93505b505b508061149c81613e15565b91505061132d565b5090949350505050565b600080516020613f0e8339815191526114c681611eee565b610d676121c6565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061150481611eee565b8160405160200161151591906138da565b60405160208183030381529060405280519060200120601060405160200161153d919061392c565b6040516020818303038152906040528051906020012014156115715760405162461bcd60e51b815260040161069a90613b46565b81516106e5906010906020850190612bed565b6060600180546105b190613dc1565b60008061159f83611bff565b90506013816040516115b191906138da565b9081526040519081900360200190205460ff161561160b5760006013826040516115db91906138da565b90815260408051602092819003830190206001015460009081526012909252902060020154421115949350505050565b50600092915050565b50919050565b610a89338383612203565b60126020526000908152604090208054819061164090613dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461166c90613dc1565b80156116b95780601f1061168e576101008083540402835291602001916116b9565b820191906000526020600020905b81548152906001019060200180831161169c57829003601f168201915b5050505050908060010154908060020154905083565b600e5460405163294cdf0d60e01b81526060916000916001600160a01b039091169063294cdf0d90611705908690600401613986565b60206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611755919061312f565b905061176081611179565b9392505050565b61177033610b14565b61178c5760405162461bcd60e51b815260040161069a90613c46565b611798848484846122a6565b50505050565b60606117a982611ad1565b600082815260116020526040812080546117c290613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546117ee90613dc1565b801561183b5780601f106118105761010080835404028352916020019161183b565b820191906000526020600020905b81548152906001019060200180831161181e57829003601f168201915b50505050509050600061184c6122d9565b905080516000141561185f575092915050565b8151156118915780826040516020016118799291906138e6565b60405160208183030381529060405292505050919050565b61189a846122e8565b949350505050565b6118ab82610946565b6118b481611eee565b6106e58383611f7e565b6010805461096890613dc1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61190233610b14565b61191e5760405162461bcd60e51b815260040161069a90613bb6565b6000811161193e5760405162461bcd60e51b815260040161069a90613b86565b6000828152601260205260408120805461195c9190610c3590613dc1565b905060138160405161196e91906138da565b9081526040519081900360200190205460ff1661199d5760405162461bcd60e51b815260040161069a90613c26565b826013826040516119ae91906138da565b908152602001604051809103902060010154146119dd5760405162461bcd60e51b815260040161069a90613b56565b600083815260126020526040902060020154421115611a1e57611a076108576301e1338084611be7565b600084815260126020526040902060020155611a5a565b611a47611a2f6301e1338084611be7565b60008581526012602052604090206002015490611bf3565b6000848152601260205260409020600201555b600083815260126020526040908190206002015490517f88ef5d91ad01b04046836022a7aade9038eb1188da66972705cc01ae3d49f08391611a9f9186918691613c66565b60405180910390a1505050565b60006001600160e01b03198216637965db0b60e01b148061059c575061059c8261234e565b611ada8161214f565b610d675760405162461bcd60e51b815260040161069a90613c06565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b2b82611066565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600080516020613f2e833981519152611b7e81611eee565b6000611b89600c5490565b9050611b99600c80546001019055565b6117608482612373565b611bac8261214f565b611bc85760405162461bcd60e51b815260040161069a90613ba6565b600082815260116020908152604090912082516106e592840190612bed565b60006117608284613d15565b60006117608284613cc8565b60606000829050600081516001600160401b03811115611c2157611c21613eb2565b6040519080825280601f01601f191660200182016040528015611c4b576020820181803683370190505b50905060005b8251811015611d6d57604160f81b838281518110611c7157611c71613e9c565b01602001516001600160f81b03191610801590611cb25750605a60f81b838281518110611ca057611ca0613e9c565b01602001516001600160f81b03191611155b15611d1457828181518110611cc957611cc9613e9c565b602001015160f81c60f81b60f81c6020611ce39190613ce0565b60f81b828281518110611cf857611cf8613e9c565b60200101906001600160f81b031916908160001a905350611d5b565b828181518110611d2657611d26613e9c565b602001015160f81c60f81b828281518110611d4357611d43613e9c565b60200101906001600160f81b031916908160001a9053505b80611d6581613e15565b915050611c51565b509392505050565b600080611d8183611066565b9050806001600160a01b0316846001600160a01b03161480611da85750611da881856118cb565b8061189a5750836001600160a01b0316611dc184610634565b6001600160a01b031614949350505050565b826001600160a01b0316611de682611066565b6001600160a01b031614611e0c5760405162461bcd60e51b815260040161069a90613ae6565b6001600160a01b038216611e325760405162461bcd60e51b815260040161069a90613b26565b611e3d83838361238d565b611e48600082611af6565b6001600160a01b0383166000908152600360205260408120805460019290611e71908490613d34565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e9f908490613cc8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020613f4e83398151915291a4505050565b610d6781336123a0565b611f0282826114ce565b610a89576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f3a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f8882826114ce565b15610a89576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60005b82548110156106e5578160405160200161200291906138da565b6040516020818303038152906040528051906020012083828154811061202a5761202a613e9c565b90600052602060002001604051602001612044919061392c565b6040516020818303038152906040528051906020012014156120f1578254839061207090600190613d34565b8154811061208057612080613e9c565b9060005260206000200183828154811061209c5761209c613e9c565b906000526020600020019080546120b290613dc1565b6120bd929190612cab565b50828054806120ce576120ce613e86565b6001900381819060005260206000200160006120ea9190612c71565b9055505050565b806120fb81613e15565b915050611fe8565b61210b612404565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516121459190613986565b60405180910390a1565b6000908152600260205260409020546001600160a01b0316151590565b61217533610919565b6121915760405162461bcd60e51b815260040161069a90613c46565b610d6781612428565b606081600f6040516020016121b09291906138c2565b6040516020818303038152906040529050919050565b6121ce6124bd565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121383390565b816001600160a01b0316836001600160a01b031614156122355760405162461bcd60e51b815260040161069a90613b36565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906122999085906139e9565b60405180910390a3505050565b6122b1848484611dd3565b6122bd848484846124e0565b6117985760405162461bcd60e51b815260040161069a90613ad6565b6060600d80546105b190613dc1565b60606122f382611ad1565b60006122fd6122d9565b9050600081511161231d5760405180602001604052806000815250611760565b80612327846125ed565b6040516020016123389291906138fe565b6040516020818303038152906040529392505050565b60006001600160e01b0319821663780e9d6360e01b148061059c575061059c826126ea565b610a8982826040518060200160405280600081525061273a565b6123956124bd565b6106e583838361276d565b6123aa82826114ce565b610a89576123c2816001600160a01b03166014612825565b6123cd836020612825565b6040516020016123de929190613938565b60408051601f198184030181529082905262461bcd60e51b825261069a91600401613a2e565b600a5460ff166124265760405162461bcd60e51b815260040161069a90613ab6565b565b600061243382611066565b90506124418160008461238d565b61244c600083611af6565b6001600160a01b0381166000908152600360205260408120805460019290612475908490613d34565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613f4e833981519152908390a45050565b600a5460ff16156124265760405162461bcd60e51b815260040161069a90613b66565b60006001600160a01b0384163b156125e257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612524903390899088908890600401613994565b602060405180830381600087803b15801561253e57600080fd5b505af192505050801561256e575060408051601f3d908101601f1916820190925261256b918101906130b3565b60015b6125c8573d80801561259c576040519150601f19603f3d011682016040523d82523d6000602084013e6125a1565b606091505b5080516125c05760405162461bcd60e51b815260040161069a90613ad6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061189a565b506001949350505050565b6060816126115750506040805180820190915260018152600360fc1b602082015290565b8160005b811561263b578061262581613e15565b91506126349050600a83613d01565b9150612615565b6000816001600160401b0381111561265557612655613eb2565b6040519080825280601f01601f19166020018201604052801561267f576020820181803683370190505b5090505b841561189a57612694600183613d34565b91506126a1600a86613e30565b6126ac906030613cc8565b60f81b8183815181106126c1576126c1613e9c565b60200101906001600160f81b031916908160001a9053506126e3600a86613d01565b9450612683565b60006001600160e01b031982166380ac58cd60e01b148061271b57506001600160e01b03198216635b5e139f60e01b145b8061059c57506301ffc9a760e01b6001600160e01b031983161461059c565b6127448383612990565b61275160008484846124e0565b6106e55760405162461bcd60e51b815260040161069a90613ad6565b6001600160a01b0383166127c8576127c381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6127eb565b816001600160a01b0316836001600160a01b0316146127eb576127eb8382612a5d565b6001600160a01b038216612802576106e581612afa565b826001600160a01b0316826001600160a01b0316146106e5576106e58282612ba9565b60606000612834836002613d15565b61283f906002613cc8565b6001600160401b0381111561285657612856613eb2565b6040519080825280601f01601f191660200182016040528015612880576020820181803683370190505b509050600360fc1b8160008151811061289b5761289b613e9c565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128ca576128ca613e9c565b60200101906001600160f81b031916908160001a90535060006128ee846002613d15565b6128f9906001613cc8565b90505b6001811115612971576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061292d5761292d613e9c565b1a60f81b82828151811061294357612943613e9c565b60200101906001600160f81b031916908160001a90535060049490941c9361296a81613daa565b90506128fc565b5083156117605760405162461bcd60e51b815260040161069a90613aa6565b6001600160a01b0382166129b65760405162461bcd60e51b815260040161069a90613bd6565b6129bf8161214f565b156129dc5760405162461bcd60e51b815260040161069a90613af6565b6129e86000838361238d565b6001600160a01b0382166000908152600360205260408120805460019290612a11908490613cc8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613f4e833981519152908290a45050565b60006001612a6a8461109b565b612a749190613d34565b600083815260076020526040902054909150808214612ac7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612b0c90600190613d34565b60008381526009602052604081205460088054939450909284908110612b3457612b34613e9c565b906000526020600020015490508060088381548110612b5557612b55613e9c565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612b8d57612b8d613e86565b6001900381819060005260206000200160009055905550505050565b6000612bb48361109b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612bf990613dc1565b90600052602060002090601f016020900481019282612c1b5760008555612c61565b82601f10612c3457805160ff1916838001178555612c61565b82800160010185558215612c61579182015b82811115612c61578251825591602001919060010190612c46565b50612c6d929150612d26565b5090565b508054612c7d90613dc1565b6000825580601f10612c8d575050565b601f016020900490600052602060002090810190610d679190612d26565b828054612cb790613dc1565b90600052602060002090601f016020900481019282612cd95760008555612c61565b82601f10612cea5780548555612c61565b82800160010185558215612c6157600052602060002091601f016020900482015b82811115612c61578254825591600101919060010190612d0b565b5b80821115612c6d5760008155600101612d27565b6000612d4e612d4984613c9d565b613c81565b905082815260208101848484011115612d6957612d69600080fd5b611d6d848285613d72565b803561059c81613ed2565b805161059c81613ed2565b803561059c81613ee6565b803561059c81613eee565b803561059c81613ef4565b805161059c81613ef4565b600082601f830112612dca57612dca600080fd5b813561189a848260208601612d3b565b803561059c81613f04565b805161059c81613eee565b600060208284031215612e0557612e05600080fd5b600061189a8484612d74565b600060208284031215612e2657612e26600080fd5b600061189a8484612d7f565b60008060408385031215612e4857612e48600080fd5b6000612e548585612d74565b9250506020612e6585828601612d74565b9150509250929050565b600080600060608486031215612e8757612e87600080fd5b6000612e938686612d74565b9350506020612ea486828701612d74565b9250506040612eb586828701612d95565b9150509250925092565b60008060008060808587031215612ed857612ed8600080fd5b6000612ee48787612d74565b9450506020612ef587828801612d74565b9350506040612f0687828801612d95565b92505060608501356001600160401b03811115612f2557612f25600080fd5b612f3187828801612db6565b91505092959194509250565b60008060408385031215612f5357612f53600080fd5b6000612f5f8585612d74565b9250506020612e6585828601612d8a565b600080600080600060a08688031215612f8b57612f8b600080fd5b6000612f978888612d74565b95505060208601356001600160401b03811115612fb657612fb6600080fd5b612fc288828901612db6565b9450506040612fd388828901612d95565b9350506060612fe488828901612d95565b92505060808601356001600160401b0381111561300357613003600080fd5b61300f88828901612db6565b9150509295509295909350565b6000806040838503121561303257613032600080fd5b600061303e8585612d74565b9250506020612e6585828601612d95565b60006020828403121561306457613064600080fd5b600061189a8484612d95565b6000806040838503121561308657613086600080fd5b6000612e548585612d95565b6000602082840312156130a7576130a7600080fd5b600061189a8484612da0565b6000602082840312156130c8576130c8600080fd5b600061189a8484612dab565b6000602082840312156130e9576130e9600080fd5b600061189a8484612dda565b60006020828403121561310a5761310a600080fd5b81356001600160401b0381111561312357613123600080fd5b61189a84828501612db6565b60006020828403121561314457613144600080fd5b600061189a8484612de5565b6000806040838503121561316657613166600080fd5b600061303e8585612d95565b60006117608383613201565b61318781613d4b565b82525050565b6000613197825190565b808452602084019350836020820285016131b18560200190565b8060005b858110156131e657848403895281516131ce8582613172565b94506020830160209a909a01999250506001016131b5565b5091979650505050505050565b801515613187565b80613187565b600061320b825190565b808452602084019350613222818560208601613d7e565b61322b81613ec8565b9093019392505050565b600061323f825190565b61324d818560208601613d7e565b9290920192915050565b6000815461326481613dc1565b60018216801561327b576001811461328c576132bc565b60ff198316865281860193506132bc565b60008581526020902060005b838110156132b457815488820152600190910190602001613298565b838801955050505b50505092915050565b61318781613d67565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b815291506132fc565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150613372565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150613372565b601c81526000602082017b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b815291506132fc565b60138152600060208201724e414d455f414c52454144595f45584953545360681b815291506132fc565b601081526000602082016f5a45524f5f4c454e4754485f4e414d4560801b815291506132fc565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150613372565b601981526000602082017822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b815291506132fc565b600a81526000602082016953414d455f56414c554560b01b815291506132fc565b600d81526000602082016c43414e5f4e4f545f52454e455760981b815291506132fc565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b815291506132fc565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150613372565b601181526000602082017016915493d7d651505494d7d411549253d1607a1b815291506132fc565b600c81526000602082016b5a45524f5f4144445245535360a01b815291506132fc565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150613372565b601781526000602082017622a9219b9918afa1a0a62622a92fa727aa2fa7aba722a960491b815291506132fc565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150613372565b60208082527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373910190815260006132fc565b600f81526000602082016e1513d2d15397d393d517d193d55391608a1b815291506132fc565b6012815260006020820171125111539512551657d393d517d193d5539160721b815291506132fc565b6018815260006020820177115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b815291506132fc565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150613372565b600e81526000602082016d1390535157d393d517d193d5539160921b815291506132fc565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150613372565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150613372565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613372565b60006138ce8285613235565b915061189a8284613257565b60006117608284613235565b60006138f28285613235565b915061189a8284613235565b600061390a8285613235565b91506139168284613235565b64173539b7b760d91b815291506005820161189a565b60006117608284613257565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006139648285613235565b7001034b99036b4b9b9b4b733903937b6329607d1b81529150601182016138f2565b6020810161059c828461317e565b608081016139a2828761317e565b6139af602083018661317e565b6139bc60408301856131fb565b81810360608301526139ce8184613201565b9695505050505050565b60208082528101611760818461318d565b6020810161059c82846131f3565b60408101613a0582856131f3565b61176060208301846131fb565b6020810161059c82846131fb565b6020810161059c82846132c5565b602080825281016117608184613201565b60608082528101613a508186613201565b9050613a5f60208301856131fb565b61189a60408301846131fb565b60808082528101613a7d8187613201565b9050613a8c60208301866131fb565b613a9960408301856131fb565b61090b60608301846131f3565b6020808252810161059c816132ce565b6020808252810161059c81613303565b6020808252810161059c8161332e565b6020808252810161059c81613379565b6020808252810161059c816133c8565b6020808252810161059c8161340a565b6020808252810161059c8161343d565b6020808252810161059c81613467565b6020808252810161059c8161348e565b6020808252810161059c816134cf565b6020808252810161059c816134ff565b6020808252810161059c81613520565b6020808252810161059c81613544565b6020808252810161059c8161356b565b6020808252810161059c816135b1565b6020808252810161059c816135d9565b6020808252810161059c816135fc565b6020808252810161059c81613647565b6020808252810161059c81613675565b6020808252810161059c816136cf565b6020808252810161059c81613701565b6020808252810161059c81613727565b6020808252810161059c81613750565b6020808252810161059c8161377f565b6020808252810161059c816137bd565b6020808252810161059c816137e2565b6020808252810161059c8161382b565b6020808252810161059c81613876565b60608101613c7482866131fb565b613a5f60208301856131fb565b6000613c8c60405190565b9050613c988282613de8565b919050565b60006001600160401b03821115613cb657613cb6613eb2565b613cbf82613ec8565b60200192915050565b60008219821115613cdb57613cdb613e44565b500190565b600060ff8216915060ff831692508260ff03821115613cdb57613cdb613e44565b600082613d1057613d10613e5a565b500490565b6000816000190483118215151615613d2f57613d2f613e44565b500290565b600082821015613d4657613d46613e44565b500390565b60006001600160a01b03821661059c565b600061059c82613d4b565b600061059c82613d5c565b82818337506000910152565b60005b83811015613d99578181015183820152602001613d81565b838111156117985750506000910152565b600081613db957613db9613e44565b506000190190565b600281046001821680613dd557607f821691505b6020821081141561161457611614613e70565b613df182613ec8565b81018181106001600160401b0382111715613e0e57613e0e613eb2565b6040525050565b6000600019821415613e2957613e29613e44565b5060010190565b600082613e3f57613e3f613e5a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b613edb81613d4b565b8114610d6757600080fd5b801515613edb565b80613edb565b6001600160e01b03198116613edb565b613edb81613d5c56fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c802698836e17e7ee023b2794c254673f25b150565820f63b6fd4d14b10101d064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102045760003560e01c806301ffc9a71461020957806306fdde0314610232578063081812fc14610247578063095ea7b3146102675780630c151fec1461027c57806318160ddd1461029c57806323b872dd146102a4578063248a9ca3146102b75780632d5537b0146102ca5780632f2ff15d146102d25780632f745c59146102e557806336568abe146102f85780633ad3033e1461030b5780633d44f8e01461031e5780633f4ba83a1461033157806342842e0e1461033957806342966c681461034c57806346b2b0871461035f5780634f6ccce7146103825780635c975abb146103955780636352211e146103a057806370a08231146103b3578063776ce6a1146103c657806377bed5ed146103ce5780637e2285aa146103ee5780637e669891146104015780638456cb591461042157806391d1485414610429578063938e3d7b1461043c57806395d89b411461044f578063965306aa14610457578063a217fddf1461046a578063a22cb46514610472578063b4b5b48f14610485578063b79636b6146104a7578063b88d4fde146104ba578063bdf29a85146104cd578063c87b56dd14610513578063d539139314610526578063d547741f1461053b578063e63ab1e91461054e578063e8a3d48514610563578063e985e9c51461056b578063ebfcbee11461057e575b600080fd5b61021c610217366004613092565b610591565b60405161022991906139e9565b60405180910390f35b61023a6105a2565b6040516102299190613a2e565b61025a61025536600461304f565b610634565b6040516102299190613986565b61027a61027536600461301c565b61065b565b005b61028f61028a366004612f70565b6106ea565b6040516102299190613a12565b60085461028f565b61027a6102b2366004612e6f565b610914565b61028f6102c536600461304f565b610946565b61023a61095b565b61027a6102e0366004613070565b6109e9565b61028f6102f336600461301c565b610a05565b61027a610306366004613070565b610a57565b61027a6103193660046130d4565b610a8d565b61027a61032c366004613150565b610b0f565b61027a610d47565b61027a610347366004612e6f565b610d6a565b61027a61035a36600461304f565b610d85565b61037261036d3660046130f5565b610eac565b6040516102299493929190613a6c565b61028f61039036600461304f565b611018565b600a5460ff1661021c565b61025a6103ae36600461304f565b611066565b61028f6103c1366004612df0565b61109b565b61023a6110df565b600e546103e1906001600160a01b031681565b6040516102299190613a20565b61027a6103fc3660046130f5565b6110ee565b61041461040f36600461304f565b611179565b60405161022991906139d8565b61027a6114ae565b61021c610437366004613070565b6114ce565b61027a61044a3660046130f5565b6114f9565b61023a611584565b61021c6104653660046130f5565b611593565b61028f600081565b61027a610480366004612f3d565b61161a565b61049861049336600461304f565b611625565b60405161022993929190613a3f565b6104146104b5366004612df0565b6116cf565b61027a6104c8366004612ebf565b611767565b6105056104db3660046130f5565b80516020818301810180516013825292820191909301209152805460019091015460ff9091169082565b6040516102299291906139f7565b61023a61052136600461304f565b61179e565b61028f600080516020613f2e83398151915281565b61027a610549366004613070565b6118a2565b61028f600080516020613f0e83398151915281565b61023a6118be565b61021c610579366004612e32565b6118cb565b61027a61058c366004613150565b6118f9565b600061059c82611aac565b92915050565b6060600080546105b190613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546105dd90613dc1565b801561062a5780601f106105ff5761010080835404028352916020019161062a565b820191906000526020600020905b81548152906001019060200180831161060d57829003601f168201915b5050505050905090565b600061063f82611ad1565b506000908152600460205260409020546001600160a01b031690565b600061066682611066565b9050806001600160a01b0316836001600160a01b031614156106a35760405162461bcd60e51b815260040161069a90613c16565b60405180910390fd5b336001600160a01b03821614806106bf57506106bf81336118cb565b6106db5760405162461bcd60e51b815260040161069a90613bc6565b6106e58383611af6565b505050565b60006106f585611593565b156107125760405162461bcd60e51b815260040161069a90613b06565b60008551116107335760405162461bcd60e51b815260040161069a90613b16565b600083116107535760405162461bcd60e51b815260040161069a90613b86565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610784908890600401613a12565b60206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190612e11565b6001600160a01b031614156107fb5760405162461bcd60e51b815260040161069a90613bf6565b600061080687611b64565b90506108128184611ba3565b6000818152601260209081526040909120875161083192890190612bed565b50600081815260126020526040902060010185905561085e6108576301e1338086611be7565b4290611bf3565b60008281526012602052604081206002019190915561087c87611bff565b90508160138260405161088f91906138da565b90815260200160405180910390206001018190555060016013826040516108b691906138da565b9081526040805160209281900383019020805460ff1916931515939093179092556000888152601482529182208054600181018255908352918190208351610905939190910191840190612bed565b50909150505b95945050505050565b61091f335b82611d75565b61093b5760405162461bcd60e51b815260040161069a90613c46565b6106e5838383611dd3565b6000908152600b602052604090206001015490565b600f805461096890613dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461099490613dc1565b80156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050505081565b6109f282610946565b6109fb81611eee565b6106e58383611ef8565b6000610a108361109b565b8210610a2e5760405162461bcd60e51b815260040161069a90613ac6565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610a7f5760405162461bcd60e51b815260040161069a90613c56565b610a898282611f7e565b5050565b6000610a9881611eee565b6001600160a01b038216610abe5760405162461bcd60e51b815260040161069a90613b96565b600e546001600160a01b0383811691161415610aec5760405162461bcd60e51b815260040161069a90613b46565b50600e80546001600160a01b0319166001600160a01b0392909216919091179055565b610b1a335b83611d75565b610b365760405162461bcd60e51b815260040161069a90613bb6565b600e546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610b67908590600401613a12565b60206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190612e11565b6001600160a01b03161415610bde5760405162461bcd60e51b815260040161069a90613bf6565b60008281526012602052604090206001015481811415610c105760405162461bcd60e51b815260040161069a90613b46565b6000838152601260205260408120600181018490558054610cb89190610c3590613dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6190613dc1565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b5050505050611bff565b6000838152601460205260409020909150610cd39082611fe5565b600083815260146020908152604082208054600181018255908352918190208351610d05939190910191840190612bed565b507f49554a718bc4f67010242de90ef62df1a09330859f5fa73030c9eb4f3aada248848385604051610d3993929190613c66565b60405180910390a150505050565b600080516020613f0e833981519152610d5f81611eee565b610d67612103565b50565b6106e583838360405180602001604052806000815250611767565b610d8e8161214f565b610daa5760405162461bcd60e51b815260040161069a90613be6565b60008181526012602052604081208054610dc89190610c3590613dc1565b6000838152601260205260408120600181015492935090610de98282612c71565b60018201600090556002820160009055505082601383604051610e0c91906138da565b9081526020016040518091039020600101541415610e5457601382604051610e3491906138da565b908152604051908190036020019020805460ff1916815560006001909101555b6000818152601460205260409020610e6c9083611fe5565b60008381526011602052604090208054610e8590613dc1565b159050610ea3576000838152601160205260408120610ea391612c71565b6106e58361216c565b6060600080600080610ebd86611bff565b9050601381604051610ecf91906138da565b9081526040519081900360200190205460ff16610efe5760405162461bcd60e51b815260040161069a90613c26565b6000601382604051610f1091906138da565b9081526020016040518091039020600101549050600060126000838152602001908152602001600020604051806060016040529081600082018054610f5490613dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8090613dc1565b8015610fcd5780601f10610fa257610100808354040283529160200191610fcd565b820191906000526020600020905b815481529060010190602001808311610fb057829003601f168201915b50505050508152602001600182015481526020016002820154815250509050610ff9816000015161219a565b6020820151604090920151909991985096504287101595509350505050565b600061102360085490565b82106110415760405162461bcd60e51b815260040161069a90613c36565b6008828154811061105457611054613e9c565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061059c5760405162461bcd60e51b815260040161069a90613c06565b60006001600160a01b0382166110c35760405162461bcd60e51b815260040161069a90613b76565b506001600160a01b031660009081526003602052604090205490565b6060600f80546105b190613dc1565b60006110f981611eee565b8160405160200161110a91906138da565b60405160208183030381529060405280519060200120600f604051602001611132919061392c565b6040516020818303038152906040528051906020012014156111665760405162461bcd60e51b815260040161069a90613b46565b81516106e590600f906020850190612bed565b60606000805b6000848152601460205260409020548110156112d85760008481526014602052604081208054839081106111b5576111b5613e9c565b9060005260206000200180546111ca90613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546111f690613dc1565b80156112435780601f1061121857610100808354040283529160200191611243565b820191906000526020600020905b81548152906001019060200180831161122657829003601f168201915b5050505050905060138160405161125a91906138da565b9081526040519081900360200190205460ff16156112c557600060138260405161128491906138da565b9081526020016040518091039020600101549050426012600083815260200190815260200160002060020154106112c3576112c0846001611bf3565b93505b505b50806112d081613e15565b91505061117f565b506000816001600160401b038111156112f3576112f3613eb2565b60405190808252806020026020018201604052801561132657816020015b60608152602001906001900390816113115790505b5090506000805b6000868152601460205260409020548110156114a457600086815260146020526040812080548390811061136357611363613e9c565b90600052602060002001805461137890613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546113a490613dc1565b80156113f15780601f106113c6576101008083540402835291602001916113f1565b820191906000526020600020905b8154815290600101906020018083116113d457829003601f168201915b5050505050905060138160405161140891906138da565b9081526040519081900360200190205460ff161561149157600060138260405161143291906138da565b90815260200160405180910390206001015490504260126000838152602001908152602001600020600201541061148f578185858151811061147657611476613e9c565b602090810291909101015261148c846001611bf3565b93505b505b508061149c81613e15565b91505061132d565b5090949350505050565b600080516020613f0e8339815191526114c681611eee565b610d676121c6565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061150481611eee565b8160405160200161151591906138da565b60405160208183030381529060405280519060200120601060405160200161153d919061392c565b6040516020818303038152906040528051906020012014156115715760405162461bcd60e51b815260040161069a90613b46565b81516106e5906010906020850190612bed565b6060600180546105b190613dc1565b60008061159f83611bff565b90506013816040516115b191906138da565b9081526040519081900360200190205460ff161561160b5760006013826040516115db91906138da565b90815260408051602092819003830190206001015460009081526012909252902060020154421115949350505050565b50600092915050565b50919050565b610a89338383612203565b60126020526000908152604090208054819061164090613dc1565b80601f016020809104026020016040519081016040528092919081815260200182805461166c90613dc1565b80156116b95780601f1061168e576101008083540402835291602001916116b9565b820191906000526020600020905b81548152906001019060200180831161169c57829003601f168201915b5050505050908060010154908060020154905083565b600e5460405163294cdf0d60e01b81526060916000916001600160a01b039091169063294cdf0d90611705908690600401613986565b60206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611755919061312f565b905061176081611179565b9392505050565b61177033610b14565b61178c5760405162461bcd60e51b815260040161069a90613c46565b611798848484846122a6565b50505050565b60606117a982611ad1565b600082815260116020526040812080546117c290613dc1565b80601f01602080910402602001604051908101604052809291908181526020018280546117ee90613dc1565b801561183b5780601f106118105761010080835404028352916020019161183b565b820191906000526020600020905b81548152906001019060200180831161181e57829003601f168201915b50505050509050600061184c6122d9565b905080516000141561185f575092915050565b8151156118915780826040516020016118799291906138e6565b60405160208183030381529060405292505050919050565b61189a846122e8565b949350505050565b6118ab82610946565b6118b481611eee565b6106e58383611f7e565b6010805461096890613dc1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61190233610b14565b61191e5760405162461bcd60e51b815260040161069a90613bb6565b6000811161193e5760405162461bcd60e51b815260040161069a90613b86565b6000828152601260205260408120805461195c9190610c3590613dc1565b905060138160405161196e91906138da565b9081526040519081900360200190205460ff1661199d5760405162461bcd60e51b815260040161069a90613c26565b826013826040516119ae91906138da565b908152602001604051809103902060010154146119dd5760405162461bcd60e51b815260040161069a90613b56565b600083815260126020526040902060020154421115611a1e57611a076108576301e1338084611be7565b600084815260126020526040902060020155611a5a565b611a47611a2f6301e1338084611be7565b60008581526012602052604090206002015490611bf3565b6000848152601260205260409020600201555b600083815260126020526040908190206002015490517f88ef5d91ad01b04046836022a7aade9038eb1188da66972705cc01ae3d49f08391611a9f9186918691613c66565b60405180910390a1505050565b60006001600160e01b03198216637965db0b60e01b148061059c575061059c8261234e565b611ada8161214f565b610d675760405162461bcd60e51b815260040161069a90613c06565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b2b82611066565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600080516020613f2e833981519152611b7e81611eee565b6000611b89600c5490565b9050611b99600c80546001019055565b6117608482612373565b611bac8261214f565b611bc85760405162461bcd60e51b815260040161069a90613ba6565b600082815260116020908152604090912082516106e592840190612bed565b60006117608284613d15565b60006117608284613cc8565b60606000829050600081516001600160401b03811115611c2157611c21613eb2565b6040519080825280601f01601f191660200182016040528015611c4b576020820181803683370190505b50905060005b8251811015611d6d57604160f81b838281518110611c7157611c71613e9c565b01602001516001600160f81b03191610801590611cb25750605a60f81b838281518110611ca057611ca0613e9c565b01602001516001600160f81b03191611155b15611d1457828181518110611cc957611cc9613e9c565b602001015160f81c60f81b60f81c6020611ce39190613ce0565b60f81b828281518110611cf857611cf8613e9c565b60200101906001600160f81b031916908160001a905350611d5b565b828181518110611d2657611d26613e9c565b602001015160f81c60f81b828281518110611d4357611d43613e9c565b60200101906001600160f81b031916908160001a9053505b80611d6581613e15565b915050611c51565b509392505050565b600080611d8183611066565b9050806001600160a01b0316846001600160a01b03161480611da85750611da881856118cb565b8061189a5750836001600160a01b0316611dc184610634565b6001600160a01b031614949350505050565b826001600160a01b0316611de682611066565b6001600160a01b031614611e0c5760405162461bcd60e51b815260040161069a90613ae6565b6001600160a01b038216611e325760405162461bcd60e51b815260040161069a90613b26565b611e3d83838361238d565b611e48600082611af6565b6001600160a01b0383166000908152600360205260408120805460019290611e71908490613d34565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e9f908490613cc8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020613f4e83398151915291a4505050565b610d6781336123a0565b611f0282826114ce565b610a89576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f3a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f8882826114ce565b15610a89576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60005b82548110156106e5578160405160200161200291906138da565b6040516020818303038152906040528051906020012083828154811061202a5761202a613e9c565b90600052602060002001604051602001612044919061392c565b6040516020818303038152906040528051906020012014156120f1578254839061207090600190613d34565b8154811061208057612080613e9c565b9060005260206000200183828154811061209c5761209c613e9c565b906000526020600020019080546120b290613dc1565b6120bd929190612cab565b50828054806120ce576120ce613e86565b6001900381819060005260206000200160006120ea9190612c71565b9055505050565b806120fb81613e15565b915050611fe8565b61210b612404565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516121459190613986565b60405180910390a1565b6000908152600260205260409020546001600160a01b0316151590565b61217533610919565b6121915760405162461bcd60e51b815260040161069a90613c46565b610d6781612428565b606081600f6040516020016121b09291906138c2565b6040516020818303038152906040529050919050565b6121ce6124bd565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121383390565b816001600160a01b0316836001600160a01b031614156122355760405162461bcd60e51b815260040161069a90613b36565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906122999085906139e9565b60405180910390a3505050565b6122b1848484611dd3565b6122bd848484846124e0565b6117985760405162461bcd60e51b815260040161069a90613ad6565b6060600d80546105b190613dc1565b60606122f382611ad1565b60006122fd6122d9565b9050600081511161231d5760405180602001604052806000815250611760565b80612327846125ed565b6040516020016123389291906138fe565b6040516020818303038152906040529392505050565b60006001600160e01b0319821663780e9d6360e01b148061059c575061059c826126ea565b610a8982826040518060200160405280600081525061273a565b6123956124bd565b6106e583838361276d565b6123aa82826114ce565b610a89576123c2816001600160a01b03166014612825565b6123cd836020612825565b6040516020016123de929190613938565b60408051601f198184030181529082905262461bcd60e51b825261069a91600401613a2e565b600a5460ff166124265760405162461bcd60e51b815260040161069a90613ab6565b565b600061243382611066565b90506124418160008461238d565b61244c600083611af6565b6001600160a01b0381166000908152600360205260408120805460019290612475908490613d34565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613f4e833981519152908390a45050565b600a5460ff16156124265760405162461bcd60e51b815260040161069a90613b66565b60006001600160a01b0384163b156125e257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612524903390899088908890600401613994565b602060405180830381600087803b15801561253e57600080fd5b505af192505050801561256e575060408051601f3d908101601f1916820190925261256b918101906130b3565b60015b6125c8573d80801561259c576040519150601f19603f3d011682016040523d82523d6000602084013e6125a1565b606091505b5080516125c05760405162461bcd60e51b815260040161069a90613ad6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061189a565b506001949350505050565b6060816126115750506040805180820190915260018152600360fc1b602082015290565b8160005b811561263b578061262581613e15565b91506126349050600a83613d01565b9150612615565b6000816001600160401b0381111561265557612655613eb2565b6040519080825280601f01601f19166020018201604052801561267f576020820181803683370190505b5090505b841561189a57612694600183613d34565b91506126a1600a86613e30565b6126ac906030613cc8565b60f81b8183815181106126c1576126c1613e9c565b60200101906001600160f81b031916908160001a9053506126e3600a86613d01565b9450612683565b60006001600160e01b031982166380ac58cd60e01b148061271b57506001600160e01b03198216635b5e139f60e01b145b8061059c57506301ffc9a760e01b6001600160e01b031983161461059c565b6127448383612990565b61275160008484846124e0565b6106e55760405162461bcd60e51b815260040161069a90613ad6565b6001600160a01b0383166127c8576127c381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6127eb565b816001600160a01b0316836001600160a01b0316146127eb576127eb8382612a5d565b6001600160a01b038216612802576106e581612afa565b826001600160a01b0316826001600160a01b0316146106e5576106e58282612ba9565b60606000612834836002613d15565b61283f906002613cc8565b6001600160401b0381111561285657612856613eb2565b6040519080825280601f01601f191660200182016040528015612880576020820181803683370190505b509050600360fc1b8160008151811061289b5761289b613e9c565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128ca576128ca613e9c565b60200101906001600160f81b031916908160001a90535060006128ee846002613d15565b6128f9906001613cc8565b90505b6001811115612971576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061292d5761292d613e9c565b1a60f81b82828151811061294357612943613e9c565b60200101906001600160f81b031916908160001a90535060049490941c9361296a81613daa565b90506128fc565b5083156117605760405162461bcd60e51b815260040161069a90613aa6565b6001600160a01b0382166129b65760405162461bcd60e51b815260040161069a90613bd6565b6129bf8161214f565b156129dc5760405162461bcd60e51b815260040161069a90613af6565b6129e86000838361238d565b6001600160a01b0382166000908152600360205260408120805460019290612a11908490613cc8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613f4e833981519152908290a45050565b60006001612a6a8461109b565b612a749190613d34565b600083815260076020526040902054909150808214612ac7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612b0c90600190613d34565b60008381526009602052604081205460088054939450909284908110612b3457612b34613e9c565b906000526020600020015490508060088381548110612b5557612b55613e9c565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612b8d57612b8d613e86565b6001900381819060005260206000200160009055905550505050565b6000612bb48361109b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612bf990613dc1565b90600052602060002090601f016020900481019282612c1b5760008555612c61565b82601f10612c3457805160ff1916838001178555612c61565b82800160010185558215612c61579182015b82811115612c61578251825591602001919060010190612c46565b50612c6d929150612d26565b5090565b508054612c7d90613dc1565b6000825580601f10612c8d575050565b601f016020900490600052602060002090810190610d679190612d26565b828054612cb790613dc1565b90600052602060002090601f016020900481019282612cd95760008555612c61565b82601f10612cea5780548555612c61565b82800160010185558215612c6157600052602060002091601f016020900482015b82811115612c61578254825591600101919060010190612d0b565b5b80821115612c6d5760008155600101612d27565b6000612d4e612d4984613c9d565b613c81565b905082815260208101848484011115612d6957612d69600080fd5b611d6d848285613d72565b803561059c81613ed2565b805161059c81613ed2565b803561059c81613ee6565b803561059c81613eee565b803561059c81613ef4565b805161059c81613ef4565b600082601f830112612dca57612dca600080fd5b813561189a848260208601612d3b565b803561059c81613f04565b805161059c81613eee565b600060208284031215612e0557612e05600080fd5b600061189a8484612d74565b600060208284031215612e2657612e26600080fd5b600061189a8484612d7f565b60008060408385031215612e4857612e48600080fd5b6000612e548585612d74565b9250506020612e6585828601612d74565b9150509250929050565b600080600060608486031215612e8757612e87600080fd5b6000612e938686612d74565b9350506020612ea486828701612d74565b9250506040612eb586828701612d95565b9150509250925092565b60008060008060808587031215612ed857612ed8600080fd5b6000612ee48787612d74565b9450506020612ef587828801612d74565b9350506040612f0687828801612d95565b92505060608501356001600160401b03811115612f2557612f25600080fd5b612f3187828801612db6565b91505092959194509250565b60008060408385031215612f5357612f53600080fd5b6000612f5f8585612d74565b9250506020612e6585828601612d8a565b600080600080600060a08688031215612f8b57612f8b600080fd5b6000612f978888612d74565b95505060208601356001600160401b03811115612fb657612fb6600080fd5b612fc288828901612db6565b9450506040612fd388828901612d95565b9350506060612fe488828901612d95565b92505060808601356001600160401b0381111561300357613003600080fd5b61300f88828901612db6565b9150509295509295909350565b6000806040838503121561303257613032600080fd5b600061303e8585612d74565b9250506020612e6585828601612d95565b60006020828403121561306457613064600080fd5b600061189a8484612d95565b6000806040838503121561308657613086600080fd5b6000612e548585612d95565b6000602082840312156130a7576130a7600080fd5b600061189a8484612da0565b6000602082840312156130c8576130c8600080fd5b600061189a8484612dab565b6000602082840312156130e9576130e9600080fd5b600061189a8484612dda565b60006020828403121561310a5761310a600080fd5b81356001600160401b0381111561312357613123600080fd5b61189a84828501612db6565b60006020828403121561314457613144600080fd5b600061189a8484612de5565b6000806040838503121561316657613166600080fd5b600061303e8585612d95565b60006117608383613201565b61318781613d4b565b82525050565b6000613197825190565b808452602084019350836020820285016131b18560200190565b8060005b858110156131e657848403895281516131ce8582613172565b94506020830160209a909a01999250506001016131b5565b5091979650505050505050565b801515613187565b80613187565b600061320b825190565b808452602084019350613222818560208601613d7e565b61322b81613ec8565b9093019392505050565b600061323f825190565b61324d818560208601613d7e565b9290920192915050565b6000815461326481613dc1565b60018216801561327b576001811461328c576132bc565b60ff198316865281860193506132bc565b60008581526020902060005b838110156132b457815488820152600190910190602001613298565b838801955050505b50505092915050565b61318781613d67565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b815291506132fc565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150613372565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150613372565b601c81526000602082017b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b815291506132fc565b60138152600060208201724e414d455f414c52454144595f45584953545360681b815291506132fc565b601081526000602082016f5a45524f5f4c454e4754485f4e414d4560801b815291506132fc565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150613372565b601981526000602082017822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b815291506132fc565b600a81526000602082016953414d455f56414c554560b01b815291506132fc565b600d81526000602082016c43414e5f4e4f545f52454e455760981b815291506132fc565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b815291506132fc565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150613372565b601181526000602082017016915493d7d651505494d7d411549253d1607a1b815291506132fc565b600c81526000602082016b5a45524f5f4144445245535360a01b815291506132fc565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150613372565b601781526000602082017622a9219b9918afa1a0a62622a92fa727aa2fa7aba722a960491b815291506132fc565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150613372565b60208082527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373910190815260006132fc565b600f81526000602082016e1513d2d15397d393d517d193d55391608a1b815291506132fc565b6012815260006020820171125111539512551657d393d517d193d5539160721b815291506132fc565b6018815260006020820177115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b815291506132fc565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150613372565b600e81526000602082016d1390535157d393d517d193d5539160921b815291506132fc565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150613372565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150613372565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613372565b60006138ce8285613235565b915061189a8284613257565b60006117608284613235565b60006138f28285613235565b915061189a8284613235565b600061390a8285613235565b91506139168284613235565b64173539b7b760d91b815291506005820161189a565b60006117608284613257565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006139648285613235565b7001034b99036b4b9b9b4b733903937b6329607d1b81529150601182016138f2565b6020810161059c828461317e565b608081016139a2828761317e565b6139af602083018661317e565b6139bc60408301856131fb565b81810360608301526139ce8184613201565b9695505050505050565b60208082528101611760818461318d565b6020810161059c82846131f3565b60408101613a0582856131f3565b61176060208301846131fb565b6020810161059c82846131fb565b6020810161059c82846132c5565b602080825281016117608184613201565b60608082528101613a508186613201565b9050613a5f60208301856131fb565b61189a60408301846131fb565b60808082528101613a7d8187613201565b9050613a8c60208301866131fb565b613a9960408301856131fb565b61090b60608301846131f3565b6020808252810161059c816132ce565b6020808252810161059c81613303565b6020808252810161059c8161332e565b6020808252810161059c81613379565b6020808252810161059c816133c8565b6020808252810161059c8161340a565b6020808252810161059c8161343d565b6020808252810161059c81613467565b6020808252810161059c8161348e565b6020808252810161059c816134cf565b6020808252810161059c816134ff565b6020808252810161059c81613520565b6020808252810161059c81613544565b6020808252810161059c8161356b565b6020808252810161059c816135b1565b6020808252810161059c816135d9565b6020808252810161059c816135fc565b6020808252810161059c81613647565b6020808252810161059c81613675565b6020808252810161059c816136cf565b6020808252810161059c81613701565b6020808252810161059c81613727565b6020808252810161059c81613750565b6020808252810161059c8161377f565b6020808252810161059c816137bd565b6020808252810161059c816137e2565b6020808252810161059c8161382b565b6020808252810161059c81613876565b60608101613c7482866131fb565b613a5f60208301856131fb565b6000613c8c60405190565b9050613c988282613de8565b919050565b60006001600160401b03821115613cb657613cb6613eb2565b613cbf82613ec8565b60200192915050565b60008219821115613cdb57613cdb613e44565b500190565b600060ff8216915060ff831692508260ff03821115613cdb57613cdb613e44565b600082613d1057613d10613e5a565b500490565b6000816000190483118215151615613d2f57613d2f613e44565b500290565b600082821015613d4657613d46613e44565b500390565b60006001600160a01b03821661059c565b600061059c82613d4b565b600061059c82613d5c565b82818337506000910152565b60005b83811015613d99578181015183820152602001613d81565b838111156117985750506000910152565b600081613db957613db9613e44565b506000190190565b600281046001821680613dd557607f821691505b6020821081141561161457611614613e70565b613df182613ec8565b81018181106001600160401b0382111715613e0e57613e0e613eb2565b6040525050565b6000600019821415613e2957613e29613e44565b5060010190565b600082613e3f57613e3f613e5a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b613edb81613d4b565b8114610d6757600080fd5b801515613edb565b80613edb565b6001600160e01b03198116613edb565b613edb81613d5c56fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c802698836e17e7ee023b2794c254673f25b150565820f63b6fd4d14b10101d064736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token. It has an extension, and stores all the information about the identity names.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "tokenId": "TokenId of the soul name to burn"
        }
      },
      "constructor": {
        "details": "Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.",
        "params": {
          "_contractURI": "URI of the smart contract metadata",
          "_extension": "Extension of the soul name",
          "_soulboundIdentity": "Address of the Soulbound identity contract",
          "admin": "Administrator of the smart contract"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getExtension()": {
        "details": "This function is used to get the extension of the soul name",
        "returns": {
          "_0": "Extension of the soul name"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSoulNames(address)": {
        "details": "This function queries all the identity names of the specified account",
        "params": {
          "owner": "Address of the owner of the identities"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the account"
        }
      },
      "getSoulNames(uint256)": {
        "details": "This function queries all the identity names of the specified identity Id",
        "params": {
          "identityId": "TokenId of the identity"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the identity Id"
        }
      },
      "getTokenData(string)": {
        "details": "This function queries the information of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "active": "`true` if the soul name is active, `false` otherwise",
          "expirationDate": "Expiration date of the soul name",
          "identityId": "Identity id of the soul name",
          "sbtName": "Soul name, in upper/lower case and extension"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isAvailable(string)": {
        "details": "This function queries if a soul name already exists and is in the available state",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "available": "`true` if the soul name is available, `false` otherwise"
        }
      },
      "mint(address,string,uint256,uint256,string)": {
        "details": "The caller can mint more than one name. The soul name must be unique.",
        "params": {
          "_tokenURI": "URI of the NFT",
          "identityId": "TokenId of the soulbound identity that will be pointed from this soul name",
          "name": "Name of the new soul name",
          "to": "Address of the owner of the new soul name",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Sets an emergency stop mechanism that can be triggered by an authorized account."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renewYearsPeriod(uint256,uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "tokenId": "TokenId of the soul name",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_contractURI": "URI of the smart contract metadata"
        }
      },
      "setExtension(string)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_extension": "Extension of the soul name"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_soulboundIdentity": "Address of the SoulboundIdentity contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
        "params": {
          "tokenId": "NFT to get the URI of"
        },
        "returns": {
          "_0": "URI of the NFT"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Unsets an emergency stop mechanism. It can be triggered by an authorized account."
      },
      "updateIdentityId(uint256,uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "identityId": "New TokenId of the soulbound identity that will be pointed from this soul name",
          "tokenId": "TokenId of the soul name"
        }
      }
    },
    "title": "SoulName NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn a soul name"
      },
      "constructor": {
        "notice": "Creates a new SoulName NFT"
      },
      "getExtension()": {
        "notice": "Returns the extension of the soul name"
      },
      "getSoulNames(address)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getSoulNames(uint256)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getTokenData(string)": {
        "notice": "Returns the information of a soul name"
      },
      "isAvailable(string)": {
        "notice": "Checks if a soul name is available"
      },
      "mint(address,string,uint256,uint256,string)": {
        "notice": "Mints a new soul name"
      },
      "pause()": {
        "notice": "Pauses the operations in the smart contract"
      },
      "renewYearsPeriod(uint256,uint256)": {
        "notice": "Update the expiration date of a soul name"
      },
      "setContractURI(string)": {
        "notice": "Sets the URI of the smart contract metadata"
      },
      "setExtension(string)": {
        "notice": "Sets the extension of the soul name"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this soul name"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "unpause()": {
        "notice": "Unpauses the operations in the smart contract"
      },
      "updateIdentityId(uint256,uint256)": {
        "notice": "Update the identity id pointed from a soul name"
      }
    },
    "notice": "SoulName NFT that points to a Soulbound identity token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1532,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1534,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1538,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1542,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1546,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1552,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2552,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2556,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2559,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2563,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 410,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 6684,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)3256_storage"
      },
      {
        "astId": 6686,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 3960,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISoulboundIdentity)6396"
      },
      {
        "astId": 3962,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "extension",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3964,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3968,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3973,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "tokenData",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(TokenData)3990_storage)"
      },
      {
        "astId": 3978,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "nameData",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_struct(NameData)3995_storage)"
      },
      {
        "astId": 3983,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "identityNames",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulboundIdentity)6396": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(NameData)3995_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SoulName.NameData)",
        "numberOfBytes": "32",
        "value": "t_struct(NameData)3995_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)3990_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SoulName.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)3990_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3256_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3255,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NameData)3995_storage": {
        "encoding": "inplace",
        "label": "struct SoulName.NameData",
        "members": [
          {
            "astId": 3992,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3994,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)3990_storage": {
        "encoding": "inplace",
        "label": "struct SoulName.TokenData",
        "members": [
          {
            "astId": 3985,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3987,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "identityId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3989,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "expirationDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}