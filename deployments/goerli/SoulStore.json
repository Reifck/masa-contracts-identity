{
  "address": "0x6Bd631DbaAe9d8A2D6AC11D948f6A44013D57938",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulBoundIdentity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nameRegistrationPricePerYear",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_utilityToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserveWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "SoulNamePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "SoulboundIdentityAndNamePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "SoulboundIdentityPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintingPrice",
          "type": "uint256"
        }
      ],
      "name": "_getSwapAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInStableCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUtilityToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "estimateSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nameLength",
          "type": "string"
        }
      ],
      "name": "getNameRegistrationPricePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nameRegistrationPricePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseIdentity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "purchaseIdentityAndName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "purchaseName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "purchaseNameInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInStableCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUtilityToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nameLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nameRegistrationPricePerYear",
          "type": "uint256"
        }
      ],
      "name": "setNameRegistrationPricePerYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserveWallet",
          "type": "address"
        }
      ],
      "name": "setReserveWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "name": "setStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_utilityToken",
          "type": "address"
        }
      ],
      "name": "setUtilityToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilityToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c9c6adf3ae23aafc51ac9a8bfc6a6faf451e9f7e1ba0f046d59193a40f715c3",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0x6Bd631DbaAe9d8A2D6AC11D948f6A44013D57938",
    "transactionIndex": 0,
    "gasUsed": "2300945",
    "logsBloom": "0x
    "blockHash": "0x3ac95135b53dd601b89d7013c1c8d95a508934923f286a7dfb44db9f8736a251",
    "transactionHash": "0x4c9c6adf3ae23aafc51ac9a8bfc6a6faf451e9f7e1ba0f046d59193a40f715c3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7721332,
        "transactionHash": "0x4c9c6adf3ae23aafc51ac9a8bfc6a6faf451e9f7e1ba0f046d59193a40f715c3",
        "address": "0x6Bd631DbaAe9d8A2D6AC11D948f6A44013D57938",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3ac95135b53dd601b89d7013c1c8d95a508934923f286a7dfb44db9f8736a251"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7721332,
        "transactionHash": "0x4c9c6adf3ae23aafc51ac9a8bfc6a6faf451e9f7e1ba0f046d59193a40f715c3",
        "address": "0x6Bd631DbaAe9d8A2D6AC11D948f6A44013D57938",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3ac95135b53dd601b89d7013c1c8d95a508934923f286a7dfb44db9f8736a251"
      }
    ],
    "blockNumber": 7721332,
    "cumulativeGasUsed": "2300945",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "0xe7a4CaFA517cF82e90b42fB1cEE1437f4bb205F2",
    "10000000",
    "0xdc31Ee1784292379Fbb2964b3B9C4124D8F89C60",
    "0xD87Ba7A50B2E7E660f678A895E4B72E7CB4CCd9C",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F"
  ],
  "numDeployments": 1,
  "solcInputHash": "820f86c65d0294b251813f2382387c11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulBoundIdentity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nameRegistrationPricePerYear\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_utilityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"SoulNamePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"SoulboundIdentityAndNamePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SoulboundIdentityPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingPrice\",\"type\":\"uint256\"}],\"name\":\"_getSwapAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUtilityToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"estimateSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameLength\",\"type\":\"string\"}],\"name\":\"getNameRegistrationPricePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameRegistrationPricePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"purchaseIdentityAndName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"purchaseName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"purchaseNameInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInStableCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUtilityToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nameRegistrationPricePerYear\",\"type\":\"uint256\"}],\"name\":\"setNameRegistrationPricePerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"setReserveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilityToken\",\"type\":\"address\"}],\"name\":\"setUtilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"From this smart contract we can mint new Soulbound Identities and Soul Name NFTs. This minting can be done paying a fee in ETH, USDC or $MASA\",\"kind\":\"dev\",\"methods\":{\"_getSwapAmounts(uint256)\":{\"details\":\"Returns all current pricing and amount informations for a purchase\",\"returns\":{\"priceInETH\":\"Current pric in native token (ETH)\",\"priceInStableCoin\":\"Current price in stable coin\",\"priceInUtilityToken\":\"Current price in utility token ($MASA)\"}},\"constructor\":{\"details\":\"Creates a new Soul Store, that has the role to minting new Soulbound Identities and Soul Name NFTs, paying a fee\",\"params\":{\"_nameRegistrationPricePerYear\":\"Price of the default name registering in stable coin per year\",\"_reserveWallet\":\"Wallet that will receive the fee\",\"_soulBoundIdentity\":\"Address of the Soulbound identity contract\",\"_stableCoin\":\"Stable coin to pay the fee in (USDC)\",\"_swapRouter\":\"Swap router address\",\"_utilityToken\":\"Utility token to pay the fee in ($MASA)\",\"_wrappedNativeToken\":\"Wrapped native token address\",\"admin\":\"Administrator of the smart contract\"}},\"getNameRegistrationPricePerYear(string)\":{\"details\":\"Returns the price for registering per year in USD for an specific name length\",\"params\":{\"nameLength\":\"Length of the name\"},\"returns\":{\"_0\":\"Price in stable coin for that name length\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"Sets an emergency stop mechanism that can be triggered by an authorized account.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseIdentity()\":{\"details\":\"This function allows the purchase of a soulbound identity for free\",\"returns\":{\"_0\":\"TokenId of the new soulbound identity\"}},\"purchaseIdentityAndName(address,string,uint256,string)\":{\"details\":\"This function allows the purchase of a soulbound identity and name using stable coin (USDC), native token (ETH) or utility token ($MASA)\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"name\":\"Name of the new soul name\",\"paymentMethod\":\"Address of token that user want to pay\",\"yearsPeriod\":\"Years of validity of the name\"},\"returns\":{\"_0\":\"TokenId of the new soulbound identity\"}},\"purchaseName(address,string,uint256,string)\":{\"details\":\"This function allows the purchase of a soul name using stable coin (USDC), native token (ETH) or utility token ($MASA)\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"name\":\"Name of the new soul name\",\"paymentMethod\":\"Address of token that user want to pay\",\"yearsPeriod\":\"Years of validity of the name\"},\"returns\":{\"_0\":\"TokenId of the new sou name\"}},\"purchaseNameInfo(string,uint256)\":{\"details\":\"Returns all current pricing and amount informations for a purchase\",\"params\":{\"name\":\"Name of the new soul name\",\"yearsPeriod\":\"Years of validity of the name\"},\"returns\":{\"priceInETH\":\"Current price of the name minting in native token (ETH)\",\"priceInStableCoin\":\"Current price of the name minting in stable coin\",\"priceInUtilityToken\":\"Current price of the name minting in utility token ($MASA)\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setNameRegistrationPricePerYear(uint256,uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_nameLength\":\"Length of the name\",\"_nameRegistrationPricePerYear\":\"New price of the name registering per one year in stable coin for that name length per year\"}},\"setReserveWallet(address)\":{\"details\":\"Let change the reserve walled. It can be triggered by an authorized account.\",\"params\":{\"_reserveWallet\":\"New reserve wallet\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_soulboundIdentity\":\"New SoulboundIdentity contract address\"}},\"setStableCoin(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_stableCoin\":\"New stable coin to pay the fee in\"}},\"setSwapRouter(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_swapRouter\":\"New swap router address\"}},\"setUtilityToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_utilityToken\":\"New utility token to pay the fee in\"}},\"setWrappedNativeToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_wrappedNativeToken\":\"New wrapped native token address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unsets an emergency stop mechanism. It can be triggered by an authorized account.\"}},\"title\":\"Soul Store\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getSwapAmounts(uint256)\":{\"notice\":\"Returns the price of minting\"},\"constructor\":{\"notice\":\"Creates a new Soul Store\"},\"getNameRegistrationPricePerYear(string)\":{\"notice\":\"Returns the price of register a name per year in stable coin for an specific length\"},\"pause()\":{\"notice\":\"Pauses the operations in the smart contract\"},\"purchaseIdentity()\":{\"notice\":\"Mints a new Soulbound Identity purchasing it\"},\"purchaseIdentityAndName(address,string,uint256,string)\":{\"notice\":\"Mints a new Soulbound Identity and Name purchasing it\"},\"purchaseName(address,string,uint256,string)\":{\"notice\":\"Mints a new Soul Name purchasing it\"},\"purchaseNameInfo(string,uint256)\":{\"notice\":\"Returns the price of the name minting\"},\"setNameRegistrationPricePerYear(uint256,uint256)\":{\"notice\":\"Sets the price of the name registering per one year in stable coin\"},\"setReserveWallet(address)\":{\"notice\":\"Set the reserve wallet\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this store\"},\"setStableCoin(address)\":{\"notice\":\"Sets the stable coin to pay the fee in (USDC)\"},\"setSwapRouter(address)\":{\"notice\":\"Sets the swap router address\"},\"setUtilityToken(address)\":{\"notice\":\"Sets the utility token to pay the fee in ($MASA)\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Sets the wrapped native token address\"},\"unpause()\":{\"notice\":\"Unpauses the operations in the smart contract\"}},\"notice\":\"Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulStore.sol\":\"SoulStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SoulStore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./dex/DexAMM.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\n\\n/// @title Soul Store\\n/// @author Masa Finance\\n/// @notice Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\\n/// @dev From this smart contract we can mint new Soulbound Identities and Soul Name NFTs.\\n/// This minting can be done paying a fee in ETH, USDC or $MASA\\ncontract SoulStore is DexAMM, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n\\n    mapping(uint256 => uint256) public nameRegistrationPricePerYear; // (length --> price in stable coin per year)\\n\\n    address public stableCoin; // USDC\\n    address public utilityToken; // $MASA\\n\\n    address public reserveWallet;\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new Soul Store\\n    /// @dev Creates a new Soul Store, that has the role to minting new Soulbound Identities\\n    /// and Soul Name NFTs, paying a fee\\n    /// @param admin Administrator of the smart contract\\n    /// @param _soulBoundIdentity Address of the Soulbound identity contract\\n    /// @param _nameRegistrationPricePerYear Price of the default name registering in stable coin per year\\n    /// @param _utilityToken Utility token to pay the fee in ($MASA)\\n    /// @param _stableCoin Stable coin to pay the fee in (USDC)\\n    /// @param _wrappedNativeToken Wrapped native token address\\n    /// @param _swapRouter Swap router address\\n    /// @param _reserveWallet Wallet that will receive the fee\\n    constructor(\\n        address admin,\\n        ISoulboundIdentity _soulBoundIdentity,\\n        uint256 _nameRegistrationPricePerYear,\\n        address _utilityToken,\\n        address _stableCoin,\\n        address _wrappedNativeToken,\\n        address _swapRouter,\\n        address _reserveWallet\\n    ) DexAMM(_swapRouter, _wrappedNativeToken) {\\n        require(_reserveWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(address(_soulBoundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(PAUSER_ROLE, admin);\\n\\n        soulboundIdentity = _soulBoundIdentity;\\n\\n        nameRegistrationPricePerYear[0] = _nameRegistrationPricePerYear; // name price for default length per year\\n        stableCoin = _stableCoin;\\n        utilityToken = _utilityToken;\\n\\n        reserveWallet = _reserveWallet;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Pauses the operations in the smart contract\\n    /// @dev Sets an emergency stop mechanism that can be triggered by an authorized account.\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the operations in the smart contract\\n    /// @dev Unsets an emergency stop mechanism. It can be triggered by an authorized account.\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity New SoulboundIdentity contract address\\n    function setSoulboundIdentity(ISoulboundIdentity _soulboundIdentity)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_soulboundIdentity) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulboundIdentity != _soulboundIdentity, \\\"SAME_VALUE\\\");\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the price of the name registering per one year in stable coin\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _nameLength Length of the name\\n    /// @param _nameRegistrationPricePerYear New price of the name registering per one\\n    /// year in stable coin for that name length per year\\n    function setNameRegistrationPricePerYear(\\n        uint256 _nameLength,\\n        uint256 _nameRegistrationPricePerYear\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            nameRegistrationPricePerYear[_nameLength] !=\\n                _nameRegistrationPricePerYear,\\n            \\\"SAME_VALUE\\\"\\n        );\\n        nameRegistrationPricePerYear[\\n            _nameLength\\n        ] = _nameRegistrationPricePerYear;\\n    }\\n\\n    /// @notice Sets the stable coin to pay the fee in (USDC)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _stableCoin New stable coin to pay the fee in\\n    function setStableCoin(address _stableCoin)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_stableCoin != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(stableCoin != _stableCoin, \\\"SAME_VALUE\\\");\\n        stableCoin = _stableCoin;\\n    }\\n\\n    /// @notice Sets the utility token to pay the fee in ($MASA)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _utilityToken New utility token to pay the fee in\\n    function setUtilityToken(address _utilityToken)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_utilityToken != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(utilityToken != _utilityToken, \\\"SAME_VALUE\\\");\\n        utilityToken = _utilityToken;\\n    }\\n\\n    /// @notice Set the reserve wallet\\n    /// @dev Let change the reserve walled. It can be triggered by an authorized account.\\n    /// @param _reserveWallet New reserve wallet\\n    function setReserveWallet(address _reserveWallet)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_reserveWallet != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_reserveWallet != reserveWallet, \\\"SAME_VALUE\\\");\\n        reserveWallet = _reserveWallet;\\n    }\\n\\n    /// @notice Sets the swap router address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _swapRouter New swap router address\\n    function setSwapRouter(address _swapRouter)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_swapRouter != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(swapRouter != _swapRouter, \\\"SAME_VALUE\\\");\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /// @notice Sets the wrapped native token address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _wrappedNativeToken New wrapped native token address\\n    function setWrappedNativeToken(address _wrappedNativeToken)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_wrappedNativeToken != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(wrappedNativeToken != _wrappedNativeToken, \\\"SAME_VALUE\\\");\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new Soulbound Identity and Name purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity and name using\\n    /// stable coin (USDC), native token (ETH) or utility token ($MASA)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentityAndName(\\n        address paymentMethod,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable whenNotPaused returns (uint256) {\\n        _payForMinting(\\n            paymentMethod,\\n            getNameRegistrationPricePerYear(name).mul(yearsPeriod)\\n        );\\n\\n        // finalize purchase\\n        return\\n            _mintSoulboundIdentityAndName(\\n                _msgSender(),\\n                name,\\n                yearsPeriod,\\n                _tokenURI\\n            );\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity for free\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentity()\\n        external\\n        payable\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        // finalize purchase\\n        return _mintSoulboundIdentity(_msgSender());\\n    }\\n\\n    /// @notice Mints a new Soul Name purchasing it\\n    /// @dev This function allows the purchase of a soul name using\\n    /// stable coin (USDC), native token (ETH) or utility token ($MASA)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    /// @return TokenId of the new sou name\\n    function purchaseName(\\n        address paymentMethod,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable whenNotPaused returns (uint256) {\\n        _payForMinting(\\n            paymentMethod,\\n            getNameRegistrationPricePerYear(name).mul(yearsPeriod)\\n        );\\n\\n        // finalize purchase\\n        return _mintSoulName(_msgSender(), name, yearsPeriod, _tokenURI);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the price of register a name per year in stable coin for an specific length\\n    /// @dev Returns the price for registering per year in USD for an specific name length\\n    /// @param nameLength Length of the name\\n    /// @return Price in stable coin for that name length\\n    function getNameRegistrationPricePerYear(string memory nameLength)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 bytelength = bytes(nameLength).length;\\n        uint256 price = nameRegistrationPricePerYear[bytelength];\\n        if (price == 0) {\\n            // if not found, return the default price\\n            price = nameRegistrationPricePerYear[0];\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price of the name minting\\n    /// @dev Returns all current pricing and amount informations for a purchase\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @return priceInStableCoin Current price of the name minting in stable coin\\n    /// @return priceInETH Current price of the name minting in native token (ETH)\\n    /// @return priceInUtilityToken Current price of the name minting in utility token ($MASA)\\n    function purchaseNameInfo(string memory name, uint256 yearsPeriod)\\n        public\\n        view\\n        returns (\\n            uint256 priceInStableCoin,\\n            uint256 priceInETH,\\n            uint256 priceInUtilityToken\\n        )\\n    {\\n        (priceInStableCoin, priceInETH, priceInUtilityToken) = _getSwapAmounts(\\n            getNameRegistrationPricePerYear(name).mul(yearsPeriod)\\n        );\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    /// @notice Returns the price of minting\\n    /// @dev Returns all current pricing and amount informations for a purchase\\n    /// @return priceInStableCoin Current price in stable coin\\n    /// @return priceInETH Current pric in native token (ETH)\\n    /// @return priceInUtilityToken Current price in utility token ($MASA)\\n    function _getSwapAmounts(uint256 mintingPrice)\\n        public\\n        view\\n        returns (\\n            uint256 priceInStableCoin,\\n            uint256 priceInETH,\\n            uint256 priceInUtilityToken\\n        )\\n    {\\n        priceInStableCoin = mintingPrice;\\n        // get swapped price in ETH and $MASA\\n        priceInETH = estimateSwapAmount(\\n            wrappedNativeToken,\\n            stableCoin,\\n            mintingPrice\\n        );\\n        priceInUtilityToken = estimateSwapAmount(\\n            utilityToken,\\n            stableCoin,\\n            mintingPrice\\n        );\\n    }\\n\\n    /// @notice Performs the payment for the minting\\n    /// @dev This method will transfer the funds to the reserve wallet, performing\\n    /// the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param mintingPrice Price of the minting\\n    function _payForMinting(address paymentMethod, uint256 mintingPrice)\\n        internal\\n    {\\n        if (paymentMethod == stableCoin) {\\n            // USDC\\n            IERC20(paymentMethod).safeTransferFrom(\\n                msg.sender,\\n                reserveWallet,\\n                mintingPrice\\n            );\\n        } else if (paymentMethod == address(0)) {\\n            // ETH\\n            uint256 swapAmout = estimateSwapAmount(\\n                wrappedNativeToken,\\n                stableCoin,\\n                mintingPrice\\n            );\\n            require(msg.value >= swapAmout, \\\"INVALID_PAYMENT_AMOUNT\\\");\\n            (bool success, ) = payable(reserveWallet).call{value: swapAmout}(\\n                \\\"\\\"\\n            );\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n            if (msg.value > swapAmout) {\\n                // return diff\\n                uint256 refund = msg.value.sub(swapAmout);\\n                (success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                require(success);\\n            }\\n        } else if (paymentMethod == utilityToken) {\\n            // $MASA\\n            uint256 swapAmout = estimateSwapAmount(\\n                paymentMethod,\\n                stableCoin,\\n                mintingPrice\\n            );\\n            IERC20(paymentMethod).safeTransferFrom(\\n                msg.sender,\\n                reserveWallet,\\n                swapAmout\\n            );\\n        } else {\\n            revert(\\\"INVALID_PAYMENT_METHOD\\\");\\n        }\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity and Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and a Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentityAndName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) internal returns (uint256) {\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mintIdentityWithName(\\n            to,\\n            name,\\n            yearsPeriod,\\n            _tokenURI\\n        );\\n\\n        emit SoulboundIdentityAndNamePurchased(to, tokenId, name, yearsPeriod);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and emit the purchase event\\n    /// @param to Address of the owner of the new identity\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentity(address to) internal returns (uint256) {\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mint(to);\\n\\n        emit SoulboundIdentityPurchased(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soul Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    /// @return TokenId of the new soul name\\n    function _mintSoulName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) internal returns (uint256) {\\n        // mint Soul Name token\\n        ISoulName soulName = soulboundIdentity.getSoulName();\\n        uint256 identityId = soulboundIdentity.tokenOfOwner(to);\\n\\n        uint256 tokenId = soulName.mint(\\n            to,\\n            name,\\n            identityId,\\n            yearsPeriod,\\n            _tokenURI\\n        );\\n\\n        emit SoulNamePurchased(to, tokenId, name, yearsPeriod);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event SoulboundIdentityAndNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 yearsPeriod\\n    );\\n\\n    event SoulboundIdentityPurchased(address indexed account, uint256 tokenId);\\n\\n    event SoulNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 yearsPeriod\\n    );\\n}\\n\",\"keccak256\":\"0xcaa5a4db55bceb30fb1877b2d448bbb3cb4e42fe2030749186c54f58d74b465e\",\"license\":\"Apache-2.0\"},\"contracts/dex/DexAMM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/dex/IUniswapRouter.sol\\\";\\n\\n/// @title Decentralized automated market maker (AMM)\\n/// @author Masa Finance\\n/// @notice Smart contract to call a Dex AMM smart contract\\n/// @dev This smart contract will call the Uniswap Router interface, based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\nabstract contract DexAMM {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    address public swapRouter;\\n    address public wrappedNativeToken;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Dex AMM\\n    /// @dev Creates a new Decentralized automated market maker (AMM) smart contract,\\n    // that will call the Uniswap Router interface\\n    /// @param _swapRouter Swap router address\\n    /// @param _wrappedNativeToken Wrapped native token address\\n    constructor(address _swapRouter, address _wrappedNativeToken) {\\n        require(_swapRouter != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_wrappedNativeToken != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        swapRouter = _swapRouter;\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    function estimateSwapAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountOut\\n    ) public view returns (uint256) {\\n        uint256[] memory amounts;\\n        address[] memory path;\\n        path = _getPathFromTokenToToken(_fromToken, _toToken);\\n        amounts = IUniswapRouter(swapRouter).getAmountsIn(_amountOut, path);\\n        return amounts[0];\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _getPathFromTokenToToken(address fromToken, address toToken)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        if (fromToken == wrappedNativeToken || toToken == wrappedNativeToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = fromToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : fromToken;\\n            path[1] = toToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : toToken;\\n            return path;\\n        } else {\\n            address[] memory path = new address[](3);\\n            path[0] = fromToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = toToken;\\n            return path;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xb09fb161ac5cee6328c62cc233433f0997e85611008d746d14cb5175964cd8df\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 identityId,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(string memory name)\\n        external\\n        view\\n        returns (bool available);\\n\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            uint256 identityId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x2bd9c823014b8a3fd091030d02db90bbee4d55d35b5e4aac32340dbbcd2a3a8d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is IERC721 {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x82463dcf72fdcb13f71bafd5071b75e10981ff7b3fd52fd78c95e2352df74043\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/dex/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\n/// @title Uniswap Router interface\\n/// @author Masa Finance\\n/// @notice Interface of the Uniswap Router contract\\n/// @dev This interface is used to interact with the Uniswap Router contract,\\n/// and gets the most important functions of the contract. It's based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xbafb111a529bb3f623d90cf0399b856938e8e7c5b1644b5c430098dd2598f167\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002896380380620028968339810160408190526200003491620002ad565b81836001600160a01b038216620000685760405162461bcd60e51b81526004016200005f9062000372565b60405180910390fd5b6001600160a01b038116620000915760405162461bcd60e51b81526004016200005f9062000372565b600080546001600160a01b039384166001600160a01b0319909116179055600180546001600160a81b0319169183169190911790558116620000e75760405162461bcd60e51b81526004016200005f9062000372565b6001600160a01b038716620001105760405162461bcd60e51b81526004016200005f9062000372565b6200011d600089620001ce565b620001497f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a89620001ce565b600380546001600160a01b039889166001600160a01b0319918216179091556000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec969096556005805494881694871694909417909355505060068054928516928416929092179091556007805491909316911617905550620003e8565b620001da828262000259565b620002555760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516200028081620003bc565b80516200028081620003d6565b80516200028081620003e1565b600080600080600080600080610100898b031215620002cf57620002cf600080fd5b6000620002dd8b8b62000286565b9850506020620002f08b828c0162000293565b9750506040620003038b828c01620002a0565b9650506060620003168b828c0162000286565b9550506080620003298b828c0162000286565b94505060a06200033c8b828c0162000286565b93505060c06200034f8b828c0162000286565b92505060e0620003628b828c0162000286565b9150509295985092959890939650565b602080825281016200028081600c81526b5a45524f5f4144445245535360a01b602082015260400190565b60006001600160a01b03821662000280565b600062000280826200039d565b620003c7816200039d565b8114620003d357600080fd5b50565b620003c781620003af565b80620003c7565b61249e80620003f86000396000f3fe6080604052600436106101735760003560e01c806301ffc9a7146101785780631003d9c9146101ae57806312553e41146101dd57806317fcb39b146101f25780631cfd11c61461021f57806323af4e171461023f578063248a9ca3146102615780632d9c7a3f146102815780632f2ff15d146102a157806336568abe146102c15780633ad3033e146102e15780633f4ba83a1461030157806341273657146103165780635c975abb146103365780635f2a25181461034b57806374a99f8b1461036b57806377bed5ed1461038b5780638456cb59146103b85780639013ae08146103cd57806391d14854146103ed578063992642e51461040d578063a217fddf1461042d578063ae86ed8914610442578063c31c9c0714610462578063d547741f14610482578063d72b11bd146104a2578063da058ae3146104c2578063dda4fa8f146104e2578063df7919b914610502578063e275c88714610515578063e63ab1e914610528578063eaf94aec1461054a575b600080fd5b34801561018457600080fd5b50610198610193366004611bd2565b610577565b6040516101a59190612125565b60405180910390f35b3480156101ba57600080fd5b506101ce6101c9366004611c6f565b6105ae565b6040516101a59392919061224b565b6101e56105d7565b6040516101a59190612133565b3480156101fe57600080fd5b50600154610212906001600160a01b031681565b6040516101a59190612056565b34801561022b57600080fd5b506101ce61023a366004611b74565b6105ef565b34801561024b57600080fd5b5061025f61025a366004611a10565b61063b565b005b34801561026d57600080fd5b506101e561027c366004611b74565b6106c6565b34801561028d57600080fd5b506101e561029c366004611c35565b6106db565b3480156102ad57600080fd5b5061025f6102bc366004611b95565b610728565b3480156102cd57600080fd5b5061025f6102dc366004611b95565b610749565b3480156102ed57600080fd5b5061025f6102fc366004611c14565b61077f565b34801561030d57600080fd5b5061025f610801565b34801561032257600080fd5b5061025f610331366004611a10565b610824565b34801561034257600080fd5b506101986108a6565b34801561035757600080fd5b506101e5610366366004611a31565b6108b6565b34801561037757600080fd5b5061025f610386366004611cdc565b610974565b34801561039757600080fd5b506003546103ab906001600160a01b031681565b6040516101a59190612141565b3480156103c457600080fd5b5061025f6109c0565b3480156103d957600080fd5b5061025f6103e8366004611a10565b6109e0565b3480156103f957600080fd5b50610198610408366004611b95565b610a62565b34801561041957600080fd5b50600554610212906001600160a01b031681565b34801561043957600080fd5b506101e5600081565b34801561044e57600080fd5b50600654610212906001600160a01b031681565b34801561046e57600080fd5b50600054610212906001600160a01b031681565b34801561048e57600080fd5b5061025f61049d366004611b95565b610a8d565b3480156104ae57600080fd5b50600754610212906001600160a01b031681565b3480156104ce57600080fd5b5061025f6104dd366004611a10565b610aa9565b3480156104ee57600080fd5b5061025f6104fd366004611a10565b610b2b565b6101e5610510366004611a81565b610bad565b6101e5610523366004611a81565b610be4565b34801561053457600080fd5b506101e560008051602061244983398151915281565b34801561055657600080fd5b506101e5610565366004611b74565b60046020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b14806105a857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008060006105c961023a856105c3886106db565b90610c0b565b919790965090945092505050565b60006105e1610c17565b6105ea33610c3e565b905090565b60015460055482916000918291610613916001600160a01b039182169116856108b6565b600654600554919350610633916001600160a01b039182169116866108b6565b929491935050565b600061064681610d0e565b6001600160a01b0382166106755760405162461bcd60e51b815260040161066c906121a0565b60405180910390fd5b6005546001600160a01b03838116911614156106a35760405162461bcd60e51b815260040161066c90612180565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526002602052604090206001015490565b80516000818152600460205260408120549091908061072157506000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec545b9392505050565b610731826106c6565b61073a81610d0e565b6107448383610d18565b505050565b6001600160a01b03811633146107715760405162461bcd60e51b815260040161066c90612200565b61077b8282610d9e565b5050565b600061078a81610d0e565b6001600160a01b0382166107b05760405162461bcd60e51b815260040161066c906121a0565b6003546001600160a01b03838116911614156107de5760405162461bcd60e51b815260040161066c90612180565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061244983398151915261081981610d0e565b610821610e05565b50565b600061082f81610d0e565b6001600160a01b0382166108555760405162461bcd60e51b815260040161066c906121a0565b6000546001600160a01b03838116911614156108835760405162461bcd60e51b815260040161066c90612180565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b600154600160a01b900460ff1690565b60006060806108c58686610e54565b6000546040516307c0329d60e21b81529192506001600160a01b031690631f00ca74906108f89087908590600401612210565b60006040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094c9190810190611b19565b915081600081518110610961576109616123d7565b6020026020010151925050509392505050565b600061097f81610d0e565b6000838152600460205260409020548214156109ad5760405162461bcd60e51b815260040161066c90612180565b5060009182526004602052604090912055565b6000805160206124498339815191526109d881610d0e565b610821610fe5565b60006109eb81610d0e565b6001600160a01b038216610a115760405162461bcd60e51b815260040161066c906121a0565b6006546001600160a01b0383811691161415610a3f5760405162461bcd60e51b815260040161066c90612180565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a96826106c6565b610a9f81610d0e565b6107448383610d9e565b6000610ab481610d0e565b6001600160a01b038216610ada5760405162461bcd60e51b815260040161066c906121a0565b6001546001600160a01b0383811691161415610b085760405162461bcd60e51b815260040161066c90612180565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b3681610d0e565b6001600160a01b038216610b5c5760405162461bcd60e51b815260040161066c906121a0565b6007546001600160a01b0383811691161415610b8a5760405162461bcd60e51b815260040161066c90612180565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610bb7610c17565b610bcd85610bc8856105c3886106db565b611028565b610bd93385858561121a565b90505b949350505050565b6000610bee610c17565b610bff85610bc8856105c3886106db565b610bd933858585611419565b600061072182846122e8565b610c1f6108a6565b15610c3c5760405162461bcd60e51b815260040161066c90612190565b565b6003546040516335313c2160e11b815260009182916001600160a01b0390911690636a62784290610c73908690600401612056565b602060405180830381600087803b158015610c8d57600080fd5b505af1158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc59190611cbb565b9050826001600160a01b03167fe6fdadff80ae44015b9aa37d4edb70f70a8db7535a0df98de6dc5ffd11ec0c2f82604051610d009190612133565b60405180910390a292915050565b610821813361150a565b610d228282610a62565b61077b5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610da88282610a62565b1561077b5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610e0d61156e565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610e4a9190612056565b60405180910390a1565b6001546060906001600160a01b0384811691161480610e8057506001546001600160a01b038381169116145b15610f4a57604080516002808252606082018352600092602083019080368337019050506001549091506001600160a01b03858116911614610ec25783610ecf565b6001546001600160a01b03165b81600081518110610ee257610ee26123d7565b6001600160a01b039283166020918202929092010152600154848216911614610f0b5782610f18565b6001546001600160a01b03165b81600181518110610f2b57610f2b6123d7565b6001600160a01b039092166020928302919091019091015290506105a8565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110610f8157610f816123d7565b6001600160a01b0392831660209182029290920101526001805483519216918391908110610fb157610fb16123d7565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110610f2b57610f2b6123d7565b610fed610c17565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e3d3390565b6005546001600160a01b038381169116141561105a5760075461077b906001600160a01b038481169133911684611592565b6001600160a01b0382166111b257600154600554600091611088916001600160a01b039182169116846108b6565b9050803410156110aa5760405162461bcd60e51b815260040161066c906121b0565b6007546040516000916001600160a01b03169083906110c890611ffc565b60006040518083038185875af1925050503d8060008114611105576040519150601f19603f3d011682016040523d82523d6000602084013e61110a565b606091505b505090508061112b5760405162461bcd60e51b815260040161066c906121c0565b813411156111ac57600061113f34846115ea565b9050336001600160a01b03168160405161115890611ffc565b60006040518083038185875af1925050503d8060008114611195576040519150601f19603f3d011682016040523d82523d6000602084013e61119a565b606091505b505080925050816111aa57600080fd5b505b50505050565b6006546001600160a01b0383811691161415611202576005546000906111e39084906001600160a01b0316846108b6565b600754909150610744906001600160a01b038581169133911684611592565b60405162461bcd60e51b815260040161066c906121d0565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663b507d4816040518163ffffffff1660e01b815260040160206040518083038186803b15801561126b57600080fd5b505afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a39190611bf3565b60035460405163294cdf0d60e01b81529192506000916001600160a01b039091169063294cdf0d906112d9908a90600401612056565b60206040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190611cbb565b90506000826001600160a01b0316630c151fec8989858a8a6040518663ffffffff1660e01b81526004016113619594939291906120d7565b602060405180830381600087803b15801561137b57600080fd5b505af115801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190611cbb565b9050866040516113c39190611ff0565b6040518091039020886001600160a01b03167f32044e50415e96c0068a718b8df9993f4803b2e54518d56c52ef6438a91619aa8389604051611406929190612230565b60405180910390a3979650505050505050565b6003546040516328a0a29f60e11b815260009182916001600160a01b0390911690635141453e9061145490899089908990899060040161208c565b602060405180830381600087803b15801561146e57600080fd5b505af1158015611482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a69190611cbb565b9050846040516114b69190611ff0565b6040518091039020866001600160a01b03167f60579b770d8bde9b5f57c468ffb4acb023252b190304137b45b86b72f66a194083876040516114f9929190612230565b60405180910390a395945050505050565b6115148282610a62565b61077b5761152c816001600160a01b031660146115f6565b6115378360206115f6565b604051602001611548929190612004565b60408051601f198184030181529082905262461bcd60e51b825261066c9160040161214f565b6115766108a6565b610c3c5760405162461bcd60e51b815260040161066c90612170565b6111ac846323b872dd60e01b8585856040516024016115b393929190612064565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611761565b60006107218284612307565b606060006116058360026122e8565b6116109060026122d0565b6001600160401b03811115611627576116276123ed565b6040519080825280601f01601f191660200182016040528015611651576020820181803683370190505b509050600360fc1b8160008151811061166c5761166c6123d7565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061169b5761169b6123d7565b60200101906001600160f81b031916908160001a90535060006116bf8460026122e8565b6116ca9060016122d0565b90505b6001811115611742576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116fe576116fe6123d7565b1a60f81b828281518110611714576117146123d7565b60200101906001600160f81b031916908160001a90535060049490941c9361173b8161237d565b90506116cd565b5083156107215760405162461bcd60e51b815260040161066c90612160565b60006117b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117f09092919063ffffffff16565b80519091501561074457808060200190518101906117d49190611b53565b6107445760405162461bcd60e51b815260040161066c906121f0565b6060610bdc8484600085856001600160a01b0385163b6118225760405162461bcd60e51b815260040161066c906121e0565b600080866001600160a01b0316858760405161183e9190611ff0565b60006040518083038185875af1925050503d806000811461187b576040519150601f19603f3d011682016040523d82523d6000602084013e611880565b606091505b509150915061189082828661189b565b979650505050505050565b606083156118aa575081610721565b8251156118ba5782518084602001fd5b8160405162461bcd60e51b815260040161066c919061214f565b60006118e76118e284612282565b612266565b9050808382526020820190508285602086028201111561190957611909600080fd5b60005b85811015611935578161191f8882611a05565b845250602092830192919091019060010161190c565b5050509392505050565b600061194d6118e2846122a5565b90508281526020810184848401111561196857611968600080fd5b611973848285612345565b509392505050565b80356105a88161240d565b600082601f83011261199a5761199a600080fd5b8151610bdc8482602086016118d4565b80516105a881612421565b80356105a881612429565b80356105a88161242f565b80516105a88161243f565b80356105a88161243f565b600082601f8301126119f5576119f5600080fd5b8135610bdc84826020860161193f565b80516105a881612429565b600060208284031215611a2557611a25600080fd5b6000610bdc848461197b565b600080600060608486031215611a4957611a49600080fd5b6000611a55868661197b565b9350506020611a668682870161197b565b9250506040611a77868287016119b5565b9150509250925092565b60008060008060808587031215611a9a57611a9a600080fd5b6000611aa6878761197b565b94505060208501356001600160401b03811115611ac557611ac5600080fd5b611ad1878288016119e1565b9350506040611ae2878288016119b5565b92505060608501356001600160401b03811115611b0157611b01600080fd5b611b0d878288016119e1565b91505092959194509250565b600060208284031215611b2e57611b2e600080fd5b81516001600160401b03811115611b4757611b47600080fd5b610bdc84828501611986565b600060208284031215611b6857611b68600080fd5b6000610bdc84846119aa565b600060208284031215611b8957611b89600080fd5b6000610bdc84846119b5565b60008060408385031215611bab57611bab600080fd5b6000611bb785856119b5565b9250506020611bc88582860161197b565b9150509250929050565b600060208284031215611be757611be7600080fd5b6000610bdc84846119c0565b600060208284031215611c0857611c08600080fd5b6000610bdc84846119cb565b600060208284031215611c2957611c29600080fd5b6000610bdc84846119d6565b600060208284031215611c4a57611c4a600080fd5b81356001600160401b03811115611c6357611c63600080fd5b610bdc848285016119e1565b60008060408385031215611c8557611c85600080fd5b82356001600160401b03811115611c9e57611c9e600080fd5b611caa858286016119e1565b9250506020611bc8858286016119b5565b600060208284031215611cd057611cd0600080fd5b6000610bdc8484611a05565b60008060408385031215611cf257611cf2600080fd5b6000611caa85856119b5565b6000611d0a8383611d12565b505060200190565b611d1b8161231e565b82525050565b6000611d2b825190565b80845260209384019383018060005b83811015611d5f578151611d4e8882611cfe565b975060208301925050600101611d3a565b509495945050505050565b801515611d1b565b80611d1b565b6000611d82825190565b611d90818560208601612351565b9290920192915050565b611d1b8161233a565b6000611dad825190565b808452602084019350611dc4818560208601612351565b611dcd81612403565b9093019392505050565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150611e05565b600a81526000602082016953414d455f56414c554560b01b81529150611e05565b5060400190565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150611e05565b600c81526000602082016b5a45524f5f4144445245535360a01b81529150611e05565b60168152600060208201751253959053125117d410565351539517d05353d5539560521b81529150611e05565b600f81526000602082016e1514905394d1915497d19052531151608a1b81529150611e05565b60168152600060208201751253959053125117d410565351539517d351551213d160521b81529150611e05565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611e05565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150611e58565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150611e58565b60006107218284611d78565b6000816105a8565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006120308285611d78565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150610bdc8284611d78565b602081016105a88284611d12565b606081016120728286611d12565b61207f6020830185611d12565b610bdc6040830184611d72565b6080810161209a8287611d12565b81810360208301526120ac8186611da3565b90506120bb6040830185611d72565b81810360608301526120cd8184611da3565b9695505050505050565b60a081016120e58288611d12565b81810360208301526120f78187611da3565b90506121066040830186611d72565b6121136060830185611d72565b81810360808301526118908184611da3565b602081016105a88284611d6a565b602081016105a88284611d72565b602081016105a88284611d9a565b602080825281016107218184611da3565b602080825281016105a881611dd7565b602080825281016105a881611e0c565b602080825281016105a881611e37565b602080825281016105a881611e5f565b602080825281016105a881611e86565b602080825281016105a881611ea9565b602080825281016105a881611ed6565b602080825281016105a881611efc565b602080825281016105a881611f29565b602080825281016105a881611f5d565b602080825281016105a881611fa4565b6040810161221e8285611d72565b8181036020830152610bdc8184611d21565b6040810161223e8285611d72565b6107216020830184611d72565b606081016122598286611d72565b61207f6020830185611d72565b600061227160405190565b905061227d8282612394565b919050565b60006001600160401b0382111561229b5761229b6123ed565b5060209081020190565b60006001600160401b038211156122be576122be6123ed565b6122c782612403565b60200192915050565b600082198211156122e3576122e36123c1565b500190565b6000816000190483118215151615612302576123026123c1565b500290565b600082821015612319576123196123c1565b500390565b60006001600160a01b0382166105a8565b60006105a88261231e565b60006105a88261232f565b82818337506000910152565b60005b8381101561236c578181015183820152602001612354565b838111156111ac5750506000910152565b60008161238c5761238c6123c1565b506000190190565b61239d82612403565b81018181106001600160401b03821117156123ba576123ba6123ed565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6124168161231e565b811461082157600080fd5b801515612416565b80612416565b6001600160e01b03198116612416565b6124168161232f56fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220e260108dc9c9783e550fc41643739c1ff63d339163ad4aac722c7ae46c79c4a264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101735760003560e01c806301ffc9a7146101785780631003d9c9146101ae57806312553e41146101dd57806317fcb39b146101f25780631cfd11c61461021f57806323af4e171461023f578063248a9ca3146102615780632d9c7a3f146102815780632f2ff15d146102a157806336568abe146102c15780633ad3033e146102e15780633f4ba83a1461030157806341273657146103165780635c975abb146103365780635f2a25181461034b57806374a99f8b1461036b57806377bed5ed1461038b5780638456cb59146103b85780639013ae08146103cd57806391d14854146103ed578063992642e51461040d578063a217fddf1461042d578063ae86ed8914610442578063c31c9c0714610462578063d547741f14610482578063d72b11bd146104a2578063da058ae3146104c2578063dda4fa8f146104e2578063df7919b914610502578063e275c88714610515578063e63ab1e914610528578063eaf94aec1461054a575b600080fd5b34801561018457600080fd5b50610198610193366004611bd2565b610577565b6040516101a59190612125565b60405180910390f35b3480156101ba57600080fd5b506101ce6101c9366004611c6f565b6105ae565b6040516101a59392919061224b565b6101e56105d7565b6040516101a59190612133565b3480156101fe57600080fd5b50600154610212906001600160a01b031681565b6040516101a59190612056565b34801561022b57600080fd5b506101ce61023a366004611b74565b6105ef565b34801561024b57600080fd5b5061025f61025a366004611a10565b61063b565b005b34801561026d57600080fd5b506101e561027c366004611b74565b6106c6565b34801561028d57600080fd5b506101e561029c366004611c35565b6106db565b3480156102ad57600080fd5b5061025f6102bc366004611b95565b610728565b3480156102cd57600080fd5b5061025f6102dc366004611b95565b610749565b3480156102ed57600080fd5b5061025f6102fc366004611c14565b61077f565b34801561030d57600080fd5b5061025f610801565b34801561032257600080fd5b5061025f610331366004611a10565b610824565b34801561034257600080fd5b506101986108a6565b34801561035757600080fd5b506101e5610366366004611a31565b6108b6565b34801561037757600080fd5b5061025f610386366004611cdc565b610974565b34801561039757600080fd5b506003546103ab906001600160a01b031681565b6040516101a59190612141565b3480156103c457600080fd5b5061025f6109c0565b3480156103d957600080fd5b5061025f6103e8366004611a10565b6109e0565b3480156103f957600080fd5b50610198610408366004611b95565b610a62565b34801561041957600080fd5b50600554610212906001600160a01b031681565b34801561043957600080fd5b506101e5600081565b34801561044e57600080fd5b50600654610212906001600160a01b031681565b34801561046e57600080fd5b50600054610212906001600160a01b031681565b34801561048e57600080fd5b5061025f61049d366004611b95565b610a8d565b3480156104ae57600080fd5b50600754610212906001600160a01b031681565b3480156104ce57600080fd5b5061025f6104dd366004611a10565b610aa9565b3480156104ee57600080fd5b5061025f6104fd366004611a10565b610b2b565b6101e5610510366004611a81565b610bad565b6101e5610523366004611a81565b610be4565b34801561053457600080fd5b506101e560008051602061244983398151915281565b34801561055657600080fd5b506101e5610565366004611b74565b60046020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b14806105a857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008060006105c961023a856105c3886106db565b90610c0b565b919790965090945092505050565b60006105e1610c17565b6105ea33610c3e565b905090565b60015460055482916000918291610613916001600160a01b039182169116856108b6565b600654600554919350610633916001600160a01b039182169116866108b6565b929491935050565b600061064681610d0e565b6001600160a01b0382166106755760405162461bcd60e51b815260040161066c906121a0565b60405180910390fd5b6005546001600160a01b03838116911614156106a35760405162461bcd60e51b815260040161066c90612180565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526002602052604090206001015490565b80516000818152600460205260408120549091908061072157506000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec545b9392505050565b610731826106c6565b61073a81610d0e565b6107448383610d18565b505050565b6001600160a01b03811633146107715760405162461bcd60e51b815260040161066c90612200565b61077b8282610d9e565b5050565b600061078a81610d0e565b6001600160a01b0382166107b05760405162461bcd60e51b815260040161066c906121a0565b6003546001600160a01b03838116911614156107de5760405162461bcd60e51b815260040161066c90612180565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061244983398151915261081981610d0e565b610821610e05565b50565b600061082f81610d0e565b6001600160a01b0382166108555760405162461bcd60e51b815260040161066c906121a0565b6000546001600160a01b03838116911614156108835760405162461bcd60e51b815260040161066c90612180565b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b600154600160a01b900460ff1690565b60006060806108c58686610e54565b6000546040516307c0329d60e21b81529192506001600160a01b031690631f00ca74906108f89087908590600401612210565b60006040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094c9190810190611b19565b915081600081518110610961576109616123d7565b6020026020010151925050509392505050565b600061097f81610d0e565b6000838152600460205260409020548214156109ad5760405162461bcd60e51b815260040161066c90612180565b5060009182526004602052604090912055565b6000805160206124498339815191526109d881610d0e565b610821610fe5565b60006109eb81610d0e565b6001600160a01b038216610a115760405162461bcd60e51b815260040161066c906121a0565b6006546001600160a01b0383811691161415610a3f5760405162461bcd60e51b815260040161066c90612180565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a96826106c6565b610a9f81610d0e565b6107448383610d9e565b6000610ab481610d0e565b6001600160a01b038216610ada5760405162461bcd60e51b815260040161066c906121a0565b6001546001600160a01b0383811691161415610b085760405162461bcd60e51b815260040161066c90612180565b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b3681610d0e565b6001600160a01b038216610b5c5760405162461bcd60e51b815260040161066c906121a0565b6007546001600160a01b0383811691161415610b8a5760405162461bcd60e51b815260040161066c90612180565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610bb7610c17565b610bcd85610bc8856105c3886106db565b611028565b610bd93385858561121a565b90505b949350505050565b6000610bee610c17565b610bff85610bc8856105c3886106db565b610bd933858585611419565b600061072182846122e8565b610c1f6108a6565b15610c3c5760405162461bcd60e51b815260040161066c90612190565b565b6003546040516335313c2160e11b815260009182916001600160a01b0390911690636a62784290610c73908690600401612056565b602060405180830381600087803b158015610c8d57600080fd5b505af1158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc59190611cbb565b9050826001600160a01b03167fe6fdadff80ae44015b9aa37d4edb70f70a8db7535a0df98de6dc5ffd11ec0c2f82604051610d009190612133565b60405180910390a292915050565b610821813361150a565b610d228282610a62565b61077b5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610da88282610a62565b1561077b5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610e0d61156e565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610e4a9190612056565b60405180910390a1565b6001546060906001600160a01b0384811691161480610e8057506001546001600160a01b038381169116145b15610f4a57604080516002808252606082018352600092602083019080368337019050506001549091506001600160a01b03858116911614610ec25783610ecf565b6001546001600160a01b03165b81600081518110610ee257610ee26123d7565b6001600160a01b039283166020918202929092010152600154848216911614610f0b5782610f18565b6001546001600160a01b03165b81600181518110610f2b57610f2b6123d7565b6001600160a01b039092166020928302919091019091015290506105a8565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110610f8157610f816123d7565b6001600160a01b0392831660209182029290920101526001805483519216918391908110610fb157610fb16123d7565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110610f2b57610f2b6123d7565b610fed610c17565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e3d3390565b6005546001600160a01b038381169116141561105a5760075461077b906001600160a01b038481169133911684611592565b6001600160a01b0382166111b257600154600554600091611088916001600160a01b039182169116846108b6565b9050803410156110aa5760405162461bcd60e51b815260040161066c906121b0565b6007546040516000916001600160a01b03169083906110c890611ffc565b60006040518083038185875af1925050503d8060008114611105576040519150601f19603f3d011682016040523d82523d6000602084013e61110a565b606091505b505090508061112b5760405162461bcd60e51b815260040161066c906121c0565b813411156111ac57600061113f34846115ea565b9050336001600160a01b03168160405161115890611ffc565b60006040518083038185875af1925050503d8060008114611195576040519150601f19603f3d011682016040523d82523d6000602084013e61119a565b606091505b505080925050816111aa57600080fd5b505b50505050565b6006546001600160a01b0383811691161415611202576005546000906111e39084906001600160a01b0316846108b6565b600754909150610744906001600160a01b038581169133911684611592565b60405162461bcd60e51b815260040161066c906121d0565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663b507d4816040518163ffffffff1660e01b815260040160206040518083038186803b15801561126b57600080fd5b505afa15801561127f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a39190611bf3565b60035460405163294cdf0d60e01b81529192506000916001600160a01b039091169063294cdf0d906112d9908a90600401612056565b60206040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190611cbb565b90506000826001600160a01b0316630c151fec8989858a8a6040518663ffffffff1660e01b81526004016113619594939291906120d7565b602060405180830381600087803b15801561137b57600080fd5b505af115801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190611cbb565b9050866040516113c39190611ff0565b6040518091039020886001600160a01b03167f32044e50415e96c0068a718b8df9993f4803b2e54518d56c52ef6438a91619aa8389604051611406929190612230565b60405180910390a3979650505050505050565b6003546040516328a0a29f60e11b815260009182916001600160a01b0390911690635141453e9061145490899089908990899060040161208c565b602060405180830381600087803b15801561146e57600080fd5b505af1158015611482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a69190611cbb565b9050846040516114b69190611ff0565b6040518091039020866001600160a01b03167f60579b770d8bde9b5f57c468ffb4acb023252b190304137b45b86b72f66a194083876040516114f9929190612230565b60405180910390a395945050505050565b6115148282610a62565b61077b5761152c816001600160a01b031660146115f6565b6115378360206115f6565b604051602001611548929190612004565b60408051601f198184030181529082905262461bcd60e51b825261066c9160040161214f565b6115766108a6565b610c3c5760405162461bcd60e51b815260040161066c90612170565b6111ac846323b872dd60e01b8585856040516024016115b393929190612064565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611761565b60006107218284612307565b606060006116058360026122e8565b6116109060026122d0565b6001600160401b03811115611627576116276123ed565b6040519080825280601f01601f191660200182016040528015611651576020820181803683370190505b509050600360fc1b8160008151811061166c5761166c6123d7565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061169b5761169b6123d7565b60200101906001600160f81b031916908160001a90535060006116bf8460026122e8565b6116ca9060016122d0565b90505b6001811115611742576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116fe576116fe6123d7565b1a60f81b828281518110611714576117146123d7565b60200101906001600160f81b031916908160001a90535060049490941c9361173b8161237d565b90506116cd565b5083156107215760405162461bcd60e51b815260040161066c90612160565b60006117b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117f09092919063ffffffff16565b80519091501561074457808060200190518101906117d49190611b53565b6107445760405162461bcd60e51b815260040161066c906121f0565b6060610bdc8484600085856001600160a01b0385163b6118225760405162461bcd60e51b815260040161066c906121e0565b600080866001600160a01b0316858760405161183e9190611ff0565b60006040518083038185875af1925050503d806000811461187b576040519150601f19603f3d011682016040523d82523d6000602084013e611880565b606091505b509150915061189082828661189b565b979650505050505050565b606083156118aa575081610721565b8251156118ba5782518084602001fd5b8160405162461bcd60e51b815260040161066c919061214f565b60006118e76118e284612282565b612266565b9050808382526020820190508285602086028201111561190957611909600080fd5b60005b85811015611935578161191f8882611a05565b845250602092830192919091019060010161190c565b5050509392505050565b600061194d6118e2846122a5565b90508281526020810184848401111561196857611968600080fd5b611973848285612345565b509392505050565b80356105a88161240d565b600082601f83011261199a5761199a600080fd5b8151610bdc8482602086016118d4565b80516105a881612421565b80356105a881612429565b80356105a88161242f565b80516105a88161243f565b80356105a88161243f565b600082601f8301126119f5576119f5600080fd5b8135610bdc84826020860161193f565b80516105a881612429565b600060208284031215611a2557611a25600080fd5b6000610bdc848461197b565b600080600060608486031215611a4957611a49600080fd5b6000611a55868661197b565b9350506020611a668682870161197b565b9250506040611a77868287016119b5565b9150509250925092565b60008060008060808587031215611a9a57611a9a600080fd5b6000611aa6878761197b565b94505060208501356001600160401b03811115611ac557611ac5600080fd5b611ad1878288016119e1565b9350506040611ae2878288016119b5565b92505060608501356001600160401b03811115611b0157611b01600080fd5b611b0d878288016119e1565b91505092959194509250565b600060208284031215611b2e57611b2e600080fd5b81516001600160401b03811115611b4757611b47600080fd5b610bdc84828501611986565b600060208284031215611b6857611b68600080fd5b6000610bdc84846119aa565b600060208284031215611b8957611b89600080fd5b6000610bdc84846119b5565b60008060408385031215611bab57611bab600080fd5b6000611bb785856119b5565b9250506020611bc88582860161197b565b9150509250929050565b600060208284031215611be757611be7600080fd5b6000610bdc84846119c0565b600060208284031215611c0857611c08600080fd5b6000610bdc84846119cb565b600060208284031215611c2957611c29600080fd5b6000610bdc84846119d6565b600060208284031215611c4a57611c4a600080fd5b81356001600160401b03811115611c6357611c63600080fd5b610bdc848285016119e1565b60008060408385031215611c8557611c85600080fd5b82356001600160401b03811115611c9e57611c9e600080fd5b611caa858286016119e1565b9250506020611bc8858286016119b5565b600060208284031215611cd057611cd0600080fd5b6000610bdc8484611a05565b60008060408385031215611cf257611cf2600080fd5b6000611caa85856119b5565b6000611d0a8383611d12565b505060200190565b611d1b8161231e565b82525050565b6000611d2b825190565b80845260209384019383018060005b83811015611d5f578151611d4e8882611cfe565b975060208301925050600101611d3a565b509495945050505050565b801515611d1b565b80611d1b565b6000611d82825190565b611d90818560208601612351565b9290920192915050565b611d1b8161233a565b6000611dad825190565b808452602084019350611dc4818560208601612351565b611dcd81612403565b9093019392505050565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150611e05565b600a81526000602082016953414d455f56414c554560b01b81529150611e05565b5060400190565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150611e05565b600c81526000602082016b5a45524f5f4144445245535360a01b81529150611e05565b60168152600060208201751253959053125117d410565351539517d05353d5539560521b81529150611e05565b600f81526000602082016e1514905394d1915497d19052531151608a1b81529150611e05565b60168152600060208201751253959053125117d410565351539517d351551213d160521b81529150611e05565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611e05565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150611e58565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150611e58565b60006107218284611d78565b6000816105a8565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006120308285611d78565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150610bdc8284611d78565b602081016105a88284611d12565b606081016120728286611d12565b61207f6020830185611d12565b610bdc6040830184611d72565b6080810161209a8287611d12565b81810360208301526120ac8186611da3565b90506120bb6040830185611d72565b81810360608301526120cd8184611da3565b9695505050505050565b60a081016120e58288611d12565b81810360208301526120f78187611da3565b90506121066040830186611d72565b6121136060830185611d72565b81810360808301526118908184611da3565b602081016105a88284611d6a565b602081016105a88284611d72565b602081016105a88284611d9a565b602080825281016107218184611da3565b602080825281016105a881611dd7565b602080825281016105a881611e0c565b602080825281016105a881611e37565b602080825281016105a881611e5f565b602080825281016105a881611e86565b602080825281016105a881611ea9565b602080825281016105a881611ed6565b602080825281016105a881611efc565b602080825281016105a881611f29565b602080825281016105a881611f5d565b602080825281016105a881611fa4565b6040810161221e8285611d72565b8181036020830152610bdc8184611d21565b6040810161223e8285611d72565b6107216020830184611d72565b606081016122598286611d72565b61207f6020830185611d72565b600061227160405190565b905061227d8282612394565b919050565b60006001600160401b0382111561229b5761229b6123ed565b5060209081020190565b60006001600160401b038211156122be576122be6123ed565b6122c782612403565b60200192915050565b600082198211156122e3576122e36123c1565b500190565b6000816000190483118215151615612302576123026123c1565b500290565b600082821015612319576123196123c1565b500390565b60006001600160a01b0382166105a8565b60006105a88261231e565b60006105a88261232f565b82818337506000910152565b60005b8381101561236c578181015183820152602001612354565b838111156111ac5750506000910152565b60008161238c5761238c6123c1565b506000190190565b61239d82612403565b81018181106001600160401b03821117156123ba576123ba6123ed565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6124168161231e565b811461082157600080fd5b801515612416565b80612416565b6001600160e01b03198116612416565b6124168161232f56fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220e260108dc9c9783e550fc41643739c1ff63d339163ad4aac722c7ae46c79c4a264736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "From this smart contract we can mint new Soulbound Identities and Soul Name NFTs. This minting can be done paying a fee in ETH, USDC or $MASA",
    "kind": "dev",
    "methods": {
      "_getSwapAmounts(uint256)": {
        "details": "Returns all current pricing and amount informations for a purchase",
        "returns": {
          "priceInETH": "Current pric in native token (ETH)",
          "priceInStableCoin": "Current price in stable coin",
          "priceInUtilityToken": "Current price in utility token ($MASA)"
        }
      },
      "constructor": {
        "details": "Creates a new Soul Store, that has the role to minting new Soulbound Identities and Soul Name NFTs, paying a fee",
        "params": {
          "_nameRegistrationPricePerYear": "Price of the default name registering in stable coin per year",
          "_reserveWallet": "Wallet that will receive the fee",
          "_soulBoundIdentity": "Address of the Soulbound identity contract",
          "_stableCoin": "Stable coin to pay the fee in (USDC)",
          "_swapRouter": "Swap router address",
          "_utilityToken": "Utility token to pay the fee in ($MASA)",
          "_wrappedNativeToken": "Wrapped native token address",
          "admin": "Administrator of the smart contract"
        }
      },
      "getNameRegistrationPricePerYear(string)": {
        "details": "Returns the price for registering per year in USD for an specific name length",
        "params": {
          "nameLength": "Length of the name"
        },
        "returns": {
          "_0": "Price in stable coin for that name length"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "Sets an emergency stop mechanism that can be triggered by an authorized account."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseIdentity()": {
        "details": "This function allows the purchase of a soulbound identity for free",
        "returns": {
          "_0": "TokenId of the new soulbound identity"
        }
      },
      "purchaseIdentityAndName(address,string,uint256,string)": {
        "details": "This function allows the purchase of a soulbound identity and name using stable coin (USDC), native token (ETH) or utility token ($MASA)",
        "params": {
          "_tokenURI": "URI of the NFT",
          "name": "Name of the new soul name",
          "paymentMethod": "Address of token that user want to pay",
          "yearsPeriod": "Years of validity of the name"
        },
        "returns": {
          "_0": "TokenId of the new soulbound identity"
        }
      },
      "purchaseName(address,string,uint256,string)": {
        "details": "This function allows the purchase of a soul name using stable coin (USDC), native token (ETH) or utility token ($MASA)",
        "params": {
          "_tokenURI": "URI of the NFT",
          "name": "Name of the new soul name",
          "paymentMethod": "Address of token that user want to pay",
          "yearsPeriod": "Years of validity of the name"
        },
        "returns": {
          "_0": "TokenId of the new sou name"
        }
      },
      "purchaseNameInfo(string,uint256)": {
        "details": "Returns all current pricing and amount informations for a purchase",
        "params": {
          "name": "Name of the new soul name",
          "yearsPeriod": "Years of validity of the name"
        },
        "returns": {
          "priceInETH": "Current price of the name minting in native token (ETH)",
          "priceInStableCoin": "Current price of the name minting in stable coin",
          "priceInUtilityToken": "Current price of the name minting in utility token ($MASA)"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setNameRegistrationPricePerYear(uint256,uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_nameLength": "Length of the name",
          "_nameRegistrationPricePerYear": "New price of the name registering per one year in stable coin for that name length per year"
        }
      },
      "setReserveWallet(address)": {
        "details": "Let change the reserve walled. It can be triggered by an authorized account.",
        "params": {
          "_reserveWallet": "New reserve wallet"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_soulboundIdentity": "New SoulboundIdentity contract address"
        }
      },
      "setStableCoin(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_stableCoin": "New stable coin to pay the fee in"
        }
      },
      "setSwapRouter(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_swapRouter": "New swap router address"
        }
      },
      "setUtilityToken(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_utilityToken": "New utility token to pay the fee in"
        }
      },
      "setWrappedNativeToken(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_wrappedNativeToken": "New wrapped native token address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unsets an emergency stop mechanism. It can be triggered by an authorized account."
      }
    },
    "title": "Soul Store",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_getSwapAmounts(uint256)": {
        "notice": "Returns the price of minting"
      },
      "constructor": {
        "notice": "Creates a new Soul Store"
      },
      "getNameRegistrationPricePerYear(string)": {
        "notice": "Returns the price of register a name per year in stable coin for an specific length"
      },
      "pause()": {
        "notice": "Pauses the operations in the smart contract"
      },
      "purchaseIdentity()": {
        "notice": "Mints a new Soulbound Identity purchasing it"
      },
      "purchaseIdentityAndName(address,string,uint256,string)": {
        "notice": "Mints a new Soulbound Identity and Name purchasing it"
      },
      "purchaseName(address,string,uint256,string)": {
        "notice": "Mints a new Soul Name purchasing it"
      },
      "purchaseNameInfo(string,uint256)": {
        "notice": "Returns the price of the name minting"
      },
      "setNameRegistrationPricePerYear(uint256,uint256)": {
        "notice": "Sets the price of the name registering per one year in stable coin"
      },
      "setReserveWallet(address)": {
        "notice": "Set the reserve wallet"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this store"
      },
      "setStableCoin(address)": {
        "notice": "Sets the stable coin to pay the fee in (USDC)"
      },
      "setSwapRouter(address)": {
        "notice": "Sets the swap router address"
      },
      "setUtilityToken(address)": {
        "notice": "Sets the utility token to pay the fee in ($MASA)"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Sets the wrapped native token address"
      },
      "unpause()": {
        "notice": "Unpauses the operations in the smart contract"
      }
    },
    "notice": "Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6104,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "swapRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6106,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 410,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4960,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISoulboundIdentity)6396"
      },
      {
        "astId": 4964,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "nameRegistrationPricePerYear",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4966,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "stableCoin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4968,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "utilityToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4970,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "reserveWallet",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulboundIdentity)6396": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulStore.sol:SoulStore",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulStore.sol:SoulStore",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}