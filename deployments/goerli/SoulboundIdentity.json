{
  "address": "0x270265B1c6b31ae53f75BC2f6a5D5F7f422BB9e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSoulName",
      "outputs": [
        {
          "internalType": "contract ISoulName",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "sbtName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "linked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintIdentityWithName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulName",
          "name": "_soulName",
          "type": "address"
        }
      ],
      "name": "setSoulName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulName",
      "outputs": [
        {
          "internalType": "contract ISoulName",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokenOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc94f5286cca1cb46f71afaaa9fbb778f3291dce193b709e56cfb2e5d8edec0c6",
  "receipt": {
    "to": null,
    "from": "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "contractAddress": "0x270265B1c6b31ae53f75BC2f6a5D5F7f422BB9e8",
    "transactionIndex": 1,
    "gasUsed": "2300816",
    "logsBloom": "0x
    "blockHash": "0xc71dccdc620778f082ff07fa82413eabe69cae483a691108c8854e1f028cffec",
    "transactionHash": "0xc94f5286cca1cb46f71afaaa9fbb778f3291dce193b709e56cfb2e5d8edec0c6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8093087,
        "transactionHash": "0xc94f5286cca1cb46f71afaaa9fbb778f3291dce193b709e56cfb2e5d8edec0c6",
        "address": "0x270265B1c6b31ae53f75BC2f6a5D5F7f422BB9e8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc71dccdc620778f082ff07fa82413eabe69cae483a691108c8854e1f028cffec"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 8093087,
        "transactionHash": "0xc94f5286cca1cb46f71afaaa9fbb778f3291dce193b709e56cfb2e5d8edec0c6",
        "address": "0x270265B1c6b31ae53f75BC2f6a5D5F7f422BB9e8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f",
          "0x0000000000000000000000003c8d9f130970358b7e8cbc1dbd0a1eba6ebe368f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc71dccdc620778f082ff07fa82413eabe69cae483a691108c8854e1f028cffec"
      }
    ],
    "blockNumber": 8093087,
    "cumulativeGasUsed": "2328167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c8D9f130970358b7E8cbc1DbD0a1EbA6EBE368F",
    "https://beta.metadata.masa.finance/v1.0/identity/"
  ],
  "numDeployments": 6,
  "solcInputHash": "adb7df6c4da0f29fe9daa4da8d1fe01f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoulName\",\"outputs\":[{\"internalType\":\"contract ISoulName\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sbtName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"linked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintIdentityWithName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulName\",\"name\":\"_soulName\",\"type\":\"address\"}],\"name\":\"setSoulName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulName\",\"outputs\":[{\"internalType\":\"contract ISoulName\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"Soulbound identity, that inherits from the SBT contract.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {ISBT-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {SBT-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"details\":\"Creates a new soulbound identity, inheriting from the SBT contract.\",\"params\":{\"admin\":\"Administrator of the smart contract\",\"baseTokenURI\":\"Base URI of the token\"}},\"getExtension()\":{\"details\":\"This function returns the extension of the soul name\",\"returns\":{\"_0\":\"Extension of the soul name\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSoulName()\":{\"details\":\"This function returns the address of the SoulName contract linked to this identity\",\"returns\":{\"_0\":\"Address of the SoulName contract\"}},\"getSoulNames(address)\":{\"details\":\"This function queries all the identity names of the specified account\",\"params\":{\"owner\":\"Address of the owner of the identities\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the account\"}},\"getSoulNames(uint256)\":{\"details\":\"This function queries all the identity names of the specified identity Id\",\"params\":{\"tokenId\":\"TokenId of the identity\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the identity Id\"}},\"getTokenData(string)\":{\"details\":\"This function queries the information of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"active\":\"`true` if the soul name is active, `false` otherwise\",\"expirationDate\":\"Expiration date of the soul name\",\"identityId\":\"Identity id of the soul name\",\"linked\":\"`true` if the soul name is linked, `false` otherwise\",\"sbtName\":\"Soul name, in upper/lower case and extension\",\"tokenId\":\"SoulName id of the soul name\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAvailable(string)\":{\"details\":\"This function queries if a soul name already exists and is in the available state\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"available\":\"`true` if the soul name is available, `false` otherwise\"}},\"mint(address)\":{\"details\":\"The caller can only mint one identity per address\",\"params\":{\"to\":\"Address of the admin of the new identity\"}},\"mintIdentityWithName(address,string,uint256,string)\":{\"details\":\"The caller can only mint one identity per address, and the name must be unique\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"name\":\"Name of the new identity\",\"to\":\"Address of the admin of the new identity\",\"yearsPeriod\":\"Years of validity of the name\"}},\"name()\":{\"details\":\"See {ISBTMetadata-name}.\"},\"ownerOf(string)\":{\"details\":\"This function returns the owner address of the soul name identity specified by the name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"Address of the owner of the identity\"}},\"ownerOf(uint256)\":{\"details\":\"This function returns the owner address of the identity specified by the tokenId\",\"params\":{\"tokenId\":\"TokenId of the identity\"},\"returns\":{\"_0\":\"Address of the owner of the identity\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setSoulName(address)\":{\"details\":\"The caller must have the admin to call this function\",\"params\":{\"_soulName\":\"Address of the SoulName contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}},\"symbol()\":{\"details\":\"See {ISBTMetadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {ISBTEnumerable-tokenByIndex}.\"},\"tokenOfOwner(address)\":{\"details\":\"This function returns the tokenId of the identity owned by an account\",\"params\":{\"owner\":\"Address of the owner of the identity\"},\"returns\":{\"_0\":\"TokenId of the identity owned by the account\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {ISBTEnumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(address)\":{\"details\":\"This function returns the token URI of the identity owned by an account\",\"params\":{\"owner\":\"Address of the owner of the identity\"},\"returns\":{\"_0\":\"URI of the identity owned by the account\"}},\"tokenURI(string)\":{\"details\":\"This function returns the token URI of the soul name identity specified by the name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"URI of the identity associated to a soul name\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenId\":\"SBT to get the URI of\"},\"returns\":{\"_0\":\"URI of the SBT\"}},\"totalSupply()\":{\"details\":\"See {ISBTEnumerable-totalSupply}.\"}},\"title\":\"Soulbound Identity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates a new soulbound identity\"},\"getExtension()\":{\"notice\":\"Returns the extension of the soul name\"},\"getSoulName()\":{\"notice\":\"Returns the address of the SoulName contract linked to this identity\"},\"getSoulNames(address)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getSoulNames(uint256)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getTokenData(string)\":{\"notice\":\"Returns the information of a soul name\"},\"isAvailable(string)\":{\"notice\":\"Checks if a soul name is available\"},\"mint(address)\":{\"notice\":\"Mints a new soulbound identity\"},\"mintIdentityWithName(address,string,uint256,string)\":{\"notice\":\"Mints a new soulbound identity with a SoulName associated to it\"},\"ownerOf(string)\":{\"notice\":\"Returns the owner address of a soul name\"},\"ownerOf(uint256)\":{\"notice\":\"Returns the owner address of an identity\"},\"setSoulName(address)\":{\"notice\":\"Sets the SoulName contract address linked to this identity\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"tokenOfOwner(address)\":{\"notice\":\"Returns the identity id of an account\"},\"tokenURI(address)\":{\"notice\":\"Returns the URI of the owner of an identity\"},\"tokenURI(string)\":{\"notice\":\"Returns the URI of a soul name\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"notice\":\"Soulbound token that represents an identity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulboundIdentity.sol\":\"SoulboundIdentity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/MasaSBTAuthority.sol\\\";\\n\\n/// @title Soulbound Identity\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents an identity.\\n/// @dev Soulbound identity, that inherits from the SBT contract.\\ncontract SoulboundIdentity is MasaSBTAuthority, ISoulboundIdentity {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    ISoulName public soulName;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound identity\\n    /// @dev Creates a new soulbound identity, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(address admin, string memory baseTokenURI)\\n        MasaSBTAuthority(admin, \\\"Masa Identity\\\", \\\"MID\\\", baseTokenURI)\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulName contract address linked to this identity\\n    /// @dev The caller must have the admin to call this function\\n    /// @param _soulName Address of the SoulName contract\\n    function setSoulName(ISoulName _soulName)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(_soulName) != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(soulName != _soulName, \\\"SAME_VALUE\\\");\\n        soulName = _soulName;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new soulbound identity\\n    /// @dev The caller can only mint one identity per address\\n    /// @param to Address of the admin of the new identity\\n    function mint(address to) public override returns (uint256) {\\n        // Soulbound identity already created!\\n        require(balanceOf(to) < 1, \\\"SB_IDENTITY_ALREADY_CREATED\\\");\\n\\n        return _mintWithCounter(to);\\n    }\\n\\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\\n    /// @dev The caller can only mint one identity per address, and the name must be unique\\n    /// @param to Address of the admin of the new identity\\n    /// @param name Name of the new identity\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) public payable override soulNameAlreadySet returns (uint256) {\\n        uint256 identityId = mint(to);\\n        soulName.mint(to, name, yearsPeriod, _tokenURI);\\n\\n        return identityId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the address of the SoulName contract linked to this identity\\n    /// @dev This function returns the address of the SoulName contract linked to this identity\\n    /// @return Address of the SoulName contract\\n    function getSoulName() public view override returns (ISoulName) {\\n        return soulName;\\n    }\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function returns the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() public view returns (string memory) {\\n        return soulName.getExtension();\\n    }\\n\\n    /// @notice Returns the owner address of an identity\\n    /// @dev This function returns the owner address of the identity specified by the tokenId\\n    /// @param tokenId TokenId of the identity\\n    /// @return Address of the owner of the identity\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        override(SBT, ISBT)\\n        returns (address)\\n    {\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    /// @notice Returns the owner address of a soul name\\n    /// @dev This function returns the owner address of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return Address of the owner of the identity\\n    function ownerOf(string memory name)\\n        public\\n        view\\n        soulNameAlreadySet\\n        returns (address)\\n    {\\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\\n        return super.ownerOf(identityId);\\n    }\\n\\n    /// @notice Returns the URI of a soul name\\n    /// @dev This function returns the token URI of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the identity associated to a soul name\\n    function tokenURI(string memory name)\\n        public\\n        view\\n        soulNameAlreadySet\\n        returns (string memory)\\n    {\\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\\n        return super.tokenURI(identityId);\\n    }\\n\\n    /// @notice Returns the URI of the owner of an identity\\n    /// @dev This function returns the token URI of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return URI of the identity owned by the account\\n    function tokenURI(address owner) public view returns (string memory) {\\n        uint256 tokenId = tokenOfOwner(owner);\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /// @notice Returns the identity id of an account\\n    /// @dev This function returns the tokenId of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return TokenId of the identity owned by the account\\n    function tokenOfOwner(address owner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return super.tokenOfOwnerByIndex(owner, 0);\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(string memory name)\\n        public\\n        view\\n        soulNameAlreadySet\\n        returns (bool available)\\n    {\\n        return soulName.isAvailable(name);\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return linked `true` if the soul name is linked, `false` otherwise\\n    /// @return identityId Identity id of the soul name\\n    /// @return tokenId SoulName id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        return soulName.getTokenData(name);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (string[] memory sbtNames)\\n    {\\n        return soulName.getSoulNames(owner);\\n    }\\n\\n    // SoulName -> SoulboundIdentity.tokenId\\n    // SoulName -> account -> SoulboundIdentity.tokenId\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param tokenId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(uint256 tokenId)\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (string[] memory sbtNames)\\n    {\\n        return soulName.getSoulNames(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier soulNameAlreadySet() {\\n        require(address(soulName) != address(0), \\\"SOULNAME_CONTRACT_NOT_SET\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x5fc061620c3260902e85d047af972eaf8b60262eedc3e07da5b332be3a82acb2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(string memory name)\\n        external\\n        view\\n        returns (bool available);\\n\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0xd2904c9108d1da304483a76d603481595c8f35c97d777e2418c87b9cd07c4e17\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd901f30d43a5a4598c5164ed37b3b1690c0187232711744f35a1cb57733a35e0\",\"license\":\"Apache-2.0\"},\"contracts/tokens/MasaSBT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./SBT/SBT.sol\\\";\\nimport \\\"./SBT/extensions/SBTEnumerable.sol\\\";\\nimport \\\"./SBT/extensions/SBTBurnable.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract MasaSBT is SBT, SBTEnumerable, AccessControl, SBTBurnable {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n\\n    string private _baseTokenURI;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) SBT(name, symbol) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId SBT to get the URI of\\n    /// @return URI of the SBT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(SBT, SBTEnumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(SBT, SBTEnumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x89dbe8fd53a89d430acc8e9393a44d5fa855be3df2c3f50998a7d3307c2730b9\",\"license\":\"Apache-2.0\"},\"contracts/tokens/MasaSBTAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./MasaSBT.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract MasaSBTAuthority is MasaSBT {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) MasaSBT(admin, name, symbol, baseTokenURI) {\\n        _grantRole(MINTER_ROLE, admin);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    function _mintWithCounter(address to)\\n        internal\\n        virtual\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x79d83e1e19d7eca40208f4cabd41a2073f8c088c255343d26e1d69f1709c4b8a\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb73cd9241d2aa847f40371da241cd4d75c1ddca8197bbb7057a3d6906a648db1\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/SBT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./ISBT.sol\\\";\\nimport \\\"./extensions/ISBTMetadata.sol\\\";\\n\\n/// @title SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token is an NFT token that is not transferable.\\ncontract SBT is Context, ERC165, ISBT, ISBTMetadata {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISBT).interfaceId ||\\n            interfaceId == type(ISBTMetadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBT-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(owner != address(0), \\\"SBT: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {ISBT-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"SBT: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        address owner = SBT.ownerOf(tokenId);\\n        return (spender == owner);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Mint} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"SBT: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"SBT: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Mint(to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Burn} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = SBT.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Burn(owner, tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"SBT: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token minting/burning\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting/burning of tokens\\n     *\\n     * Calling conditions:\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xf4a7618244321068aae952c122c6e89a74a9b804c5f3c9ec0294fc7906bd1cd9\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/extensions/ISBTEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional enumeration extension\\n */\\ninterface ISBTEnumerable is ISBT {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe99cd8e57752bf7f068f1db537de02aab76d0167da657075756c4a81f20b7cff\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/extensions/ISBTMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional metadata extension\\n */\\ninterface ISBTMetadata is ISBT {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x43ce10d1350ea5ea6db9702ec6b91042106bce8f4673ab152e3d3165fca6e187\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/extensions/SBTBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../SBT.sol\\\";\\n\\n/**\\n * @title SBT Burnable Token\\n * @dev SBT Token that can be burned (destroyed).\\n */\\nabstract contract SBTBurnable is Context, SBT {\\n    /**\\n     * @dev Burns `tokenId`. See {SBT-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isOwner(_msgSender(), tokenId),\\n            \\\"SBT: caller is not token owner\\\"\\n        );\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xf32909f2990e3e3bde46ba4652053e769c70fae5b82df776109cfb0ea66cf0a9\",\"license\":\"Apache-2.0\"},\"contracts/tokens/SBT/extensions/SBTEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"../SBT.sol\\\";\\nimport \\\"./ISBTEnumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {SBT} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract SBTEnumerable is SBT, ISBTEnumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, SBT)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISBTEnumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < SBT.balanceOf(owner),\\n            \\\"SBTEnumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < SBTEnumerable.totalSupply(),\\n            \\\"SBTEnumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = SBT.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = SBT.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x36947d23e4ac6865dcd3d1f9923379b22f026d8f6e6179a4fb21cd4150e64d5c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a1238038062002a128339810160408190526200003491620002fa565b816040518060400160405280600d81526020016c4d617361204964656e7469747960981b8152506040518060400160405280600381526020016213525160ea1b81525083838383838282816000908051906020019062000096929190620001ce565b508051620000ac906001906020840190620001ce565b50620000be9150600090508562000116565b8051620000d3906009906020840190620001ce565b50505050506200010a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6856200011660201b60201c565b505050505050620004a0565b620001228282620001a1565b6200019d5760008281526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200015c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b828054620001dc90620003ed565b90600052602060002090601f0160209004810192826200020057600085556200024b565b82601f106200021b57805160ff19168380011785556200024b565b828001600101855582156200024b579182015b828111156200024b5782518255916020019190600101906200022e565b50620002599291506200025d565b5090565b5b808211156200025957600081556001016200025e565b60006200028b620002858462000378565b62000359565b905082815260208101848484011115620002a857620002a8600080fd5b620002b5848285620003ba565b509392505050565b8051620001c88162000486565b600082601f830112620002e057620002e0600080fd5b8151620002f284826020860162000274565b949350505050565b60008060408385031215620003125762000312600080fd5b6000620003208585620002bd565b92505060208301516001600160401b03811115620003415762000341600080fd5b6200034f85828601620002ca565b9150509250929050565b60006200036560405190565b90506200037382826200041e565b919050565b60006001600160401b0382111562000394576200039462000466565b6200039f826200047c565b60200192915050565b60006001600160a01b038216620001c8565b60005b83811015620003d7578181015183820152602001620003bd565b83811115620003e7576000848401525b50505050565b6002810460018216806200040257607f821691505b6020821081141562000418576200041862000450565b50919050565b62000429826200047c565b81018181106001600160401b038211171562000449576200044962000466565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6200049181620003a8565b81146200049d57600080fd5b50565b61256280620004b06000396000f3fe6080604052600436106101685760003560e01c806301ffc9a71461016d57806306fdde03146101a35780630f2e68af146101c557806318160ddd146101f2578063248a9ca314610210578063294cdf0d146102305780632f2ff15d146102505780632f745c591461027257806336568abe1461029257806342966c68146102b257806346b2b087146102d25780634cf12d26146103045780634f6ccce7146103245780635141453e146103445780636352211e146103575780636a6278421461038457806370a08231146103a4578063776ce6a1146103c45780637e669891146103d957806391d1485414610406578063920ffa261461042657806393702f331461044657806395d89b4114610466578063965306aa1461047b578063a217fddf1461049b578063b507d481146104b0578063b79636b6146104ce578063c87b56dd146104ee578063d53913931461050e578063d547741f14610530578063ee7a9ec514610550575b600080fd5b34801561017957600080fd5b5061018d610188366004611b07565b610570565b60405161019a9190612115565b60405180910390f35b3480156101af57600080fd5b506101b8610581565b60405161019a919061213f565b3480156101d157600080fd5b50600b546101e5906001600160a01b031681565b60405161019a9190612131565b3480156101fe57600080fd5b506006545b60405161019a9190612123565b34801561021c57600080fd5b5061020361022b366004611ab3565b610613565b34801561023c57600080fd5b5061020361024b366004611962565b610628565b34801561025c57600080fd5b5061027061026b366004611ad4565b610635565b005b34801561027e57600080fd5b5061020361028d366004611a1b565b610656565b34801561029e57600080fd5b506102706102ad366004611ad4565b6106b1565b3480156102be57600080fd5b506102706102cd366004611ab3565b6106e7565b3480156102de57600080fd5b506102f26102ed366004611b49565b610719565b60405161019a96959493929190612150565b34801561031057600080fd5b506101b861031f366004611b49565b6107e7565b34801561033057600080fd5b5061020361033f366004611ab3565b6108b0565b610203610352366004611983565b6108fe565b34801561036357600080fd5b50610377610372366004611ab3565b6109c7565b60405161019a91906120ab565b34801561039057600080fd5b5061020361039f366004611962565b6109d2565b3480156103b057600080fd5b506102036103bf366004611962565b610a05565b3480156103d057600080fd5b506101b8610a49565b3480156103e557600080fd5b506103f96103f4366004611ab3565b610acf565b60405161019a9190612104565b34801561041257600080fd5b5061018d610421366004611ad4565b610b7e565b34801561043257600080fd5b50610377610441366004611b49565b610ba9565b34801561045257600080fd5b506101b8610461366004611962565b610c69565b34801561047257600080fd5b506101b8610c81565b34801561048757600080fd5b5061018d610496366004611b49565b610c90565b3480156104a757600080fd5b50610203600081565b3480156104bc57600080fd5b50600b546001600160a01b03166101e5565b3480156104da57600080fd5b506103f96104e9366004611962565b610d3b565b3480156104fa57600080fd5b506101b8610509366004611ab3565b610d96565b34801561051a57600080fd5b5061020360008051602061250d83398151915281565b34801561053c57600080fd5b5061027061054b366004611ad4565b610dfc565b34801561055c57600080fd5b5061027061056b366004611b28565b610e18565b600061057b82610e9a565b92915050565b606060008054610590906123c0565b80601f01602080910402602001604051908101604052809291908181526020018280546105bc906123c0565b80156106095780601f106105de57610100808354040283529160200191610609565b820191906000526020600020905b8154815290600101906020018083116105ec57829003601f168201915b5050505050905090565b60009081526008602052604090206001015490565b600061057b826000610656565b61063e82610613565b61064781610ebf565b6106518383610ec9565b505050565b600061066183610a05565b82106106885760405162461bcd60e51b815260040161067f906121ef565b60405180910390fd5b506001600160a01b03919091166000908152600460209081526040808320938352929052205490565b6001600160a01b03811633146106d95760405162461bcd60e51b815260040161067f9061226f565b6106e38282610f4f565b5050565b6106f13382610fb6565b61070d5760405162461bcd60e51b815260040161067f9061221f565b61071681610fd9565b50565b600b5460609060009081908190819081906001600160a01b031661074f5760405162461bcd60e51b815260040161067f906121df565b600b546040516346b2b08760e01b81526001600160a01b03909116906346b2b0879061077f908a9060040161213f565b60006040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107d39190810190611bbd565b949c939b5091995097509550909350915050565b600b546060906001600160a01b03166108125760405162461bcd60e51b815260040161067f906121df565b600b546040516346b2b08760e01b81526000916001600160a01b0316906346b2b0879061084390869060040161213f565b60006040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108979190810190611bbd565b505050925050506108a781610d96565b9150505b919050565b60006108bb60065490565b82106108d95760405162461bcd60e51b815260040161067f9061225f565b600682815481106108ec576108ec61249b565b90600052602060002001549050919050565b600b546000906001600160a01b03166109295760405162461bcd60e51b815260040161067f906121df565b6000610934866109d2565b600b546040516303dd904360e41b81529192506001600160a01b031690633dd904309061096b9089908990899089906004016120b9565b602060405180830381600087803b15801561098557600080fd5b505af1158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd9190611c60565b5095945050505050565b600061057b82611073565b600060016109df83610a05565b106109fc5760405162461bcd60e51b815260040161067f906121cf565b61057b826110a8565b60006001600160a01b038216610a2d5760405162461bcd60e51b815260040161067f9061220f565b506001600160a01b031660009081526003602052604090205490565b600b546040805163776ce6a160e01b815290516060926001600160a01b03169163776ce6a1916004808301926000929190829003018186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aca9190810190611b83565b905090565b600b546060906001600160a01b0316610afa5760405162461bcd60e51b815260040161067f906121df565b600b54604051637e66989160e01b81526001600160a01b0390911690637e66989190610b2a908590600401612123565b60006040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057b9190810190611a58565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600b546000906001600160a01b0316610bd45760405162461bcd60e51b815260040161067f906121df565b600b546040516346b2b08760e01b81526000916001600160a01b0316906346b2b08790610c0590869060040161213f565b60006040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c599190810190611bbd565b505050925050506108a781611073565b60606000610c7683610628565b90506108a781610d96565b606060018054610590906123c0565b600b546000906001600160a01b0316610cbb5760405162461bcd60e51b815260040161067f906121df565b600b54604051634b29835560e11b81526001600160a01b039091169063965306aa90610ceb90859060040161213f565b60206040518083038186803b158015610d0357600080fd5b505afa158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611a92565b600b546060906001600160a01b0316610d665760405162461bcd60e51b815260040161067f906121df565b600b54604051635bcb1b5b60e11b81526001600160a01b039091169063b79636b690610b2a9085906004016120ab565b6060610da1826110ed565b6000610dab611112565b90506000815111610dcb57604051806020016040528060008152506108a7565b80610dd584611121565b604051602001610de692919061202b565b6040516020818303038152906040529392505050565b610e0582610613565b610e0e81610ebf565b6106518383610f4f565b6000610e2381610ebf565b6001600160a01b038216610e495760405162461bcd60e51b815260040161067f9061222f565b600b546001600160a01b0383811691161415610e775760405162461bcd60e51b815260040161067f906121ff565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061057b575061057b82611226565b610716813361124b565b610ed38282610b7e565b6106e35760008281526008602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f0b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f598282610b7e565b156106e35760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080610fc283611073565b6001600160a01b0385811691161491505092915050565b6000610fe482611073565b9050610ff2816000846112af565b6001600160a01b038116600090815260036020526040812080546001929061101b90849061232f565b909155505060008281526002602052604080822080546001600160a01b03191690555183916001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a35050565b6000818152600260205260408120546001600160a01b03168061057b5760405162461bcd60e51b815260040161067f9061224f565b600060008051602061250d8339815191526110c281610ebf565b60006110cd600a5490565b90506110dd600a80546001019055565b6108a784826112ba565b50919050565b6110f681611396565b6107165760405162461bcd60e51b815260040161067f9061224f565b606060098054610590906123c0565b6060816111455750506040805180820190915260018152600360fc1b602082015290565b8160005b811561116f578061115981612414565b91506111689050600a836122fc565b9150611149565b6000816001600160401b03811115611189576111896124b1565b6040519080825280601f01601f1916602001820160405280156111b3576020820181803683370190505b5090505b841561121e576111c860018361232f565b91506111d5600a8661242f565b6111e09060306122e4565b60f81b8183815181106111f5576111f561249b565b60200101906001600160f81b031916908160001a905350611217600a866122fc565b94506111b7565b949350505050565b60006001600160e01b0319821663780e9d6360e01b148061057b575061057b826113b3565b6112558282610b7e565b6106e35761126d816001600160a01b03166014611403565b611278836020611403565b604051602001611289929190612059565b60408051601f198184030181529082905262461bcd60e51b825261067f9160040161213f565b610651838383611575565b6001600160a01b0382166112e05760405162461bcd60e51b815260040161067f906121bf565b6112e981611396565b156113065760405162461bcd60e51b815260040161067f9061223f565b611312600083836112af565b6001600160a01b038216600090815260036020526040812080546001929061133b9084906122e4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591a35050565b6000908152600260205260409020546001600160a01b0316151590565b60006001600160e01b031982166313f2a32f60e01b14806113e457506001600160e01b03198216635b5e139f60e01b145b8061057b57506301ffc9a760e01b6001600160e01b031983161461057b565b60606000611412836002612310565b61141d9060026122e4565b6001600160401b03811115611434576114346124b1565b6040519080825280601f01601f19166020018201604052801561145e576020820181803683370190505b509050600360fc1b816000815181106114795761147961249b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106114a8576114a861249b565b60200101906001600160f81b031916908160001a90535060006114cc846002612310565b6114d79060016122e4565b90505b600181111561154f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061150b5761150b61249b565b1a60f81b8282815181106115215761152161249b565b60200101906001600160f81b031916908160001a90535060049490941c93611548816123a9565b90506114da565b50831561156e5760405162461bcd60e51b815260040161067f906121af565b9392505050565b6001600160a01b0383166115d0576115cb81600680546000838152600760205260408120829055600182018355919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155565b6115f3565b816001600160a01b0316836001600160a01b0316146115f3576115f3838261162d565b6001600160a01b03821661160a57610651816116ca565b826001600160a01b0316826001600160a01b031614610651576106518282611779565b6000600161163a84610a05565b611644919061232f565b600083815260056020526040902054909150808214611697576001600160a01b03841660009081526004602090815260408083208584528252808320548484528184208190558352600590915290208190555b5060009182526005602090815260408084208490556001600160a01b039094168352600481528383209183525290812055565b6006546000906116dc9060019061232f565b600083815260076020526040812054600680549394509092849081106117045761170461249b565b9060005260206000200154905080600683815481106117255761172561249b565b600091825260208083209091019290925582815260079091526040808220849055858252812055600680548061175d5761175d612485565b6001900381819060005260206000200160009055905550505050565b600061178483610a05565b6001600160a01b039093166000908152600460209081526040808320868452825280832085905593825260059052919091209190915550565b60006117d06117cb84612296565b61227f565b905080838252602082019050828560208602820111156117f2576117f2600080fd5b60005b8581101561183a5781516001600160401b0381111561181657611816600080fd5b8086016118238982611933565b8552505060209283019291909101906001016117f5565b5050509392505050565b60006118526117cb846122b9565b90508281526020810184848401111561186d5761186d600080fd5b61187884828561236d565b509392505050565b600061188e6117cb846122b9565b9050828152602081018484840111156118a9576118a9600080fd5b611878848285612379565b803561057b816124d1565b600082601f8301126118d3576118d3600080fd5b815161121e8482602086016117bd565b805161057b816124e5565b803561057b816124ed565b803561057b816124f3565b803561057b81612503565b600082601f83011261192357611923600080fd5b813561121e848260208601611844565b600082601f83011261194757611947600080fd5b815161121e848260208601611880565b805161057b816124ed565b60006020828403121561197757611977600080fd5b600061121e84846118b4565b6000806000806080858703121561199c5761199c600080fd5b60006119a887876118b4565b94505060208501356001600160401b038111156119c7576119c7600080fd5b6119d38782880161190f565b93505060406119e4878288016118ee565b92505060608501356001600160401b03811115611a0357611a03600080fd5b611a0f8782880161190f565b91505092959194509250565b60008060408385031215611a3157611a31600080fd5b6000611a3d85856118b4565b9250506020611a4e858286016118ee565b9150509250929050565b600060208284031215611a6d57611a6d600080fd5b81516001600160401b03811115611a8657611a86600080fd5b61121e848285016118bf565b600060208284031215611aa757611aa7600080fd5b600061121e84846118e3565b600060208284031215611ac857611ac8600080fd5b600061121e84846118ee565b60008060408385031215611aea57611aea600080fd5b6000611af685856118ee565b9250506020611a4e858286016118b4565b600060208284031215611b1c57611b1c600080fd5b600061121e84846118f9565b600060208284031215611b3d57611b3d600080fd5b600061121e8484611904565b600060208284031215611b5e57611b5e600080fd5b81356001600160401b03811115611b7757611b77600080fd5b61121e8482850161190f565b600060208284031215611b9857611b98600080fd5b81516001600160401b03811115611bb157611bb1600080fd5b61121e84828501611933565b60008060008060008060c08789031215611bd957611bd9600080fd5b86516001600160401b03811115611bf257611bf2600080fd5b611bfe89828a01611933565b9650506020611c0f89828a016118e3565b9550506040611c2089828a01611957565b9450506060611c3189828a01611957565b9350506080611c4289828a01611957565b92505060a0611c5389828a016118e3565b9150509295509295509295565b600060208284031215611c7557611c75600080fd5b600061121e8484611957565b600061156e8383611d19565b611c9681612346565b82525050565b6000611ca6825190565b80845260208401935083602082028501611cc08560200190565b8060005b85811015611cf55784840389528151611cdd8582611c81565b94506020830160209a909a0199925050600101611cc4565b5091979650505050505050565b801515611c96565b80611c96565b611c9681612362565b6000611d23825190565b808452602084019350611d3a818560208601612379565b611d43816124c7565b9093019392505050565b6000611d57825190565b611d65818560208601612379565b9290920192915050565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b601d81526000602082017f5342543a206d696e7420746f20746865207a65726f206164647265737300000081529150611d9d565b601b81526000602082017a14d097d25111539512551657d053149150511657d0d49150551151602a1b81529150611d9d565b601981526000602082017814d3d5531390535157d0d3d395149050d517d393d517d4d155603a1b81529150611d9d565b602881526000602082017f534254456e756d657261626c653a206f776e657220696e646578206f7574206f8152676620626f756e647360c01b602082015291505b5060400190565b600a81526000602082016953414d455f56414c554560b01b81529150611d9d565b602681526000602082017f5342543a2061646472657373207a65726f206973206e6f7420612076616c69648152651037bbb732b960d11b60208201529150611e7b565b601e81526000602082017f5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e6572000081529150611d9d565b600c81526000602082016b5a45524f5f4144445245535360a01b81529150611d9d565b601981526000602082017814d0950e881d1bdad95b88185b1c9958591e481b5a5b9d1959603a1b81529150611d9d565b601581526000602082017414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b81529150611d9d565b602981526000602082017f534254456e756d657261626c653a20676c6f62616c20696e646578206f7574208152686f6620626f756e647360b81b60208201529150611e7b565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150611e7b565b60006120378285611d4d565b91506120438284611d4d565b64173539b7b760d91b815291506005820161121e565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006120858285611d4d565b7001034b99036b4b9b9b4b733903937b6329607d1b8152601101915061121e8284611d4d565b6020810161057b8284611c8d565b608081016120c78287611c8d565b81810360208301526120d98186611d19565b90506120e86040830185611d0a565b81810360608301526120fa8184611d19565b9695505050505050565b6020808252810161156e8184611c9c565b6020810161057b8284611d02565b6020810161057b8284611d0a565b6020810161057b8284611d10565b6020808252810161156e8184611d19565b60c080825281016121618189611d19565b90506121706020830188611d02565b61217d6040830187611d0a565b61218a6060830186611d0a565b6121976080830185611d0a565b6121a460a0830184611d02565b979650505050505050565b6020808252810161057b81611d6f565b6020808252810161057b81611da4565b6020808252810161057b81611dd8565b6020808252810161057b81611e0a565b6020808252810161057b81611e3a565b6020808252810161057b81611e82565b6020808252810161057b81611ea3565b6020808252810161057b81611ee6565b6020808252810161057b81611f1a565b6020808252810161057b81611f3d565b6020808252810161057b81611f6d565b6020808252810161057b81611f99565b6020808252810161057b81611fdf565b600061228a60405190565b90506108ab82826123e7565b60006001600160401b038211156122af576122af6124b1565b5060209081020190565b60006001600160401b038211156122d2576122d26124b1565b6122db826124c7565b60200192915050565b600082198211156122f7576122f7612443565b500190565b60008261230b5761230b612459565b500490565b600081600019048311821515161561232a5761232a612443565b500290565b60008282101561234157612341612443565b500390565b60006001600160a01b03821661057b565b600061057b82612346565b600061057b82612357565b82818337506000910152565b60005b8381101561239457818101518382015260200161237c565b838111156123a3576000848401525b50505050565b6000816123b8576123b8612443565b506000190190565b6002810460018216806123d457607f821691505b602082108114156110e7576110e761246f565b6123f0826124c7565b81018181106001600160401b038211171561240d5761240d6124b1565b6040525050565b600060001982141561242857612428612443565b5060010190565b60008261243e5761243e612459565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6124da81612346565b811461071657600080fd5b8015156124da565b806124da565b6001600160e01b031981166124da565b6124da8161235756fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212206fec9c49fea96cf5c475b14fb29f28b168259657980c0b1edbdb784714babe7a64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101685760003560e01c806301ffc9a71461016d57806306fdde03146101a35780630f2e68af146101c557806318160ddd146101f2578063248a9ca314610210578063294cdf0d146102305780632f2ff15d146102505780632f745c591461027257806336568abe1461029257806342966c68146102b257806346b2b087146102d25780634cf12d26146103045780634f6ccce7146103245780635141453e146103445780636352211e146103575780636a6278421461038457806370a08231146103a4578063776ce6a1146103c45780637e669891146103d957806391d1485414610406578063920ffa261461042657806393702f331461044657806395d89b4114610466578063965306aa1461047b578063a217fddf1461049b578063b507d481146104b0578063b79636b6146104ce578063c87b56dd146104ee578063d53913931461050e578063d547741f14610530578063ee7a9ec514610550575b600080fd5b34801561017957600080fd5b5061018d610188366004611b07565b610570565b60405161019a9190612115565b60405180910390f35b3480156101af57600080fd5b506101b8610581565b60405161019a919061213f565b3480156101d157600080fd5b50600b546101e5906001600160a01b031681565b60405161019a9190612131565b3480156101fe57600080fd5b506006545b60405161019a9190612123565b34801561021c57600080fd5b5061020361022b366004611ab3565b610613565b34801561023c57600080fd5b5061020361024b366004611962565b610628565b34801561025c57600080fd5b5061027061026b366004611ad4565b610635565b005b34801561027e57600080fd5b5061020361028d366004611a1b565b610656565b34801561029e57600080fd5b506102706102ad366004611ad4565b6106b1565b3480156102be57600080fd5b506102706102cd366004611ab3565b6106e7565b3480156102de57600080fd5b506102f26102ed366004611b49565b610719565b60405161019a96959493929190612150565b34801561031057600080fd5b506101b861031f366004611b49565b6107e7565b34801561033057600080fd5b5061020361033f366004611ab3565b6108b0565b610203610352366004611983565b6108fe565b34801561036357600080fd5b50610377610372366004611ab3565b6109c7565b60405161019a91906120ab565b34801561039057600080fd5b5061020361039f366004611962565b6109d2565b3480156103b057600080fd5b506102036103bf366004611962565b610a05565b3480156103d057600080fd5b506101b8610a49565b3480156103e557600080fd5b506103f96103f4366004611ab3565b610acf565b60405161019a9190612104565b34801561041257600080fd5b5061018d610421366004611ad4565b610b7e565b34801561043257600080fd5b50610377610441366004611b49565b610ba9565b34801561045257600080fd5b506101b8610461366004611962565b610c69565b34801561047257600080fd5b506101b8610c81565b34801561048757600080fd5b5061018d610496366004611b49565b610c90565b3480156104a757600080fd5b50610203600081565b3480156104bc57600080fd5b50600b546001600160a01b03166101e5565b3480156104da57600080fd5b506103f96104e9366004611962565b610d3b565b3480156104fa57600080fd5b506101b8610509366004611ab3565b610d96565b34801561051a57600080fd5b5061020360008051602061250d83398151915281565b34801561053c57600080fd5b5061027061054b366004611ad4565b610dfc565b34801561055c57600080fd5b5061027061056b366004611b28565b610e18565b600061057b82610e9a565b92915050565b606060008054610590906123c0565b80601f01602080910402602001604051908101604052809291908181526020018280546105bc906123c0565b80156106095780601f106105de57610100808354040283529160200191610609565b820191906000526020600020905b8154815290600101906020018083116105ec57829003601f168201915b5050505050905090565b60009081526008602052604090206001015490565b600061057b826000610656565b61063e82610613565b61064781610ebf565b6106518383610ec9565b505050565b600061066183610a05565b82106106885760405162461bcd60e51b815260040161067f906121ef565b60405180910390fd5b506001600160a01b03919091166000908152600460209081526040808320938352929052205490565b6001600160a01b03811633146106d95760405162461bcd60e51b815260040161067f9061226f565b6106e38282610f4f565b5050565b6106f13382610fb6565b61070d5760405162461bcd60e51b815260040161067f9061221f565b61071681610fd9565b50565b600b5460609060009081908190819081906001600160a01b031661074f5760405162461bcd60e51b815260040161067f906121df565b600b546040516346b2b08760e01b81526001600160a01b03909116906346b2b0879061077f908a9060040161213f565b60006040518083038186803b15801561079757600080fd5b505afa1580156107ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107d39190810190611bbd565b949c939b5091995097509550909350915050565b600b546060906001600160a01b03166108125760405162461bcd60e51b815260040161067f906121df565b600b546040516346b2b08760e01b81526000916001600160a01b0316906346b2b0879061084390869060040161213f565b60006040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108979190810190611bbd565b505050925050506108a781610d96565b9150505b919050565b60006108bb60065490565b82106108d95760405162461bcd60e51b815260040161067f9061225f565b600682815481106108ec576108ec61249b565b90600052602060002001549050919050565b600b546000906001600160a01b03166109295760405162461bcd60e51b815260040161067f906121df565b6000610934866109d2565b600b546040516303dd904360e41b81529192506001600160a01b031690633dd904309061096b9089908990899089906004016120b9565b602060405180830381600087803b15801561098557600080fd5b505af1158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd9190611c60565b5095945050505050565b600061057b82611073565b600060016109df83610a05565b106109fc5760405162461bcd60e51b815260040161067f906121cf565b61057b826110a8565b60006001600160a01b038216610a2d5760405162461bcd60e51b815260040161067f9061220f565b506001600160a01b031660009081526003602052604090205490565b600b546040805163776ce6a160e01b815290516060926001600160a01b03169163776ce6a1916004808301926000929190829003018186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aca9190810190611b83565b905090565b600b546060906001600160a01b0316610afa5760405162461bcd60e51b815260040161067f906121df565b600b54604051637e66989160e01b81526001600160a01b0390911690637e66989190610b2a908590600401612123565b60006040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057b9190810190611a58565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600b546000906001600160a01b0316610bd45760405162461bcd60e51b815260040161067f906121df565b600b546040516346b2b08760e01b81526000916001600160a01b0316906346b2b08790610c0590869060040161213f565b60006040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c599190810190611bbd565b505050925050506108a781611073565b60606000610c7683610628565b90506108a781610d96565b606060018054610590906123c0565b600b546000906001600160a01b0316610cbb5760405162461bcd60e51b815260040161067f906121df565b600b54604051634b29835560e11b81526001600160a01b039091169063965306aa90610ceb90859060040161213f565b60206040518083038186803b158015610d0357600080fd5b505afa158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611a92565b600b546060906001600160a01b0316610d665760405162461bcd60e51b815260040161067f906121df565b600b54604051635bcb1b5b60e11b81526001600160a01b039091169063b79636b690610b2a9085906004016120ab565b6060610da1826110ed565b6000610dab611112565b90506000815111610dcb57604051806020016040528060008152506108a7565b80610dd584611121565b604051602001610de692919061202b565b6040516020818303038152906040529392505050565b610e0582610613565b610e0e81610ebf565b6106518383610f4f565b6000610e2381610ebf565b6001600160a01b038216610e495760405162461bcd60e51b815260040161067f9061222f565b600b546001600160a01b0383811691161415610e775760405162461bcd60e51b815260040161067f906121ff565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061057b575061057b82611226565b610716813361124b565b610ed38282610b7e565b6106e35760008281526008602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f0b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f598282610b7e565b156106e35760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080610fc283611073565b6001600160a01b0385811691161491505092915050565b6000610fe482611073565b9050610ff2816000846112af565b6001600160a01b038116600090815260036020526040812080546001929061101b90849061232f565b909155505060008281526002602052604080822080546001600160a01b03191690555183916001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a35050565b6000818152600260205260408120546001600160a01b03168061057b5760405162461bcd60e51b815260040161067f9061224f565b600060008051602061250d8339815191526110c281610ebf565b60006110cd600a5490565b90506110dd600a80546001019055565b6108a784826112ba565b50919050565b6110f681611396565b6107165760405162461bcd60e51b815260040161067f9061224f565b606060098054610590906123c0565b6060816111455750506040805180820190915260018152600360fc1b602082015290565b8160005b811561116f578061115981612414565b91506111689050600a836122fc565b9150611149565b6000816001600160401b03811115611189576111896124b1565b6040519080825280601f01601f1916602001820160405280156111b3576020820181803683370190505b5090505b841561121e576111c860018361232f565b91506111d5600a8661242f565b6111e09060306122e4565b60f81b8183815181106111f5576111f561249b565b60200101906001600160f81b031916908160001a905350611217600a866122fc565b94506111b7565b949350505050565b60006001600160e01b0319821663780e9d6360e01b148061057b575061057b826113b3565b6112558282610b7e565b6106e35761126d816001600160a01b03166014611403565b611278836020611403565b604051602001611289929190612059565b60408051601f198184030181529082905262461bcd60e51b825261067f9160040161213f565b610651838383611575565b6001600160a01b0382166112e05760405162461bcd60e51b815260040161067f906121bf565b6112e981611396565b156113065760405162461bcd60e51b815260040161067f9061223f565b611312600083836112af565b6001600160a01b038216600090815260036020526040812080546001929061133b9084906122e4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591a35050565b6000908152600260205260409020546001600160a01b0316151590565b60006001600160e01b031982166313f2a32f60e01b14806113e457506001600160e01b03198216635b5e139f60e01b145b8061057b57506301ffc9a760e01b6001600160e01b031983161461057b565b60606000611412836002612310565b61141d9060026122e4565b6001600160401b03811115611434576114346124b1565b6040519080825280601f01601f19166020018201604052801561145e576020820181803683370190505b509050600360fc1b816000815181106114795761147961249b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106114a8576114a861249b565b60200101906001600160f81b031916908160001a90535060006114cc846002612310565b6114d79060016122e4565b90505b600181111561154f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061150b5761150b61249b565b1a60f81b8282815181106115215761152161249b565b60200101906001600160f81b031916908160001a90535060049490941c93611548816123a9565b90506114da565b50831561156e5760405162461bcd60e51b815260040161067f906121af565b9392505050565b6001600160a01b0383166115d0576115cb81600680546000838152600760205260408120829055600182018355919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155565b6115f3565b816001600160a01b0316836001600160a01b0316146115f3576115f3838261162d565b6001600160a01b03821661160a57610651816116ca565b826001600160a01b0316826001600160a01b031614610651576106518282611779565b6000600161163a84610a05565b611644919061232f565b600083815260056020526040902054909150808214611697576001600160a01b03841660009081526004602090815260408083208584528252808320548484528184208190558352600590915290208190555b5060009182526005602090815260408084208490556001600160a01b039094168352600481528383209183525290812055565b6006546000906116dc9060019061232f565b600083815260076020526040812054600680549394509092849081106117045761170461249b565b9060005260206000200154905080600683815481106117255761172561249b565b600091825260208083209091019290925582815260079091526040808220849055858252812055600680548061175d5761175d612485565b6001900381819060005260206000200160009055905550505050565b600061178483610a05565b6001600160a01b039093166000908152600460209081526040808320868452825280832085905593825260059052919091209190915550565b60006117d06117cb84612296565b61227f565b905080838252602082019050828560208602820111156117f2576117f2600080fd5b60005b8581101561183a5781516001600160401b0381111561181657611816600080fd5b8086016118238982611933565b8552505060209283019291909101906001016117f5565b5050509392505050565b60006118526117cb846122b9565b90508281526020810184848401111561186d5761186d600080fd5b61187884828561236d565b509392505050565b600061188e6117cb846122b9565b9050828152602081018484840111156118a9576118a9600080fd5b611878848285612379565b803561057b816124d1565b600082601f8301126118d3576118d3600080fd5b815161121e8482602086016117bd565b805161057b816124e5565b803561057b816124ed565b803561057b816124f3565b803561057b81612503565b600082601f83011261192357611923600080fd5b813561121e848260208601611844565b600082601f83011261194757611947600080fd5b815161121e848260208601611880565b805161057b816124ed565b60006020828403121561197757611977600080fd5b600061121e84846118b4565b6000806000806080858703121561199c5761199c600080fd5b60006119a887876118b4565b94505060208501356001600160401b038111156119c7576119c7600080fd5b6119d38782880161190f565b93505060406119e4878288016118ee565b92505060608501356001600160401b03811115611a0357611a03600080fd5b611a0f8782880161190f565b91505092959194509250565b60008060408385031215611a3157611a31600080fd5b6000611a3d85856118b4565b9250506020611a4e858286016118ee565b9150509250929050565b600060208284031215611a6d57611a6d600080fd5b81516001600160401b03811115611a8657611a86600080fd5b61121e848285016118bf565b600060208284031215611aa757611aa7600080fd5b600061121e84846118e3565b600060208284031215611ac857611ac8600080fd5b600061121e84846118ee565b60008060408385031215611aea57611aea600080fd5b6000611af685856118ee565b9250506020611a4e858286016118b4565b600060208284031215611b1c57611b1c600080fd5b600061121e84846118f9565b600060208284031215611b3d57611b3d600080fd5b600061121e8484611904565b600060208284031215611b5e57611b5e600080fd5b81356001600160401b03811115611b7757611b77600080fd5b61121e8482850161190f565b600060208284031215611b9857611b98600080fd5b81516001600160401b03811115611bb157611bb1600080fd5b61121e84828501611933565b60008060008060008060c08789031215611bd957611bd9600080fd5b86516001600160401b03811115611bf257611bf2600080fd5b611bfe89828a01611933565b9650506020611c0f89828a016118e3565b9550506040611c2089828a01611957565b9450506060611c3189828a01611957565b9350506080611c4289828a01611957565b92505060a0611c5389828a016118e3565b9150509295509295509295565b600060208284031215611c7557611c75600080fd5b600061121e8484611957565b600061156e8383611d19565b611c9681612346565b82525050565b6000611ca6825190565b80845260208401935083602082028501611cc08560200190565b8060005b85811015611cf55784840389528151611cdd8582611c81565b94506020830160209a909a0199925050600101611cc4565b5091979650505050505050565b801515611c96565b80611c96565b611c9681612362565b6000611d23825190565b808452602084019350611d3a818560208601612379565b611d43816124c7565b9093019392505050565b6000611d57825190565b611d65818560208601612379565b9290920192915050565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b601d81526000602082017f5342543a206d696e7420746f20746865207a65726f206164647265737300000081529150611d9d565b601b81526000602082017a14d097d25111539512551657d053149150511657d0d49150551151602a1b81529150611d9d565b601981526000602082017814d3d5531390535157d0d3d395149050d517d393d517d4d155603a1b81529150611d9d565b602881526000602082017f534254456e756d657261626c653a206f776e657220696e646578206f7574206f8152676620626f756e647360c01b602082015291505b5060400190565b600a81526000602082016953414d455f56414c554560b01b81529150611d9d565b602681526000602082017f5342543a2061646472657373207a65726f206973206e6f7420612076616c69648152651037bbb732b960d11b60208201529150611e7b565b601e81526000602082017f5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e6572000081529150611d9d565b600c81526000602082016b5a45524f5f4144445245535360a01b81529150611d9d565b601981526000602082017814d0950e881d1bdad95b88185b1c9958591e481b5a5b9d1959603a1b81529150611d9d565b601581526000602082017414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b81529150611d9d565b602981526000602082017f534254456e756d657261626c653a20676c6f62616c20696e646578206f7574208152686f6620626f756e647360b81b60208201529150611e7b565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150611e7b565b60006120378285611d4d565b91506120438284611d4d565b64173539b7b760d91b815291506005820161121e565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006120858285611d4d565b7001034b99036b4b9b9b4b733903937b6329607d1b8152601101915061121e8284611d4d565b6020810161057b8284611c8d565b608081016120c78287611c8d565b81810360208301526120d98186611d19565b90506120e86040830185611d0a565b81810360608301526120fa8184611d19565b9695505050505050565b6020808252810161156e8184611c9c565b6020810161057b8284611d02565b6020810161057b8284611d0a565b6020810161057b8284611d10565b6020808252810161156e8184611d19565b60c080825281016121618189611d19565b90506121706020830188611d02565b61217d6040830187611d0a565b61218a6060830186611d0a565b6121976080830185611d0a565b6121a460a0830184611d02565b979650505050505050565b6020808252810161057b81611d6f565b6020808252810161057b81611da4565b6020808252810161057b81611dd8565b6020808252810161057b81611e0a565b6020808252810161057b81611e3a565b6020808252810161057b81611e82565b6020808252810161057b81611ea3565b6020808252810161057b81611ee6565b6020808252810161057b81611f1a565b6020808252810161057b81611f3d565b6020808252810161057b81611f6d565b6020808252810161057b81611f99565b6020808252810161057b81611fdf565b600061228a60405190565b90506108ab82826123e7565b60006001600160401b038211156122af576122af6124b1565b5060209081020190565b60006001600160401b038211156122d2576122d26124b1565b6122db826124c7565b60200192915050565b600082198211156122f7576122f7612443565b500190565b60008261230b5761230b612459565b500490565b600081600019048311821515161561232a5761232a612443565b500290565b60008282101561234157612341612443565b500390565b60006001600160a01b03821661057b565b600061057b82612346565b600061057b82612357565b82818337506000910152565b60005b8381101561239457818101518382015260200161237c565b838111156123a3576000848401525b50505050565b6000816123b8576123b8612443565b506000190190565b6002810460018216806123d457607f821691505b602082108114156110e7576110e761246f565b6123f0826124c7565b81018181106001600160401b038211171561240d5761240d6124b1565b6040525050565b600060001982141561242857612428612443565b5060010190565b60008261243e5761243e612459565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6124da81612346565b811461071657600080fd5b8015156124da565b806124da565b6001600160e01b031981166124da565b6124da8161235756fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a26469706673582212206fec9c49fea96cf5c475b14fb29f28b168259657980c0b1edbdb784714babe7a64736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "Soulbound identity, that inherits from the SBT contract.",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {ISBT-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {SBT-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "constructor": {
        "details": "Creates a new soulbound identity, inheriting from the SBT contract.",
        "params": {
          "admin": "Administrator of the smart contract",
          "baseTokenURI": "Base URI of the token"
        }
      },
      "getExtension()": {
        "details": "This function returns the extension of the soul name",
        "returns": {
          "_0": "Extension of the soul name"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSoulName()": {
        "details": "This function returns the address of the SoulName contract linked to this identity",
        "returns": {
          "_0": "Address of the SoulName contract"
        }
      },
      "getSoulNames(address)": {
        "details": "This function queries all the identity names of the specified account",
        "params": {
          "owner": "Address of the owner of the identities"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the account"
        }
      },
      "getSoulNames(uint256)": {
        "details": "This function queries all the identity names of the specified identity Id",
        "params": {
          "tokenId": "TokenId of the identity"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the identity Id"
        }
      },
      "getTokenData(string)": {
        "details": "This function queries the information of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "active": "`true` if the soul name is active, `false` otherwise",
          "expirationDate": "Expiration date of the soul name",
          "identityId": "Identity id of the soul name",
          "linked": "`true` if the soul name is linked, `false` otherwise",
          "sbtName": "Soul name, in upper/lower case and extension",
          "tokenId": "SoulName id of the soul name"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAvailable(string)": {
        "details": "This function queries if a soul name already exists and is in the available state",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "available": "`true` if the soul name is available, `false` otherwise"
        }
      },
      "mint(address)": {
        "details": "The caller can only mint one identity per address",
        "params": {
          "to": "Address of the admin of the new identity"
        }
      },
      "mintIdentityWithName(address,string,uint256,string)": {
        "details": "The caller can only mint one identity per address, and the name must be unique",
        "params": {
          "_tokenURI": "URI of the NFT",
          "name": "Name of the new identity",
          "to": "Address of the admin of the new identity",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "name()": {
        "details": "See {ISBTMetadata-name}."
      },
      "ownerOf(string)": {
        "details": "This function returns the owner address of the soul name identity specified by the name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "Address of the owner of the identity"
        }
      },
      "ownerOf(uint256)": {
        "details": "This function returns the owner address of the identity specified by the tokenId",
        "params": {
          "tokenId": "TokenId of the identity"
        },
        "returns": {
          "_0": "Address of the owner of the identity"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setSoulName(address)": {
        "details": "The caller must have the admin to call this function",
        "params": {
          "_soulName": "Address of the SoulName contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
        }
      },
      "symbol()": {
        "details": "See {ISBTMetadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {ISBTEnumerable-tokenByIndex}."
      },
      "tokenOfOwner(address)": {
        "details": "This function returns the tokenId of the identity owned by an account",
        "params": {
          "owner": "Address of the owner of the identity"
        },
        "returns": {
          "_0": "TokenId of the identity owned by the account"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {ISBTEnumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(address)": {
        "details": "This function returns the token URI of the identity owned by an account",
        "params": {
          "owner": "Address of the owner of the identity"
        },
        "returns": {
          "_0": "URI of the identity owned by the account"
        }
      },
      "tokenURI(string)": {
        "details": "This function returns the token URI of the soul name identity specified by the name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "URI of the identity associated to a soul name"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
        "params": {
          "tokenId": "SBT to get the URI of"
        },
        "returns": {
          "_0": "URI of the SBT"
        }
      },
      "totalSupply()": {
        "details": "See {ISBTEnumerable-totalSupply}."
      }
    },
    "title": "Soulbound Identity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates a new soulbound identity"
      },
      "getExtension()": {
        "notice": "Returns the extension of the soul name"
      },
      "getSoulName()": {
        "notice": "Returns the address of the SoulName contract linked to this identity"
      },
      "getSoulNames(address)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getSoulNames(uint256)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getTokenData(string)": {
        "notice": "Returns the information of a soul name"
      },
      "isAvailable(string)": {
        "notice": "Checks if a soul name is available"
      },
      "mint(address)": {
        "notice": "Mints a new soulbound identity"
      },
      "mintIdentityWithName(address,string,uint256,string)": {
        "notice": "Mints a new soulbound identity with a SoulName associated to it"
      },
      "ownerOf(string)": {
        "notice": "Returns the owner address of a soul name"
      },
      "ownerOf(uint256)": {
        "notice": "Returns the owner address of an identity"
      },
      "setSoulName(address)": {
        "notice": "Sets the SoulName contract address linked to this identity"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenOfOwner(address)": {
        "notice": "Returns the identity id of an account"
      },
      "tokenURI(address)": {
        "notice": "Returns the URI of the owner of an identity"
      },
      "tokenURI(string)": {
        "notice": "Returns the URI of a soul name"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "notice": "Soulbound token that represents an identity.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9409,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 9411,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 9415,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9419,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9878,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9882,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9885,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_allTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9889,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_roles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 8863,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 8997,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)3369_storage"
      },
      {
        "astId": 7255,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "soulName",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISoulName)8355"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulName)8355": {
        "encoding": "inplace",
        "label": "contract ISoulName",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3369_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3368,
            "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}